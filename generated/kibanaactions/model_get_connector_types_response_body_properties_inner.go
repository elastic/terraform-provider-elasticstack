/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the GetConnectorTypesResponseBodyPropertiesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetConnectorTypesResponseBodyPropertiesInner{}

// GetConnectorTypesResponseBodyPropertiesInner struct for GetConnectorTypesResponseBodyPropertiesInner
type GetConnectorTypesResponseBodyPropertiesInner struct {
	// Indicates whether the connector type is enabled in Kibana.
	Enabled *bool `json:"enabled,omitempty"`
	// Indicates whether the connector type is enabled in the Kibana `.yml` file.
	EnabledInConfig *bool `json:"enabled_in_config,omitempty"`
	// Indicates whether the connector is enabled in the license.
	EnabledInLicense *bool           `json:"enabled_in_license,omitempty"`
	Id               *ConnectorTypes `json:"id,omitempty"`
	// The license that is required to use the connector type.
	MinimumLicenseRequired *string `json:"minimum_license_required,omitempty"`
	// The name of the connector type.
	Name *string `json:"name,omitempty"`
	// The Kibana features that are supported by the connector type.
	SupportedFeatureIds []Features `json:"supported_feature_ids,omitempty"`
}

// NewGetConnectorTypesResponseBodyPropertiesInner instantiates a new GetConnectorTypesResponseBodyPropertiesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetConnectorTypesResponseBodyPropertiesInner() *GetConnectorTypesResponseBodyPropertiesInner {
	this := GetConnectorTypesResponseBodyPropertiesInner{}
	return &this
}

// NewGetConnectorTypesResponseBodyPropertiesInnerWithDefaults instantiates a new GetConnectorTypesResponseBodyPropertiesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetConnectorTypesResponseBodyPropertiesInnerWithDefaults() *GetConnectorTypesResponseBodyPropertiesInner {
	this := GetConnectorTypesResponseBodyPropertiesInner{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GetConnectorTypesResponseBodyPropertiesInner) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEnabledInConfig returns the EnabledInConfig field value if set, zero value otherwise.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetEnabledInConfig() bool {
	if o == nil || IsNil(o.EnabledInConfig) {
		var ret bool
		return ret
	}
	return *o.EnabledInConfig
}

// GetEnabledInConfigOk returns a tuple with the EnabledInConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetEnabledInConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.EnabledInConfig) {
		return nil, false
	}
	return o.EnabledInConfig, true
}

// HasEnabledInConfig returns a boolean if a field has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) HasEnabledInConfig() bool {
	if o != nil && !IsNil(o.EnabledInConfig) {
		return true
	}

	return false
}

// SetEnabledInConfig gets a reference to the given bool and assigns it to the EnabledInConfig field.
func (o *GetConnectorTypesResponseBodyPropertiesInner) SetEnabledInConfig(v bool) {
	o.EnabledInConfig = &v
}

// GetEnabledInLicense returns the EnabledInLicense field value if set, zero value otherwise.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetEnabledInLicense() bool {
	if o == nil || IsNil(o.EnabledInLicense) {
		var ret bool
		return ret
	}
	return *o.EnabledInLicense
}

// GetEnabledInLicenseOk returns a tuple with the EnabledInLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetEnabledInLicenseOk() (*bool, bool) {
	if o == nil || IsNil(o.EnabledInLicense) {
		return nil, false
	}
	return o.EnabledInLicense, true
}

// HasEnabledInLicense returns a boolean if a field has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) HasEnabledInLicense() bool {
	if o != nil && !IsNil(o.EnabledInLicense) {
		return true
	}

	return false
}

// SetEnabledInLicense gets a reference to the given bool and assigns it to the EnabledInLicense field.
func (o *GetConnectorTypesResponseBodyPropertiesInner) SetEnabledInLicense(v bool) {
	o.EnabledInLicense = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetId() ConnectorTypes {
	if o == nil || IsNil(o.Id) {
		var ret ConnectorTypes
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetIdOk() (*ConnectorTypes, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given ConnectorTypes and assigns it to the Id field.
func (o *GetConnectorTypesResponseBodyPropertiesInner) SetId(v ConnectorTypes) {
	o.Id = &v
}

// GetMinimumLicenseRequired returns the MinimumLicenseRequired field value if set, zero value otherwise.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetMinimumLicenseRequired() string {
	if o == nil || IsNil(o.MinimumLicenseRequired) {
		var ret string
		return ret
	}
	return *o.MinimumLicenseRequired
}

// GetMinimumLicenseRequiredOk returns a tuple with the MinimumLicenseRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetMinimumLicenseRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumLicenseRequired) {
		return nil, false
	}
	return o.MinimumLicenseRequired, true
}

// HasMinimumLicenseRequired returns a boolean if a field has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) HasMinimumLicenseRequired() bool {
	if o != nil && !IsNil(o.MinimumLicenseRequired) {
		return true
	}

	return false
}

// SetMinimumLicenseRequired gets a reference to the given string and assigns it to the MinimumLicenseRequired field.
func (o *GetConnectorTypesResponseBodyPropertiesInner) SetMinimumLicenseRequired(v string) {
	o.MinimumLicenseRequired = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetConnectorTypesResponseBodyPropertiesInner) SetName(v string) {
	o.Name = &v
}

// GetSupportedFeatureIds returns the SupportedFeatureIds field value if set, zero value otherwise.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetSupportedFeatureIds() []Features {
	if o == nil || IsNil(o.SupportedFeatureIds) {
		var ret []Features
		return ret
	}
	return o.SupportedFeatureIds
}

// GetSupportedFeatureIdsOk returns a tuple with the SupportedFeatureIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) GetSupportedFeatureIdsOk() ([]Features, bool) {
	if o == nil || IsNil(o.SupportedFeatureIds) {
		return nil, false
	}
	return o.SupportedFeatureIds, true
}

// HasSupportedFeatureIds returns a boolean if a field has been set.
func (o *GetConnectorTypesResponseBodyPropertiesInner) HasSupportedFeatureIds() bool {
	if o != nil && !IsNil(o.SupportedFeatureIds) {
		return true
	}

	return false
}

// SetSupportedFeatureIds gets a reference to the given []Features and assigns it to the SupportedFeatureIds field.
func (o *GetConnectorTypesResponseBodyPropertiesInner) SetSupportedFeatureIds(v []Features) {
	o.SupportedFeatureIds = v
}

func (o GetConnectorTypesResponseBodyPropertiesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetConnectorTypesResponseBodyPropertiesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.EnabledInConfig) {
		toSerialize["enabled_in_config"] = o.EnabledInConfig
	}
	if !IsNil(o.EnabledInLicense) {
		toSerialize["enabled_in_license"] = o.EnabledInLicense
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MinimumLicenseRequired) {
		toSerialize["minimum_license_required"] = o.MinimumLicenseRequired
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SupportedFeatureIds) {
		toSerialize["supported_feature_ids"] = o.SupportedFeatureIds
	}
	return toSerialize, nil
}

type NullableGetConnectorTypesResponseBodyPropertiesInner struct {
	value *GetConnectorTypesResponseBodyPropertiesInner
	isSet bool
}

func (v NullableGetConnectorTypesResponseBodyPropertiesInner) Get() *GetConnectorTypesResponseBodyPropertiesInner {
	return v.value
}

func (v *NullableGetConnectorTypesResponseBodyPropertiesInner) Set(val *GetConnectorTypesResponseBodyPropertiesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetConnectorTypesResponseBodyPropertiesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetConnectorTypesResponseBodyPropertiesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetConnectorTypesResponseBodyPropertiesInner(val *GetConnectorTypesResponseBodyPropertiesInner) *NullableGetConnectorTypesResponseBodyPropertiesInner {
	return &NullableGetConnectorTypesResponseBodyPropertiesInner{value: val, isSet: true}
}

func (v NullableGetConnectorTypesResponseBodyPropertiesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetConnectorTypesResponseBodyPropertiesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
