/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the RunConnectorSubactionPushtoserviceSubActionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunConnectorSubactionPushtoserviceSubActionParams{}

// RunConnectorSubactionPushtoserviceSubActionParams The set of configuration properties for the action.
type RunConnectorSubactionPushtoserviceSubActionParams struct {
	// Additional information that is sent to Jira, ServiceNow ITSM, ServiceNow SecOps, or Swimlane.
	Comments []RunConnectorSubactionPushtoserviceSubActionParamsCommentsInner `json:"comments,omitempty"`
	Incident *RunConnectorSubactionPushtoserviceSubActionParamsIncident       `json:"incident,omitempty"`
}

// NewRunConnectorSubactionPushtoserviceSubActionParams instantiates a new RunConnectorSubactionPushtoserviceSubActionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunConnectorSubactionPushtoserviceSubActionParams() *RunConnectorSubactionPushtoserviceSubActionParams {
	this := RunConnectorSubactionPushtoserviceSubActionParams{}
	return &this
}

// NewRunConnectorSubactionPushtoserviceSubActionParamsWithDefaults instantiates a new RunConnectorSubactionPushtoserviceSubActionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunConnectorSubactionPushtoserviceSubActionParamsWithDefaults() *RunConnectorSubactionPushtoserviceSubActionParams {
	this := RunConnectorSubactionPushtoserviceSubActionParams{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *RunConnectorSubactionPushtoserviceSubActionParams) GetComments() []RunConnectorSubactionPushtoserviceSubActionParamsCommentsInner {
	if o == nil || IsNil(o.Comments) {
		var ret []RunConnectorSubactionPushtoserviceSubActionParamsCommentsInner
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionPushtoserviceSubActionParams) GetCommentsOk() ([]RunConnectorSubactionPushtoserviceSubActionParamsCommentsInner, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *RunConnectorSubactionPushtoserviceSubActionParams) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []RunConnectorSubactionPushtoserviceSubActionParamsCommentsInner and assigns it to the Comments field.
func (o *RunConnectorSubactionPushtoserviceSubActionParams) SetComments(v []RunConnectorSubactionPushtoserviceSubActionParamsCommentsInner) {
	o.Comments = v
}

// GetIncident returns the Incident field value if set, zero value otherwise.
func (o *RunConnectorSubactionPushtoserviceSubActionParams) GetIncident() RunConnectorSubactionPushtoserviceSubActionParamsIncident {
	if o == nil || IsNil(o.Incident) {
		var ret RunConnectorSubactionPushtoserviceSubActionParamsIncident
		return ret
	}
	return *o.Incident
}

// GetIncidentOk returns a tuple with the Incident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionPushtoserviceSubActionParams) GetIncidentOk() (*RunConnectorSubactionPushtoserviceSubActionParamsIncident, bool) {
	if o == nil || IsNil(o.Incident) {
		return nil, false
	}
	return o.Incident, true
}

// HasIncident returns a boolean if a field has been set.
func (o *RunConnectorSubactionPushtoserviceSubActionParams) HasIncident() bool {
	if o != nil && !IsNil(o.Incident) {
		return true
	}

	return false
}

// SetIncident gets a reference to the given RunConnectorSubactionPushtoserviceSubActionParamsIncident and assigns it to the Incident field.
func (o *RunConnectorSubactionPushtoserviceSubActionParams) SetIncident(v RunConnectorSubactionPushtoserviceSubActionParamsIncident) {
	o.Incident = &v
}

func (o RunConnectorSubactionPushtoserviceSubActionParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunConnectorSubactionPushtoserviceSubActionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Incident) {
		toSerialize["incident"] = o.Incident
	}
	return toSerialize, nil
}

type NullableRunConnectorSubactionPushtoserviceSubActionParams struct {
	value *RunConnectorSubactionPushtoserviceSubActionParams
	isSet bool
}

func (v NullableRunConnectorSubactionPushtoserviceSubActionParams) Get() *RunConnectorSubactionPushtoserviceSubActionParams {
	return v.value
}

func (v *NullableRunConnectorSubactionPushtoserviceSubActionParams) Set(val *RunConnectorSubactionPushtoserviceSubActionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnectorSubactionPushtoserviceSubActionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnectorSubactionPushtoserviceSubActionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnectorSubactionPushtoserviceSubActionParams(val *RunConnectorSubactionPushtoserviceSubActionParams) *NullableRunConnectorSubactionPushtoserviceSubActionParams {
	return &NullableRunConnectorSubactionPushtoserviceSubActionParams{value: val, isSet: true}
}

func (v NullableRunConnectorSubactionPushtoserviceSubActionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnectorSubactionPushtoserviceSubActionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
