/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the RunConnectorSubactionIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunConnectorSubactionIssue{}

// RunConnectorSubactionIssue The `issue` subaction for Jira connectors.
type RunConnectorSubactionIssue struct {
	// The action to test.
	SubAction       string                                     `json:"subAction"`
	SubActionParams *RunConnectorSubactionIssueSubActionParams `json:"subActionParams,omitempty"`
}

// NewRunConnectorSubactionIssue instantiates a new RunConnectorSubactionIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunConnectorSubactionIssue(subAction string) *RunConnectorSubactionIssue {
	this := RunConnectorSubactionIssue{}
	this.SubAction = subAction
	return &this
}

// NewRunConnectorSubactionIssueWithDefaults instantiates a new RunConnectorSubactionIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunConnectorSubactionIssueWithDefaults() *RunConnectorSubactionIssue {
	this := RunConnectorSubactionIssue{}
	return &this
}

// GetSubAction returns the SubAction field value
func (o *RunConnectorSubactionIssue) GetSubAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubAction
}

// GetSubActionOk returns a tuple with the SubAction field value
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionIssue) GetSubActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubAction, true
}

// SetSubAction sets field value
func (o *RunConnectorSubactionIssue) SetSubAction(v string) {
	o.SubAction = v
}

// GetSubActionParams returns the SubActionParams field value if set, zero value otherwise.
func (o *RunConnectorSubactionIssue) GetSubActionParams() RunConnectorSubactionIssueSubActionParams {
	if o == nil || IsNil(o.SubActionParams) {
		var ret RunConnectorSubactionIssueSubActionParams
		return ret
	}
	return *o.SubActionParams
}

// GetSubActionParamsOk returns a tuple with the SubActionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionIssue) GetSubActionParamsOk() (*RunConnectorSubactionIssueSubActionParams, bool) {
	if o == nil || IsNil(o.SubActionParams) {
		return nil, false
	}
	return o.SubActionParams, true
}

// HasSubActionParams returns a boolean if a field has been set.
func (o *RunConnectorSubactionIssue) HasSubActionParams() bool {
	if o != nil && !IsNil(o.SubActionParams) {
		return true
	}

	return false
}

// SetSubActionParams gets a reference to the given RunConnectorSubactionIssueSubActionParams and assigns it to the SubActionParams field.
func (o *RunConnectorSubactionIssue) SetSubActionParams(v RunConnectorSubactionIssueSubActionParams) {
	o.SubActionParams = &v
}

func (o RunConnectorSubactionIssue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunConnectorSubactionIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subAction"] = o.SubAction
	if !IsNil(o.SubActionParams) {
		toSerialize["subActionParams"] = o.SubActionParams
	}
	return toSerialize, nil
}

type NullableRunConnectorSubactionIssue struct {
	value *RunConnectorSubactionIssue
	isSet bool
}

func (v NullableRunConnectorSubactionIssue) Get() *RunConnectorSubactionIssue {
	return v.value
}

func (v *NullableRunConnectorSubactionIssue) Set(val *RunConnectorSubactionIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnectorSubactionIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnectorSubactionIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnectorSubactionIssue(val *RunConnectorSubactionIssue) *NullableRunConnectorSubactionIssue {
	return &NullableRunConnectorSubactionIssue{value: val, isSet: true}
}

func (v NullableRunConnectorSubactionIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnectorSubactionIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
