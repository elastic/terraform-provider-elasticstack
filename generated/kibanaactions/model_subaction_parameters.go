/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
	"fmt"
)

// SubactionParameters - Test an action that involves a subaction.
type SubactionParameters struct {
	RunConnectorSubactionAddevent          *RunConnectorSubactionAddevent
	RunConnectorSubactionClosealert        *RunConnectorSubactionClosealert
	RunConnectorSubactionCreatealert       *RunConnectorSubactionCreatealert
	RunConnectorSubactionFieldsbyissuetype *RunConnectorSubactionFieldsbyissuetype
	RunConnectorSubactionGetchoices        *RunConnectorSubactionGetchoices
	RunConnectorSubactionGetfields         *RunConnectorSubactionGetfields
	RunConnectorSubactionGetincident       *RunConnectorSubactionGetincident
	RunConnectorSubactionIssue             *RunConnectorSubactionIssue
	RunConnectorSubactionIssues            *RunConnectorSubactionIssues
	RunConnectorSubactionIssuetypes        *RunConnectorSubactionIssuetypes
	RunConnectorSubactionPushtoservice     *RunConnectorSubactionPushtoservice
}

// RunConnectorSubactionAddeventAsSubactionParameters is a convenience function that returns RunConnectorSubactionAddevent wrapped in SubactionParameters
func RunConnectorSubactionAddeventAsSubactionParameters(v *RunConnectorSubactionAddevent) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionAddevent: v,
	}
}

// RunConnectorSubactionClosealertAsSubactionParameters is a convenience function that returns RunConnectorSubactionClosealert wrapped in SubactionParameters
func RunConnectorSubactionClosealertAsSubactionParameters(v *RunConnectorSubactionClosealert) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionClosealert: v,
	}
}

// RunConnectorSubactionCreatealertAsSubactionParameters is a convenience function that returns RunConnectorSubactionCreatealert wrapped in SubactionParameters
func RunConnectorSubactionCreatealertAsSubactionParameters(v *RunConnectorSubactionCreatealert) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionCreatealert: v,
	}
}

// RunConnectorSubactionFieldsbyissuetypeAsSubactionParameters is a convenience function that returns RunConnectorSubactionFieldsbyissuetype wrapped in SubactionParameters
func RunConnectorSubactionFieldsbyissuetypeAsSubactionParameters(v *RunConnectorSubactionFieldsbyissuetype) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionFieldsbyissuetype: v,
	}
}

// RunConnectorSubactionGetchoicesAsSubactionParameters is a convenience function that returns RunConnectorSubactionGetchoices wrapped in SubactionParameters
func RunConnectorSubactionGetchoicesAsSubactionParameters(v *RunConnectorSubactionGetchoices) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionGetchoices: v,
	}
}

// RunConnectorSubactionGetfieldsAsSubactionParameters is a convenience function that returns RunConnectorSubactionGetfields wrapped in SubactionParameters
func RunConnectorSubactionGetfieldsAsSubactionParameters(v *RunConnectorSubactionGetfields) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionGetfields: v,
	}
}

// RunConnectorSubactionGetincidentAsSubactionParameters is a convenience function that returns RunConnectorSubactionGetincident wrapped in SubactionParameters
func RunConnectorSubactionGetincidentAsSubactionParameters(v *RunConnectorSubactionGetincident) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionGetincident: v,
	}
}

// RunConnectorSubactionIssueAsSubactionParameters is a convenience function that returns RunConnectorSubactionIssue wrapped in SubactionParameters
func RunConnectorSubactionIssueAsSubactionParameters(v *RunConnectorSubactionIssue) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionIssue: v,
	}
}

// RunConnectorSubactionIssuesAsSubactionParameters is a convenience function that returns RunConnectorSubactionIssues wrapped in SubactionParameters
func RunConnectorSubactionIssuesAsSubactionParameters(v *RunConnectorSubactionIssues) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionIssues: v,
	}
}

// RunConnectorSubactionIssuetypesAsSubactionParameters is a convenience function that returns RunConnectorSubactionIssuetypes wrapped in SubactionParameters
func RunConnectorSubactionIssuetypesAsSubactionParameters(v *RunConnectorSubactionIssuetypes) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionIssuetypes: v,
	}
}

// RunConnectorSubactionPushtoserviceAsSubactionParameters is a convenience function that returns RunConnectorSubactionPushtoservice wrapped in SubactionParameters
func RunConnectorSubactionPushtoserviceAsSubactionParameters(v *RunConnectorSubactionPushtoservice) SubactionParameters {
	return SubactionParameters{
		RunConnectorSubactionPushtoservice: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubactionParameters) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RunConnectorSubactionAddevent
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionAddevent)
	if err == nil {
		jsonRunConnectorSubactionAddevent, _ := json.Marshal(dst.RunConnectorSubactionAddevent)
		if string(jsonRunConnectorSubactionAddevent) == "{}" { // empty struct
			dst.RunConnectorSubactionAddevent = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionAddevent = nil
	}

	// try to unmarshal data into RunConnectorSubactionClosealert
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionClosealert)
	if err == nil {
		jsonRunConnectorSubactionClosealert, _ := json.Marshal(dst.RunConnectorSubactionClosealert)
		if string(jsonRunConnectorSubactionClosealert) == "{}" { // empty struct
			dst.RunConnectorSubactionClosealert = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionClosealert = nil
	}

	// try to unmarshal data into RunConnectorSubactionCreatealert
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionCreatealert)
	if err == nil {
		jsonRunConnectorSubactionCreatealert, _ := json.Marshal(dst.RunConnectorSubactionCreatealert)
		if string(jsonRunConnectorSubactionCreatealert) == "{}" { // empty struct
			dst.RunConnectorSubactionCreatealert = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionCreatealert = nil
	}

	// try to unmarshal data into RunConnectorSubactionFieldsbyissuetype
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionFieldsbyissuetype)
	if err == nil {
		jsonRunConnectorSubactionFieldsbyissuetype, _ := json.Marshal(dst.RunConnectorSubactionFieldsbyissuetype)
		if string(jsonRunConnectorSubactionFieldsbyissuetype) == "{}" { // empty struct
			dst.RunConnectorSubactionFieldsbyissuetype = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionFieldsbyissuetype = nil
	}

	// try to unmarshal data into RunConnectorSubactionGetchoices
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionGetchoices)
	if err == nil {
		jsonRunConnectorSubactionGetchoices, _ := json.Marshal(dst.RunConnectorSubactionGetchoices)
		if string(jsonRunConnectorSubactionGetchoices) == "{}" { // empty struct
			dst.RunConnectorSubactionGetchoices = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionGetchoices = nil
	}

	// try to unmarshal data into RunConnectorSubactionGetfields
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionGetfields)
	if err == nil {
		jsonRunConnectorSubactionGetfields, _ := json.Marshal(dst.RunConnectorSubactionGetfields)
		if string(jsonRunConnectorSubactionGetfields) == "{}" { // empty struct
			dst.RunConnectorSubactionGetfields = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionGetfields = nil
	}

	// try to unmarshal data into RunConnectorSubactionGetincident
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionGetincident)
	if err == nil {
		jsonRunConnectorSubactionGetincident, _ := json.Marshal(dst.RunConnectorSubactionGetincident)
		if string(jsonRunConnectorSubactionGetincident) == "{}" { // empty struct
			dst.RunConnectorSubactionGetincident = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionGetincident = nil
	}

	// try to unmarshal data into RunConnectorSubactionIssue
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionIssue)
	if err == nil {
		jsonRunConnectorSubactionIssue, _ := json.Marshal(dst.RunConnectorSubactionIssue)
		if string(jsonRunConnectorSubactionIssue) == "{}" { // empty struct
			dst.RunConnectorSubactionIssue = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionIssue = nil
	}

	// try to unmarshal data into RunConnectorSubactionIssues
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionIssues)
	if err == nil {
		jsonRunConnectorSubactionIssues, _ := json.Marshal(dst.RunConnectorSubactionIssues)
		if string(jsonRunConnectorSubactionIssues) == "{}" { // empty struct
			dst.RunConnectorSubactionIssues = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionIssues = nil
	}

	// try to unmarshal data into RunConnectorSubactionIssuetypes
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionIssuetypes)
	if err == nil {
		jsonRunConnectorSubactionIssuetypes, _ := json.Marshal(dst.RunConnectorSubactionIssuetypes)
		if string(jsonRunConnectorSubactionIssuetypes) == "{}" { // empty struct
			dst.RunConnectorSubactionIssuetypes = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionIssuetypes = nil
	}

	// try to unmarshal data into RunConnectorSubactionPushtoservice
	err = newStrictDecoder(data).Decode(&dst.RunConnectorSubactionPushtoservice)
	if err == nil {
		jsonRunConnectorSubactionPushtoservice, _ := json.Marshal(dst.RunConnectorSubactionPushtoservice)
		if string(jsonRunConnectorSubactionPushtoservice) == "{}" { // empty struct
			dst.RunConnectorSubactionPushtoservice = nil
		} else {
			match++
		}
	} else {
		dst.RunConnectorSubactionPushtoservice = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RunConnectorSubactionAddevent = nil
		dst.RunConnectorSubactionClosealert = nil
		dst.RunConnectorSubactionCreatealert = nil
		dst.RunConnectorSubactionFieldsbyissuetype = nil
		dst.RunConnectorSubactionGetchoices = nil
		dst.RunConnectorSubactionGetfields = nil
		dst.RunConnectorSubactionGetincident = nil
		dst.RunConnectorSubactionIssue = nil
		dst.RunConnectorSubactionIssues = nil
		dst.RunConnectorSubactionIssuetypes = nil
		dst.RunConnectorSubactionPushtoservice = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SubactionParameters)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SubactionParameters)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubactionParameters) MarshalJSON() ([]byte, error) {
	if src.RunConnectorSubactionAddevent != nil {
		return json.Marshal(&src.RunConnectorSubactionAddevent)
	}

	if src.RunConnectorSubactionClosealert != nil {
		return json.Marshal(&src.RunConnectorSubactionClosealert)
	}

	if src.RunConnectorSubactionCreatealert != nil {
		return json.Marshal(&src.RunConnectorSubactionCreatealert)
	}

	if src.RunConnectorSubactionFieldsbyissuetype != nil {
		return json.Marshal(&src.RunConnectorSubactionFieldsbyissuetype)
	}

	if src.RunConnectorSubactionGetchoices != nil {
		return json.Marshal(&src.RunConnectorSubactionGetchoices)
	}

	if src.RunConnectorSubactionGetfields != nil {
		return json.Marshal(&src.RunConnectorSubactionGetfields)
	}

	if src.RunConnectorSubactionGetincident != nil {
		return json.Marshal(&src.RunConnectorSubactionGetincident)
	}

	if src.RunConnectorSubactionIssue != nil {
		return json.Marshal(&src.RunConnectorSubactionIssue)
	}

	if src.RunConnectorSubactionIssues != nil {
		return json.Marshal(&src.RunConnectorSubactionIssues)
	}

	if src.RunConnectorSubactionIssuetypes != nil {
		return json.Marshal(&src.RunConnectorSubactionIssuetypes)
	}

	if src.RunConnectorSubactionPushtoservice != nil {
		return json.Marshal(&src.RunConnectorSubactionPushtoservice)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubactionParameters) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RunConnectorSubactionAddevent != nil {
		return obj.RunConnectorSubactionAddevent
	}

	if obj.RunConnectorSubactionClosealert != nil {
		return obj.RunConnectorSubactionClosealert
	}

	if obj.RunConnectorSubactionCreatealert != nil {
		return obj.RunConnectorSubactionCreatealert
	}

	if obj.RunConnectorSubactionFieldsbyissuetype != nil {
		return obj.RunConnectorSubactionFieldsbyissuetype
	}

	if obj.RunConnectorSubactionGetchoices != nil {
		return obj.RunConnectorSubactionGetchoices
	}

	if obj.RunConnectorSubactionGetfields != nil {
		return obj.RunConnectorSubactionGetfields
	}

	if obj.RunConnectorSubactionGetincident != nil {
		return obj.RunConnectorSubactionGetincident
	}

	if obj.RunConnectorSubactionIssue != nil {
		return obj.RunConnectorSubactionIssue
	}

	if obj.RunConnectorSubactionIssues != nil {
		return obj.RunConnectorSubactionIssues
	}

	if obj.RunConnectorSubactionIssuetypes != nil {
		return obj.RunConnectorSubactionIssuetypes
	}

	if obj.RunConnectorSubactionPushtoservice != nil {
		return obj.RunConnectorSubactionPushtoservice
	}

	// all schemas are nil
	return nil
}

type NullableSubactionParameters struct {
	value *SubactionParameters
	isSet bool
}

func (v NullableSubactionParameters) Get() *SubactionParameters {
	return v.value
}

func (v *NullableSubactionParameters) Set(val *SubactionParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSubactionParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSubactionParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubactionParameters(val *SubactionParameters) *NullableSubactionParameters {
	return &NullableSubactionParameters{value: val, isSet: true}
}

func (v NullableSubactionParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubactionParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
