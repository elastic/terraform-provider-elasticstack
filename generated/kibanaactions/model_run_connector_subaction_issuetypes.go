/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the RunConnectorSubactionIssuetypes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunConnectorSubactionIssuetypes{}

// RunConnectorSubactionIssuetypes The `issueTypes` subaction for Jira connectors.
type RunConnectorSubactionIssuetypes struct {
	// The action to test.
	SubAction string `json:"subAction"`
}

// NewRunConnectorSubactionIssuetypes instantiates a new RunConnectorSubactionIssuetypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunConnectorSubactionIssuetypes(subAction string) *RunConnectorSubactionIssuetypes {
	this := RunConnectorSubactionIssuetypes{}
	this.SubAction = subAction
	return &this
}

// NewRunConnectorSubactionIssuetypesWithDefaults instantiates a new RunConnectorSubactionIssuetypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunConnectorSubactionIssuetypesWithDefaults() *RunConnectorSubactionIssuetypes {
	this := RunConnectorSubactionIssuetypes{}
	return &this
}

// GetSubAction returns the SubAction field value
func (o *RunConnectorSubactionIssuetypes) GetSubAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubAction
}

// GetSubActionOk returns a tuple with the SubAction field value
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionIssuetypes) GetSubActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubAction, true
}

// SetSubAction sets field value
func (o *RunConnectorSubactionIssuetypes) SetSubAction(v string) {
	o.SubAction = v
}

func (o RunConnectorSubactionIssuetypes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunConnectorSubactionIssuetypes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subAction"] = o.SubAction
	return toSerialize, nil
}

type NullableRunConnectorSubactionIssuetypes struct {
	value *RunConnectorSubactionIssuetypes
	isSet bool
}

func (v NullableRunConnectorSubactionIssuetypes) Get() *RunConnectorSubactionIssuetypes {
	return v.value
}

func (v *NullableRunConnectorSubactionIssuetypes) Set(val *RunConnectorSubactionIssuetypes) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnectorSubactionIssuetypes) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnectorSubactionIssuetypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnectorSubactionIssuetypes(val *RunConnectorSubactionIssuetypes) *NullableRunConnectorSubactionIssuetypes {
	return &NullableRunConnectorSubactionIssuetypes{value: val, isSet: true}
}

func (v NullableRunConnectorSubactionIssuetypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnectorSubactionIssuetypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
