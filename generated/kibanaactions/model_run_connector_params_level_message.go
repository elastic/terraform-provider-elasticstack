/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the RunConnectorParamsLevelMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunConnectorParamsLevelMessage{}

// RunConnectorParamsLevelMessage Test an action that writes an entry to the Kibana server log.
type RunConnectorParamsLevelMessage struct {
	// The log level of the message for server log connectors.
	Level *string `json:"level,omitempty"`
	// The message for server log connectors.
	Message string `json:"message"`
}

// NewRunConnectorParamsLevelMessage instantiates a new RunConnectorParamsLevelMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunConnectorParamsLevelMessage(message string) *RunConnectorParamsLevelMessage {
	this := RunConnectorParamsLevelMessage{}
	var level string = "info"
	this.Level = &level
	this.Message = message
	return &this
}

// NewRunConnectorParamsLevelMessageWithDefaults instantiates a new RunConnectorParamsLevelMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunConnectorParamsLevelMessageWithDefaults() *RunConnectorParamsLevelMessage {
	this := RunConnectorParamsLevelMessage{}
	var level string = "info"
	this.Level = &level
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *RunConnectorParamsLevelMessage) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorParamsLevelMessage) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *RunConnectorParamsLevelMessage) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *RunConnectorParamsLevelMessage) SetLevel(v string) {
	o.Level = &v
}

// GetMessage returns the Message field value
func (o *RunConnectorParamsLevelMessage) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RunConnectorParamsLevelMessage) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RunConnectorParamsLevelMessage) SetMessage(v string) {
	o.Message = v
}

func (o RunConnectorParamsLevelMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunConnectorParamsLevelMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

type NullableRunConnectorParamsLevelMessage struct {
	value *RunConnectorParamsLevelMessage
	isSet bool
}

func (v NullableRunConnectorParamsLevelMessage) Get() *RunConnectorParamsLevelMessage {
	return v.value
}

func (v *NullableRunConnectorParamsLevelMessage) Set(val *RunConnectorParamsLevelMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnectorParamsLevelMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnectorParamsLevelMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnectorParamsLevelMessage(val *RunConnectorParamsLevelMessage) *NullableRunConnectorParamsLevelMessage {
	return &NullableRunConnectorParamsLevelMessage{value: val, isSet: true}
}

func (v NullableRunConnectorParamsLevelMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnectorParamsLevelMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
