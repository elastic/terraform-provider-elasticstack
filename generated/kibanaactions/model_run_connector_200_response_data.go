/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
	"fmt"
)

// RunConnector200ResponseData - struct for RunConnector200ResponseData
type RunConnector200ResponseData struct {
	ArrayOfMapmapOfStringinterface *[]map[string]interface{}
	MapmapOfStringinterface *map[string]interface{}
}

// []map[string]interface{}AsRunConnector200ResponseData is a convenience function that returns []map[string]interface{} wrapped in RunConnector200ResponseData
func ArrayOfMapmapOfStringinterfaceAsRunConnector200ResponseData(v *[]map[string]interface{}) RunConnector200ResponseData {
	return RunConnector200ResponseData{
		ArrayOfMapmapOfStringinterface: v,
	}
}

// map[string]interface{}AsRunConnector200ResponseData is a convenience function that returns map[string]interface{} wrapped in RunConnector200ResponseData
func MapmapOfStringinterfaceAsRunConnector200ResponseData(v *map[string]interface{}) RunConnector200ResponseData {
	return RunConnector200ResponseData{
		MapmapOfStringinterface: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RunConnector200ResponseData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfMapmapOfStringinterface{}
	err = json.Unmarshal(data, &dst.ArrayOfMapmapOfStringinterface)
	if err == nil {
		jsonmapstringinterface, _ := json.Marshal(dst.ArrayOfMapmapOfStringinterface)
		if string(jsonmapstringinterface) == "{}" { // empty struct
			dst.ArrayOfMapmapOfStringinterface = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMapmapOfStringinterface = nil
	}

	// try to unmarshal data into MapmapOfStringinterface{}
	err = json.Unmarshal(data, &dst.MapmapOfStringinterface)
	if err == nil {
		jsonmapstringinterface, _ := json.Marshal(dst.MapmapOfStringinterface)
		if string(jsonmapstringinterface) == "{}" { // empty struct
			dst.MapmapOfStringinterface = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringinterface = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfMapmapOfStringinterface = nil
		dst.MapmapOfStringinterface = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RunConnector200ResponseData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RunConnector200ResponseData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RunConnector200ResponseData) MarshalJSON() ([]byte, error) {
	if src.ArrayOfMapmapOfStringinterface != nil {
		return json.Marshal(&src.ArrayOfMapmapOfStringinterface)
	}

	if src.MapmapOfStringinterface != nil {
		return json.Marshal(&src.MapmapOfStringinterface)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RunConnector200ResponseData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfMapmapOfStringinterface != nil {
		return obj.ArrayOfMapmapOfStringinterface
	}

	if obj.MapmapOfStringinterface != nil {
		return obj.MapmapOfStringinterface
	}

	// all schemas are nil
	return nil
}

type NullableRunConnector200ResponseData struct {
	value *RunConnector200ResponseData
	isSet bool
}

func (v NullableRunConnector200ResponseData) Get() *RunConnector200ResponseData {
	return v.value
}

func (v *NullableRunConnector200ResponseData) Set(val *RunConnector200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnector200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnector200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnector200ResponseData(val *RunConnector200ResponseData) *NullableRunConnector200ResponseData {
	return &NullableRunConnector200ResponseData{value: val, isSet: true}
}

func (v NullableRunConnector200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnector200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


