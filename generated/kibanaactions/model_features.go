/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
	"fmt"
)

// Features The feature that uses the connector. Valid values are `alerting`, `cases`, `uptime`, and `siem`.
type Features string

// List of features
const (
	ALERTING Features = "alerting"
	CASES    Features = "cases"
	UPTIME   Features = "uptime"
	SIEM     Features = "siem"
)

// All allowed values of Features enum
var AllowedFeaturesEnumValues = []Features{
	"alerting",
	"cases",
	"uptime",
	"siem",
}

func (v *Features) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Features(value)
	for _, existing := range AllowedFeaturesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Features", value)
}

// NewFeaturesFromValue returns a pointer to a valid Features
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeaturesFromValue(v string) (*Features, error) {
	ev := Features(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Features: valid values are %v", v, AllowedFeaturesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Features) IsValid() bool {
	for _, existing := range AllowedFeaturesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to features value
func (v Features) Ptr() *Features {
	return &v
}

type NullableFeatures struct {
	value *Features
	isSet bool
}

func (v NullableFeatures) Get() *Features {
	return v.value
}

func (v *NullableFeatures) Set(val *Features) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatures) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatures(val *Features) *NullableFeatures {
	return &NullableFeatures{value: val, isSet: true}
}

func (v NullableFeatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
