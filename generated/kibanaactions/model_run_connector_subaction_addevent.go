/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the RunConnectorSubactionAddevent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunConnectorSubactionAddevent{}

// RunConnectorSubactionAddevent The `addEvent` subaction for ServiceNow ITOM connectors.
type RunConnectorSubactionAddevent struct {
	// The action to test.
	SubAction       string                                        `json:"subAction"`
	SubActionParams *RunConnectorSubactionAddeventSubActionParams `json:"subActionParams,omitempty"`
}

// NewRunConnectorSubactionAddevent instantiates a new RunConnectorSubactionAddevent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunConnectorSubactionAddevent(subAction string) *RunConnectorSubactionAddevent {
	this := RunConnectorSubactionAddevent{}
	this.SubAction = subAction
	return &this
}

// NewRunConnectorSubactionAddeventWithDefaults instantiates a new RunConnectorSubactionAddevent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunConnectorSubactionAddeventWithDefaults() *RunConnectorSubactionAddevent {
	this := RunConnectorSubactionAddevent{}
	return &this
}

// GetSubAction returns the SubAction field value
func (o *RunConnectorSubactionAddevent) GetSubAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubAction
}

// GetSubActionOk returns a tuple with the SubAction field value
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionAddevent) GetSubActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubAction, true
}

// SetSubAction sets field value
func (o *RunConnectorSubactionAddevent) SetSubAction(v string) {
	o.SubAction = v
}

// GetSubActionParams returns the SubActionParams field value if set, zero value otherwise.
func (o *RunConnectorSubactionAddevent) GetSubActionParams() RunConnectorSubactionAddeventSubActionParams {
	if o == nil || IsNil(o.SubActionParams) {
		var ret RunConnectorSubactionAddeventSubActionParams
		return ret
	}
	return *o.SubActionParams
}

// GetSubActionParamsOk returns a tuple with the SubActionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionAddevent) GetSubActionParamsOk() (*RunConnectorSubactionAddeventSubActionParams, bool) {
	if o == nil || IsNil(o.SubActionParams) {
		return nil, false
	}
	return o.SubActionParams, true
}

// HasSubActionParams returns a boolean if a field has been set.
func (o *RunConnectorSubactionAddevent) HasSubActionParams() bool {
	if o != nil && !IsNil(o.SubActionParams) {
		return true
	}

	return false
}

// SetSubActionParams gets a reference to the given RunConnectorSubactionAddeventSubActionParams and assigns it to the SubActionParams field.
func (o *RunConnectorSubactionAddevent) SetSubActionParams(v RunConnectorSubactionAddeventSubActionParams) {
	o.SubActionParams = &v
}

func (o RunConnectorSubactionAddevent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunConnectorSubactionAddevent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subAction"] = o.SubAction
	if !IsNil(o.SubActionParams) {
		toSerialize["subActionParams"] = o.SubActionParams
	}
	return toSerialize, nil
}

type NullableRunConnectorSubactionAddevent struct {
	value *RunConnectorSubactionAddevent
	isSet bool
}

func (v NullableRunConnectorSubactionAddevent) Get() *RunConnectorSubactionAddevent {
	return v.value
}

func (v *NullableRunConnectorSubactionAddevent) Set(val *RunConnectorSubactionAddevent) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnectorSubactionAddevent) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnectorSubactionAddevent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnectorSubactionAddevent(val *RunConnectorSubactionAddevent) *NullableRunConnectorSubactionAddevent {
	return &NullableRunConnectorSubactionAddevent{value: val, isSet: true}
}

func (v NullableRunConnectorSubactionAddevent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnectorSubactionAddevent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
