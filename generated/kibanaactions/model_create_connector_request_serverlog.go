/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the CreateConnectorRequestServerlog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateConnectorRequestServerlog{}

// CreateConnectorRequestServerlog This connector writes an entry to the Kibana server log.
type CreateConnectorRequestServerlog struct {
	// The type of connector.
	ConnectorTypeId string `json:"connector_type_id"`
	// The display name for the connector.
	Name string `json:"name"`
}

// NewCreateConnectorRequestServerlog instantiates a new CreateConnectorRequestServerlog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateConnectorRequestServerlog(connectorTypeId string, name string) *CreateConnectorRequestServerlog {
	this := CreateConnectorRequestServerlog{}
	this.ConnectorTypeId = connectorTypeId
	this.Name = name
	return &this
}

// NewCreateConnectorRequestServerlogWithDefaults instantiates a new CreateConnectorRequestServerlog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateConnectorRequestServerlogWithDefaults() *CreateConnectorRequestServerlog {
	this := CreateConnectorRequestServerlog{}
	return &this
}

// GetConnectorTypeId returns the ConnectorTypeId field value
func (o *CreateConnectorRequestServerlog) GetConnectorTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectorTypeId
}

// GetConnectorTypeIdOk returns a tuple with the ConnectorTypeId field value
// and a boolean to check if the value has been set.
func (o *CreateConnectorRequestServerlog) GetConnectorTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorTypeId, true
}

// SetConnectorTypeId sets field value
func (o *CreateConnectorRequestServerlog) SetConnectorTypeId(v string) {
	o.ConnectorTypeId = v
}

// GetName returns the Name field value
func (o *CreateConnectorRequestServerlog) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateConnectorRequestServerlog) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateConnectorRequestServerlog) SetName(v string) {
	o.Name = v
}

func (o CreateConnectorRequestServerlog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateConnectorRequestServerlog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connector_type_id"] = o.ConnectorTypeId
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableCreateConnectorRequestServerlog struct {
	value *CreateConnectorRequestServerlog
	isSet bool
}

func (v NullableCreateConnectorRequestServerlog) Get() *CreateConnectorRequestServerlog {
	return v.value
}

func (v *NullableCreateConnectorRequestServerlog) Set(val *CreateConnectorRequestServerlog) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateConnectorRequestServerlog) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateConnectorRequestServerlog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateConnectorRequestServerlog(val *CreateConnectorRequestServerlog) *NullableCreateConnectorRequestServerlog {
	return &NullableCreateConnectorRequestServerlog{value: val, isSet: true}
}

func (v NullableCreateConnectorRequestServerlog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateConnectorRequestServerlog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
