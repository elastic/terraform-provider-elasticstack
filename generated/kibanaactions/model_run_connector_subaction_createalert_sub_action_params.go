/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the RunConnectorSubactionCreatealertSubActionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunConnectorSubactionCreatealertSubActionParams{}

// RunConnectorSubactionCreatealertSubActionParams struct for RunConnectorSubactionCreatealertSubActionParams
type RunConnectorSubactionCreatealertSubActionParams struct {
	// The custom actions available to the alert.
	Actions []string `json:"actions,omitempty"`
	// The unique identifier used for alert deduplication in Opsgenie.
	Alias *string `json:"alias,omitempty"`
	// A description that provides detailed information about the alert.
	Description *string `json:"description,omitempty"`
	// The custom properties of the alert.
	Details map[string]interface{} `json:"details,omitempty"`
	// The domain of the alert. For example, the application or server name.
	Entity *string `json:"entity,omitempty"`
	// The alert message.
	Message string `json:"message"`
	// Additional information for the alert.
	Note *string `json:"note,omitempty"`
	// The priority level for the alert.
	Priority *string `json:"priority,omitempty"`
	// The entities to receive notifications about the alert. If `type` is `user`, either `id` or `username` is required. If `type` is `team`, either `id` or `name` is required.
	Responders []RunConnectorSubactionCreatealertSubActionParamsRespondersInner `json:"responders,omitempty"`
	// The display name for the source of the alert.
	Source *string `json:"source,omitempty"`
	// The tags for the alert.
	Tags []string `json:"tags,omitempty"`
	// The display name for the owner.
	User *string `json:"user,omitempty"`
	// The teams and users that the alert will be visible to without sending a notification. Only one of `id`, `name`, or `username` is required.
	VisibleTo []RunConnectorSubactionCreatealertSubActionParamsVisibleToInner `json:"visibleTo,omitempty"`
}

// NewRunConnectorSubactionCreatealertSubActionParams instantiates a new RunConnectorSubactionCreatealertSubActionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunConnectorSubactionCreatealertSubActionParams(message string) *RunConnectorSubactionCreatealertSubActionParams {
	this := RunConnectorSubactionCreatealertSubActionParams{}
	this.Message = message
	return &this
}

// NewRunConnectorSubactionCreatealertSubActionParamsWithDefaults instantiates a new RunConnectorSubactionCreatealertSubActionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunConnectorSubactionCreatealertSubActionParamsWithDefaults() *RunConnectorSubactionCreatealertSubActionParams {
	this := RunConnectorSubactionCreatealertSubActionParams{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetActions() []string {
	if o == nil || IsNil(o.Actions) {
		var ret []string
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetActions(v []string) {
	o.Actions = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetAlias(v string) {
	o.Alias = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetDescription(v string) {
	o.Description = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetDetails(v map[string]interface{}) {
	o.Details = v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetEntity() string {
	if o == nil || IsNil(o.Entity) {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetEntity(v string) {
	o.Entity = &v
}

// GetMessage returns the Message field value
func (o *RunConnectorSubactionCreatealertSubActionParams) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RunConnectorSubactionCreatealertSubActionParams) SetMessage(v string) {
	o.Message = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetNote(v string) {
	o.Note = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetPriority(v string) {
	o.Priority = &v
}

// GetResponders returns the Responders field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetResponders() []RunConnectorSubactionCreatealertSubActionParamsRespondersInner {
	if o == nil || IsNil(o.Responders) {
		var ret []RunConnectorSubactionCreatealertSubActionParamsRespondersInner
		return ret
	}
	return o.Responders
}

// GetRespondersOk returns a tuple with the Responders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetRespondersOk() ([]RunConnectorSubactionCreatealertSubActionParamsRespondersInner, bool) {
	if o == nil || IsNil(o.Responders) {
		return nil, false
	}
	return o.Responders, true
}

// HasResponders returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasResponders() bool {
	if o != nil && !IsNil(o.Responders) {
		return true
	}

	return false
}

// SetResponders gets a reference to the given []RunConnectorSubactionCreatealertSubActionParamsRespondersInner and assigns it to the Responders field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetResponders(v []RunConnectorSubactionCreatealertSubActionParamsRespondersInner) {
	o.Responders = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetSource(v string) {
	o.Source = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetTags(v []string) {
	o.Tags = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetUser(v string) {
	o.User = &v
}

// GetVisibleTo returns the VisibleTo field value if set, zero value otherwise.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetVisibleTo() []RunConnectorSubactionCreatealertSubActionParamsVisibleToInner {
	if o == nil || IsNil(o.VisibleTo) {
		var ret []RunConnectorSubactionCreatealertSubActionParamsVisibleToInner
		return ret
	}
	return o.VisibleTo
}

// GetVisibleToOk returns a tuple with the VisibleTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) GetVisibleToOk() ([]RunConnectorSubactionCreatealertSubActionParamsVisibleToInner, bool) {
	if o == nil || IsNil(o.VisibleTo) {
		return nil, false
	}
	return o.VisibleTo, true
}

// HasVisibleTo returns a boolean if a field has been set.
func (o *RunConnectorSubactionCreatealertSubActionParams) HasVisibleTo() bool {
	if o != nil && !IsNil(o.VisibleTo) {
		return true
	}

	return false
}

// SetVisibleTo gets a reference to the given []RunConnectorSubactionCreatealertSubActionParamsVisibleToInner and assigns it to the VisibleTo field.
func (o *RunConnectorSubactionCreatealertSubActionParams) SetVisibleTo(v []RunConnectorSubactionCreatealertSubActionParamsVisibleToInner) {
	o.VisibleTo = v
}

func (o RunConnectorSubactionCreatealertSubActionParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunConnectorSubactionCreatealertSubActionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	toSerialize["message"] = o.Message
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Responders) {
		toSerialize["responders"] = o.Responders
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.VisibleTo) {
		toSerialize["visibleTo"] = o.VisibleTo
	}
	return toSerialize, nil
}

type NullableRunConnectorSubactionCreatealertSubActionParams struct {
	value *RunConnectorSubactionCreatealertSubActionParams
	isSet bool
}

func (v NullableRunConnectorSubactionCreatealertSubActionParams) Get() *RunConnectorSubactionCreatealertSubActionParams {
	return v.value
}

func (v *NullableRunConnectorSubactionCreatealertSubActionParams) Set(val *RunConnectorSubactionCreatealertSubActionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnectorSubactionCreatealertSubActionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnectorSubactionCreatealertSubActionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnectorSubactionCreatealertSubActionParams(val *RunConnectorSubactionCreatealertSubActionParams) *NullableRunConnectorSubactionCreatealertSubActionParams {
	return &NullableRunConnectorSubactionCreatealertSubActionParams{value: val, isSet: true}
}

func (v NullableRunConnectorSubactionCreatealertSubActionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnectorSubactionCreatealertSubActionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
