/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the CaseIdentifierMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseIdentifierMapping{}

// CaseIdentifierMapping Mapping for the case ID.
type CaseIdentifierMapping struct {
	// The type of field in Swimlane.
	FieldType string `json:"fieldType"`
	// The identifier for the field in Swimlane.
	Id string `json:"id"`
	// The key for the field in Swimlane.
	Key string `json:"key"`
	// The name of the field in Swimlane.
	Name string `json:"name"`
}

// NewCaseIdentifierMapping instantiates a new CaseIdentifierMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseIdentifierMapping(fieldType string, id string, key string, name string) *CaseIdentifierMapping {
	this := CaseIdentifierMapping{}
	this.FieldType = fieldType
	this.Id = id
	this.Key = key
	this.Name = name
	return &this
}

// NewCaseIdentifierMappingWithDefaults instantiates a new CaseIdentifierMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseIdentifierMappingWithDefaults() *CaseIdentifierMapping {
	this := CaseIdentifierMapping{}
	return &this
}

// GetFieldType returns the FieldType field value
func (o *CaseIdentifierMapping) GetFieldType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value
// and a boolean to check if the value has been set.
func (o *CaseIdentifierMapping) GetFieldTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldType, true
}

// SetFieldType sets field value
func (o *CaseIdentifierMapping) SetFieldType(v string) {
	o.FieldType = v
}

// GetId returns the Id field value
func (o *CaseIdentifierMapping) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CaseIdentifierMapping) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CaseIdentifierMapping) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *CaseIdentifierMapping) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CaseIdentifierMapping) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CaseIdentifierMapping) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *CaseIdentifierMapping) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CaseIdentifierMapping) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CaseIdentifierMapping) SetName(v string) {
	o.Name = v
}

func (o CaseIdentifierMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseIdentifierMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldType"] = o.FieldType
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableCaseIdentifierMapping struct {
	value *CaseIdentifierMapping
	isSet bool
}

func (v NullableCaseIdentifierMapping) Get() *CaseIdentifierMapping {
	return v.value
}

func (v *NullableCaseIdentifierMapping) Set(val *CaseIdentifierMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseIdentifierMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseIdentifierMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseIdentifierMapping(val *CaseIdentifierMapping) *NullableCaseIdentifierMapping {
	return &NullableCaseIdentifierMapping{value: val, isSet: true}
}

func (v NullableCaseIdentifierMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseIdentifierMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
