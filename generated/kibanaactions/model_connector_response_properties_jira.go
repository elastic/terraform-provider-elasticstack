/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the ConnectorResponsePropertiesJira type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorResponsePropertiesJira{}

// ConnectorResponsePropertiesJira struct for ConnectorResponsePropertiesJira
type ConnectorResponsePropertiesJira struct {
	Config ConfigPropertiesJira `json:"config"`
	// The type of connector.
	ConnectorTypeId string `json:"connector_type_id"`
	// The identifier for the connector.
	Id string `json:"id"`
	// Indicates whether the connector type is deprecated.
	IsDeprecated bool `json:"is_deprecated"`
	// Indicates whether secrets are missing for the connector. Secrets configuration properties vary depending on the connector type.
	IsMissingSecrets *bool `json:"is_missing_secrets,omitempty"`
	// Indicates whether it is a preconfigured connector. If true, the `config` and `is_missing_secrets` properties are omitted from the response.
	IsPreconfigured bool `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// NewConnectorResponsePropertiesJira instantiates a new ConnectorResponsePropertiesJira object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorResponsePropertiesJira(config ConfigPropertiesJira, connectorTypeId string, id string, isDeprecated bool, isPreconfigured bool, name string) *ConnectorResponsePropertiesJira {
	this := ConnectorResponsePropertiesJira{}
	this.Config = config
	this.ConnectorTypeId = connectorTypeId
	this.Id = id
	this.IsDeprecated = isDeprecated
	this.IsPreconfigured = isPreconfigured
	this.Name = name
	return &this
}

// NewConnectorResponsePropertiesJiraWithDefaults instantiates a new ConnectorResponsePropertiesJira object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorResponsePropertiesJiraWithDefaults() *ConnectorResponsePropertiesJira {
	this := ConnectorResponsePropertiesJira{}
	return &this
}

// GetConfig returns the Config field value
func (o *ConnectorResponsePropertiesJira) GetConfig() ConfigPropertiesJira {
	if o == nil {
		var ret ConfigPropertiesJira
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ConnectorResponsePropertiesJira) GetConfigOk() (*ConfigPropertiesJira, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *ConnectorResponsePropertiesJira) SetConfig(v ConfigPropertiesJira) {
	o.Config = v
}

// GetConnectorTypeId returns the ConnectorTypeId field value
func (o *ConnectorResponsePropertiesJira) GetConnectorTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectorTypeId
}

// GetConnectorTypeIdOk returns a tuple with the ConnectorTypeId field value
// and a boolean to check if the value has been set.
func (o *ConnectorResponsePropertiesJira) GetConnectorTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorTypeId, true
}

// SetConnectorTypeId sets field value
func (o *ConnectorResponsePropertiesJira) SetConnectorTypeId(v string) {
	o.ConnectorTypeId = v
}

// GetId returns the Id field value
func (o *ConnectorResponsePropertiesJira) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConnectorResponsePropertiesJira) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConnectorResponsePropertiesJira) SetId(v string) {
	o.Id = v
}

// GetIsDeprecated returns the IsDeprecated field value
func (o *ConnectorResponsePropertiesJira) GetIsDeprecated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeprecated
}

// GetIsDeprecatedOk returns a tuple with the IsDeprecated field value
// and a boolean to check if the value has been set.
func (o *ConnectorResponsePropertiesJira) GetIsDeprecatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeprecated, true
}

// SetIsDeprecated sets field value
func (o *ConnectorResponsePropertiesJira) SetIsDeprecated(v bool) {
	o.IsDeprecated = v
}

// GetIsMissingSecrets returns the IsMissingSecrets field value if set, zero value otherwise.
func (o *ConnectorResponsePropertiesJira) GetIsMissingSecrets() bool {
	if o == nil || IsNil(o.IsMissingSecrets) {
		var ret bool
		return ret
	}
	return *o.IsMissingSecrets
}

// GetIsMissingSecretsOk returns a tuple with the IsMissingSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorResponsePropertiesJira) GetIsMissingSecretsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMissingSecrets) {
		return nil, false
	}
	return o.IsMissingSecrets, true
}

// HasIsMissingSecrets returns a boolean if a field has been set.
func (o *ConnectorResponsePropertiesJira) HasIsMissingSecrets() bool {
	if o != nil && !IsNil(o.IsMissingSecrets) {
		return true
	}

	return false
}

// SetIsMissingSecrets gets a reference to the given bool and assigns it to the IsMissingSecrets field.
func (o *ConnectorResponsePropertiesJira) SetIsMissingSecrets(v bool) {
	o.IsMissingSecrets = &v
}

// GetIsPreconfigured returns the IsPreconfigured field value
func (o *ConnectorResponsePropertiesJira) GetIsPreconfigured() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPreconfigured
}

// GetIsPreconfiguredOk returns a tuple with the IsPreconfigured field value
// and a boolean to check if the value has been set.
func (o *ConnectorResponsePropertiesJira) GetIsPreconfiguredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPreconfigured, true
}

// SetIsPreconfigured sets field value
func (o *ConnectorResponsePropertiesJira) SetIsPreconfigured(v bool) {
	o.IsPreconfigured = v
}

// GetName returns the Name field value
func (o *ConnectorResponsePropertiesJira) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectorResponsePropertiesJira) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectorResponsePropertiesJira) SetName(v string) {
	o.Name = v
}

func (o ConnectorResponsePropertiesJira) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorResponsePropertiesJira) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["connector_type_id"] = o.ConnectorTypeId
	toSerialize["id"] = o.Id
	toSerialize["is_deprecated"] = o.IsDeprecated
	if !IsNil(o.IsMissingSecrets) {
		toSerialize["is_missing_secrets"] = o.IsMissingSecrets
	}
	toSerialize["is_preconfigured"] = o.IsPreconfigured
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableConnectorResponsePropertiesJira struct {
	value *ConnectorResponsePropertiesJira
	isSet bool
}

func (v NullableConnectorResponsePropertiesJira) Get() *ConnectorResponsePropertiesJira {
	return v.value
}

func (v *NullableConnectorResponsePropertiesJira) Set(val *ConnectorResponsePropertiesJira) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorResponsePropertiesJira) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorResponsePropertiesJira) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorResponsePropertiesJira(val *ConnectorResponsePropertiesJira) *NullableConnectorResponsePropertiesJira {
	return &NullableConnectorResponsePropertiesJira{value: val, isSet: true}
}

func (v NullableConnectorResponsePropertiesJira) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorResponsePropertiesJira) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
