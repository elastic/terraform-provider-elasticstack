/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the RunConnectorSubactionClosealertSubActionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunConnectorSubactionClosealertSubActionParams{}

// RunConnectorSubactionClosealertSubActionParams struct for RunConnectorSubactionClosealertSubActionParams
type RunConnectorSubactionClosealertSubActionParams struct {
	// The unique identifier used for alert deduplication in Opsgenie. The alias must match the value used when creating the alert.
	Alias string `json:"alias"`
	// Additional information for the alert.
	Note *string `json:"note,omitempty"`
	// The display name for the source of the alert.
	Source *string `json:"source,omitempty"`
	// The display name for the owner.
	User *string `json:"user,omitempty"`
}

// NewRunConnectorSubactionClosealertSubActionParams instantiates a new RunConnectorSubactionClosealertSubActionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunConnectorSubactionClosealertSubActionParams(alias string) *RunConnectorSubactionClosealertSubActionParams {
	this := RunConnectorSubactionClosealertSubActionParams{}
	this.Alias = alias
	return &this
}

// NewRunConnectorSubactionClosealertSubActionParamsWithDefaults instantiates a new RunConnectorSubactionClosealertSubActionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunConnectorSubactionClosealertSubActionParamsWithDefaults() *RunConnectorSubactionClosealertSubActionParams {
	this := RunConnectorSubactionClosealertSubActionParams{}
	return &this
}

// GetAlias returns the Alias field value
func (o *RunConnectorSubactionClosealertSubActionParams) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionClosealertSubActionParams) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *RunConnectorSubactionClosealertSubActionParams) SetAlias(v string) {
	o.Alias = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *RunConnectorSubactionClosealertSubActionParams) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionClosealertSubActionParams) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *RunConnectorSubactionClosealertSubActionParams) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *RunConnectorSubactionClosealertSubActionParams) SetNote(v string) {
	o.Note = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *RunConnectorSubactionClosealertSubActionParams) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionClosealertSubActionParams) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *RunConnectorSubactionClosealertSubActionParams) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *RunConnectorSubactionClosealertSubActionParams) SetSource(v string) {
	o.Source = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RunConnectorSubactionClosealertSubActionParams) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionClosealertSubActionParams) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RunConnectorSubactionClosealertSubActionParams) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RunConnectorSubactionClosealertSubActionParams) SetUser(v string) {
	o.User = &v
}

func (o RunConnectorSubactionClosealertSubActionParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunConnectorSubactionClosealertSubActionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alias"] = o.Alias
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableRunConnectorSubactionClosealertSubActionParams struct {
	value *RunConnectorSubactionClosealertSubActionParams
	isSet bool
}

func (v NullableRunConnectorSubactionClosealertSubActionParams) Get() *RunConnectorSubactionClosealertSubActionParams {
	return v.value
}

func (v *NullableRunConnectorSubactionClosealertSubActionParams) Set(val *RunConnectorSubactionClosealertSubActionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnectorSubactionClosealertSubActionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnectorSubactionClosealertSubActionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnectorSubactionClosealertSubActionParams(val *RunConnectorSubactionClosealertSubActionParams) *NullableRunConnectorSubactionClosealertSubActionParams {
	return &NullableRunConnectorSubactionClosealertSubActionParams{value: val, isSet: true}
}

func (v NullableRunConnectorSubactionClosealertSubActionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnectorSubactionClosealertSubActionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
