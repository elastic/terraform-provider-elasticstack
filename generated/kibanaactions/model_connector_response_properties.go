/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
	"fmt"
)

// ConnectorResponseProperties - The properties vary depending on the connector type.
type ConnectorResponseProperties struct {
	ConnectorResponsePropertiesCasesWebhook   *ConnectorResponsePropertiesCasesWebhook
	ConnectorResponsePropertiesEmail          *ConnectorResponsePropertiesEmail
	ConnectorResponsePropertiesIndex          *ConnectorResponsePropertiesIndex
	ConnectorResponsePropertiesJira           *ConnectorResponsePropertiesJira
	ConnectorResponsePropertiesOpsgenie       *ConnectorResponsePropertiesOpsgenie
	ConnectorResponsePropertiesPagerduty      *ConnectorResponsePropertiesPagerduty
	ConnectorResponsePropertiesResilient      *ConnectorResponsePropertiesResilient
	ConnectorResponsePropertiesServerlog      *ConnectorResponsePropertiesServerlog
	ConnectorResponsePropertiesServicenow     *ConnectorResponsePropertiesServicenow
	ConnectorResponsePropertiesServicenowItom *ConnectorResponsePropertiesServicenowItom
	ConnectorResponsePropertiesServicenowSir  *ConnectorResponsePropertiesServicenowSir
	ConnectorResponsePropertiesSlack          *ConnectorResponsePropertiesSlack
	ConnectorResponsePropertiesSwimlane       *ConnectorResponsePropertiesSwimlane
	ConnectorResponsePropertiesTeams          *ConnectorResponsePropertiesTeams
	ConnectorResponsePropertiesTines          *ConnectorResponsePropertiesTines
	ConnectorResponsePropertiesWebhook        *ConnectorResponsePropertiesWebhook
	ConnectorResponsePropertiesXmatters       *ConnectorResponsePropertiesXmatters
}

// ConnectorResponsePropertiesCasesWebhookAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesCasesWebhook wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesCasesWebhookAsConnectorResponseProperties(v *ConnectorResponsePropertiesCasesWebhook) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesCasesWebhook: v,
	}
}

// ConnectorResponsePropertiesEmailAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesEmail wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesEmailAsConnectorResponseProperties(v *ConnectorResponsePropertiesEmail) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesEmail: v,
	}
}

// ConnectorResponsePropertiesIndexAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesIndex wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesIndexAsConnectorResponseProperties(v *ConnectorResponsePropertiesIndex) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesIndex: v,
	}
}

// ConnectorResponsePropertiesJiraAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesJira wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesJiraAsConnectorResponseProperties(v *ConnectorResponsePropertiesJira) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesJira: v,
	}
}

// ConnectorResponsePropertiesOpsgenieAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesOpsgenie wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesOpsgenieAsConnectorResponseProperties(v *ConnectorResponsePropertiesOpsgenie) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesOpsgenie: v,
	}
}

// ConnectorResponsePropertiesPagerdutyAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesPagerduty wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesPagerdutyAsConnectorResponseProperties(v *ConnectorResponsePropertiesPagerduty) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesPagerduty: v,
	}
}

// ConnectorResponsePropertiesResilientAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesResilient wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesResilientAsConnectorResponseProperties(v *ConnectorResponsePropertiesResilient) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesResilient: v,
	}
}

// ConnectorResponsePropertiesServerlogAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesServerlog wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesServerlogAsConnectorResponseProperties(v *ConnectorResponsePropertiesServerlog) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesServerlog: v,
	}
}

// ConnectorResponsePropertiesServicenowAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesServicenow wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesServicenowAsConnectorResponseProperties(v *ConnectorResponsePropertiesServicenow) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesServicenow: v,
	}
}

// ConnectorResponsePropertiesServicenowItomAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesServicenowItom wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesServicenowItomAsConnectorResponseProperties(v *ConnectorResponsePropertiesServicenowItom) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesServicenowItom: v,
	}
}

// ConnectorResponsePropertiesServicenowSirAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesServicenowSir wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesServicenowSirAsConnectorResponseProperties(v *ConnectorResponsePropertiesServicenowSir) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesServicenowSir: v,
	}
}

// ConnectorResponsePropertiesSlackAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesSlack wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesSlackAsConnectorResponseProperties(v *ConnectorResponsePropertiesSlack) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesSlack: v,
	}
}

// ConnectorResponsePropertiesSwimlaneAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesSwimlane wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesSwimlaneAsConnectorResponseProperties(v *ConnectorResponsePropertiesSwimlane) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesSwimlane: v,
	}
}

// ConnectorResponsePropertiesTeamsAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesTeams wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesTeamsAsConnectorResponseProperties(v *ConnectorResponsePropertiesTeams) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesTeams: v,
	}
}

// ConnectorResponsePropertiesTinesAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesTines wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesTinesAsConnectorResponseProperties(v *ConnectorResponsePropertiesTines) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesTines: v,
	}
}

// ConnectorResponsePropertiesWebhookAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesWebhook wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesWebhookAsConnectorResponseProperties(v *ConnectorResponsePropertiesWebhook) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesWebhook: v,
	}
}

// ConnectorResponsePropertiesXmattersAsConnectorResponseProperties is a convenience function that returns ConnectorResponsePropertiesXmatters wrapped in ConnectorResponseProperties
func ConnectorResponsePropertiesXmattersAsConnectorResponseProperties(v *ConnectorResponsePropertiesXmatters) ConnectorResponseProperties {
	return ConnectorResponseProperties{
		ConnectorResponsePropertiesXmatters: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectorResponseProperties) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'connector_response_properties_cases_webhook'
	if jsonDict["connector_type_id"] == "connector_response_properties_cases_webhook" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesCasesWebhook
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesCasesWebhook)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesCasesWebhook, return on the first match
		} else {
			dst.ConnectorResponsePropertiesCasesWebhook = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesCasesWebhook: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_email'
	if jsonDict["connector_type_id"] == "connector_response_properties_email" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesEmail
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesEmail)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesEmail, return on the first match
		} else {
			dst.ConnectorResponsePropertiesEmail = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesEmail: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_index'
	if jsonDict["connector_type_id"] == "connector_response_properties_index" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesIndex
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesIndex)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesIndex, return on the first match
		} else {
			dst.ConnectorResponsePropertiesIndex = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesIndex: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_jira'
	if jsonDict["connector_type_id"] == "connector_response_properties_jira" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesJira
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesJira)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesJira, return on the first match
		} else {
			dst.ConnectorResponsePropertiesJira = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesJira: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_opsgenie'
	if jsonDict["connector_type_id"] == "connector_response_properties_opsgenie" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesOpsgenie
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesOpsgenie)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesOpsgenie, return on the first match
		} else {
			dst.ConnectorResponsePropertiesOpsgenie = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesOpsgenie: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_pagerduty'
	if jsonDict["connector_type_id"] == "connector_response_properties_pagerduty" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesPagerduty
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesPagerduty)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesPagerduty, return on the first match
		} else {
			dst.ConnectorResponsePropertiesPagerduty = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesPagerduty: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_resilient'
	if jsonDict["connector_type_id"] == "connector_response_properties_resilient" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesResilient
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesResilient)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesResilient, return on the first match
		} else {
			dst.ConnectorResponsePropertiesResilient = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesResilient: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_serverlog'
	if jsonDict["connector_type_id"] == "connector_response_properties_serverlog" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesServerlog
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesServerlog)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesServerlog, return on the first match
		} else {
			dst.ConnectorResponsePropertiesServerlog = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesServerlog: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_servicenow'
	if jsonDict["connector_type_id"] == "connector_response_properties_servicenow" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesServicenow
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesServicenow)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesServicenow, return on the first match
		} else {
			dst.ConnectorResponsePropertiesServicenow = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesServicenow: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_servicenow_itom'
	if jsonDict["connector_type_id"] == "connector_response_properties_servicenow_itom" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesServicenowItom
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesServicenowItom)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesServicenowItom, return on the first match
		} else {
			dst.ConnectorResponsePropertiesServicenowItom = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesServicenowItom: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_servicenow_sir'
	if jsonDict["connector_type_id"] == "connector_response_properties_servicenow_sir" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesServicenowSir
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesServicenowSir)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesServicenowSir, return on the first match
		} else {
			dst.ConnectorResponsePropertiesServicenowSir = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesServicenowSir: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_slack'
	if jsonDict["connector_type_id"] == "connector_response_properties_slack" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesSlack
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesSlack)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesSlack, return on the first match
		} else {
			dst.ConnectorResponsePropertiesSlack = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesSlack: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_swimlane'
	if jsonDict["connector_type_id"] == "connector_response_properties_swimlane" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesSwimlane
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesSwimlane)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesSwimlane, return on the first match
		} else {
			dst.ConnectorResponsePropertiesSwimlane = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesSwimlane: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_teams'
	if jsonDict["connector_type_id"] == "connector_response_properties_teams" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesTeams
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesTeams)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesTeams, return on the first match
		} else {
			dst.ConnectorResponsePropertiesTeams = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesTeams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_tines'
	if jsonDict["connector_type_id"] == "connector_response_properties_tines" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesTines
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesTines)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesTines, return on the first match
		} else {
			dst.ConnectorResponsePropertiesTines = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesTines: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_webhook'
	if jsonDict["connector_type_id"] == "connector_response_properties_webhook" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesWebhook
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesWebhook)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesWebhook, return on the first match
		} else {
			dst.ConnectorResponsePropertiesWebhook = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesWebhook: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connector_response_properties_xmatters'
	if jsonDict["connector_type_id"] == "connector_response_properties_xmatters" {
		// try to unmarshal JSON data into ConnectorResponsePropertiesXmatters
		err = json.Unmarshal(data, &dst.ConnectorResponsePropertiesXmatters)
		if err == nil {
			return nil // data stored in dst.ConnectorResponsePropertiesXmatters, return on the first match
		} else {
			dst.ConnectorResponsePropertiesXmatters = nil
			return fmt.Errorf("failed to unmarshal ConnectorResponseProperties as ConnectorResponsePropertiesXmatters: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectorResponseProperties) MarshalJSON() ([]byte, error) {
	if src.ConnectorResponsePropertiesCasesWebhook != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesCasesWebhook)
	}

	if src.ConnectorResponsePropertiesEmail != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesEmail)
	}

	if src.ConnectorResponsePropertiesIndex != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesIndex)
	}

	if src.ConnectorResponsePropertiesJira != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesJira)
	}

	if src.ConnectorResponsePropertiesOpsgenie != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesOpsgenie)
	}

	if src.ConnectorResponsePropertiesPagerduty != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesPagerduty)
	}

	if src.ConnectorResponsePropertiesResilient != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesResilient)
	}

	if src.ConnectorResponsePropertiesServerlog != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesServerlog)
	}

	if src.ConnectorResponsePropertiesServicenow != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesServicenow)
	}

	if src.ConnectorResponsePropertiesServicenowItom != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesServicenowItom)
	}

	if src.ConnectorResponsePropertiesServicenowSir != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesServicenowSir)
	}

	if src.ConnectorResponsePropertiesSlack != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesSlack)
	}

	if src.ConnectorResponsePropertiesSwimlane != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesSwimlane)
	}

	if src.ConnectorResponsePropertiesTeams != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesTeams)
	}

	if src.ConnectorResponsePropertiesTines != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesTines)
	}

	if src.ConnectorResponsePropertiesWebhook != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesWebhook)
	}

	if src.ConnectorResponsePropertiesXmatters != nil {
		return json.Marshal(&src.ConnectorResponsePropertiesXmatters)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectorResponseProperties) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ConnectorResponsePropertiesCasesWebhook != nil {
		return obj.ConnectorResponsePropertiesCasesWebhook
	}

	if obj.ConnectorResponsePropertiesEmail != nil {
		return obj.ConnectorResponsePropertiesEmail
	}

	if obj.ConnectorResponsePropertiesIndex != nil {
		return obj.ConnectorResponsePropertiesIndex
	}

	if obj.ConnectorResponsePropertiesJira != nil {
		return obj.ConnectorResponsePropertiesJira
	}

	if obj.ConnectorResponsePropertiesOpsgenie != nil {
		return obj.ConnectorResponsePropertiesOpsgenie
	}

	if obj.ConnectorResponsePropertiesPagerduty != nil {
		return obj.ConnectorResponsePropertiesPagerduty
	}

	if obj.ConnectorResponsePropertiesResilient != nil {
		return obj.ConnectorResponsePropertiesResilient
	}

	if obj.ConnectorResponsePropertiesServerlog != nil {
		return obj.ConnectorResponsePropertiesServerlog
	}

	if obj.ConnectorResponsePropertiesServicenow != nil {
		return obj.ConnectorResponsePropertiesServicenow
	}

	if obj.ConnectorResponsePropertiesServicenowItom != nil {
		return obj.ConnectorResponsePropertiesServicenowItom
	}

	if obj.ConnectorResponsePropertiesServicenowSir != nil {
		return obj.ConnectorResponsePropertiesServicenowSir
	}

	if obj.ConnectorResponsePropertiesSlack != nil {
		return obj.ConnectorResponsePropertiesSlack
	}

	if obj.ConnectorResponsePropertiesSwimlane != nil {
		return obj.ConnectorResponsePropertiesSwimlane
	}

	if obj.ConnectorResponsePropertiesTeams != nil {
		return obj.ConnectorResponsePropertiesTeams
	}

	if obj.ConnectorResponsePropertiesTines != nil {
		return obj.ConnectorResponsePropertiesTines
	}

	if obj.ConnectorResponsePropertiesWebhook != nil {
		return obj.ConnectorResponsePropertiesWebhook
	}

	if obj.ConnectorResponsePropertiesXmatters != nil {
		return obj.ConnectorResponsePropertiesXmatters
	}

	// all schemas are nil
	return nil
}

type NullableConnectorResponseProperties struct {
	value *ConnectorResponseProperties
	isSet bool
}

func (v NullableConnectorResponseProperties) Get() *ConnectorResponseProperties {
	return v.value
}

func (v *NullableConnectorResponseProperties) Set(val *ConnectorResponseProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorResponseProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorResponseProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorResponseProperties(val *ConnectorResponseProperties) *NullableConnectorResponseProperties {
	return &NullableConnectorResponseProperties{value: val, isSet: true}
}

func (v NullableConnectorResponseProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorResponseProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
