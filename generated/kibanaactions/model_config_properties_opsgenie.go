/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the ConfigPropertiesOpsgenie type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPropertiesOpsgenie{}

// ConfigPropertiesOpsgenie Defines properties for connectors when type is `.opsgenie`.
type ConfigPropertiesOpsgenie struct {
	// The Opsgenie URL. For example, `https://api.opsgenie.com` or `https://api.eu.opsgenie.com`. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.
	ApiUrl string `json:"apiUrl"`
}

// NewConfigPropertiesOpsgenie instantiates a new ConfigPropertiesOpsgenie object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPropertiesOpsgenie(apiUrl string) *ConfigPropertiesOpsgenie {
	this := ConfigPropertiesOpsgenie{}
	this.ApiUrl = apiUrl
	return &this
}

// NewConfigPropertiesOpsgenieWithDefaults instantiates a new ConfigPropertiesOpsgenie object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPropertiesOpsgenieWithDefaults() *ConfigPropertiesOpsgenie {
	this := ConfigPropertiesOpsgenie{}
	return &this
}

// GetApiUrl returns the ApiUrl field value
func (o *ConfigPropertiesOpsgenie) GetApiUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesOpsgenie) GetApiUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiUrl, true
}

// SetApiUrl sets field value
func (o *ConfigPropertiesOpsgenie) SetApiUrl(v string) {
	o.ApiUrl = v
}

func (o ConfigPropertiesOpsgenie) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPropertiesOpsgenie) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiUrl"] = o.ApiUrl
	return toSerialize, nil
}

type NullableConfigPropertiesOpsgenie struct {
	value *ConfigPropertiesOpsgenie
	isSet bool
}

func (v NullableConfigPropertiesOpsgenie) Get() *ConfigPropertiesOpsgenie {
	return v.value
}

func (v *NullableConfigPropertiesOpsgenie) Set(val *ConfigPropertiesOpsgenie) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPropertiesOpsgenie) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPropertiesOpsgenie) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPropertiesOpsgenie(val *ConfigPropertiesOpsgenie) *NullableConfigPropertiesOpsgenie {
	return &NullableConfigPropertiesOpsgenie{value: val, isSet: true}
}

func (v NullableConfigPropertiesOpsgenie) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPropertiesOpsgenie) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
