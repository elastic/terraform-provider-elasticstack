/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
	"fmt"
)

// ConnectorTypes The type of connector. For example, `.email`, `.index`, `.jira`, `.opsgenie`, or `.server-log`.
type ConnectorTypes string

// List of connector_types
const (
	CASES_WEBHOOK   ConnectorTypes = ".cases-webhook"
	EMAIL           ConnectorTypes = ".email"
	INDEX           ConnectorTypes = ".index"
	JIRA            ConnectorTypes = ".jira"
	OPSGENIE        ConnectorTypes = ".opsgenie"
	PAGERDUTY       ConnectorTypes = ".pagerduty"
	RESILIENT       ConnectorTypes = ".resilient"
	SERVICENOW      ConnectorTypes = ".servicenow"
	SERVICENOW_ITOM ConnectorTypes = ".servicenow-itom"
	SERVICENOW_SIR  ConnectorTypes = ".servicenow-sir"
	SERVER_LOG      ConnectorTypes = ".server-log"
	SLACK           ConnectorTypes = ".slack"
	SWIMLANE        ConnectorTypes = ".swimlane"
	TEAMS           ConnectorTypes = ".teams"
	TINES           ConnectorTypes = ".tines"
	WEBHOOK         ConnectorTypes = ".webhook"
	XMATTERS        ConnectorTypes = ".xmatters"
)

// All allowed values of ConnectorTypes enum
var AllowedConnectorTypesEnumValues = []ConnectorTypes{
	".cases-webhook",
	".email",
	".index",
	".jira",
	".opsgenie",
	".pagerduty",
	".resilient",
	".servicenow",
	".servicenow-itom",
	".servicenow-sir",
	".server-log",
	".slack",
	".swimlane",
	".teams",
	".tines",
	".webhook",
	".xmatters",
}

func (v *ConnectorTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorTypes(value)
	for _, existing := range AllowedConnectorTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorTypes", value)
}

// NewConnectorTypesFromValue returns a pointer to a valid ConnectorTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorTypesFromValue(v string) (*ConnectorTypes, error) {
	ev := ConnectorTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorTypes: valid values are %v", v, AllowedConnectorTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorTypes) IsValid() bool {
	for _, existing := range AllowedConnectorTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to connector_types value
func (v ConnectorTypes) Ptr() *ConnectorTypes {
	return &v
}

type NullableConnectorTypes struct {
	value *ConnectorTypes
	isSet bool
}

func (v NullableConnectorTypes) Get() *ConnectorTypes {
	return v.value
}

func (v *NullableConnectorTypes) Set(val *ConnectorTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorTypes(val *ConnectorTypes) *NullableConnectorTypes {
	return &NullableConnectorTypes{value: val, isSet: true}
}

func (v NullableConnectorTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
