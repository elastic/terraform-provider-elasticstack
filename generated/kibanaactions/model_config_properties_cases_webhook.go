/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the ConfigPropertiesCasesWebhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPropertiesCasesWebhook{}

// ConfigPropertiesCasesWebhook Defines properties for connectors when type is `.cases-webhook`.
type ConfigPropertiesCasesWebhook struct {
	// A JSON payload sent to the create comment URL to create a case comment. You can use variables to add Kibana Cases data to the payload. The required variable is `case.comment`. Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated once the Mustache variables have been placed when the REST method runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later validation will pass.
	CreateCommentJson *string `json:"createCommentJson,omitempty"`
	// The REST API HTTP request method to create a case comment in the third-party system. Valid values are `patch`, `post`, and `put`.
	CreateCommentMethod *string `json:"createCommentMethod,omitempty"`
	// The REST API URL to create a case comment by ID in the third-party system. You can use a variable to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts setting`, add the hostname to the allowed hosts.
	CreateCommentUrl *string `json:"createCommentUrl,omitempty"`
	// A JSON payload sent to the create case URL to create a case. You can use variables to add case data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid future validation errors; disregard Mustache variables during your review.
	CreateIncidentJson string `json:"createIncidentJson"`
	// The REST API HTTP request method to create a case in the third-party system. Valid values are `patch`, `post`, and `put`.
	CreateIncidentMethod *string `json:"createIncidentMethod,omitempty"`
	// The JSON key in the create case response that contains the external case ID.
	CreateIncidentResponseKey string `json:"createIncidentResponseKey"`
	// The REST API URL to create a case in the third-party system. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.
	CreateIncidentUrl string `json:"createIncidentUrl"`
	// The JSON key in get case response that contains the external case title.
	GetIncidentResponseExternalTitleKey string `json:"getIncidentResponseExternalTitleKey"`
	// The REST API URL to get the case by ID from the third-party system. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts. You can use a variable to add the external system ID to the URL. Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later validation will pass.
	GetIncidentUrl string `json:"getIncidentUrl"`
	// If true, a username and password for login type authentication must be provided.
	HasAuth *bool `json:"hasAuth,omitempty"`
	// A set of key-value pairs sent as headers with the request URLs for the create case, update case, get case, and create comment methods.
	Headers *string `json:"headers,omitempty"`
	// The JSON payload sent to the update case URL to update the case. You can use variables to add Kibana Cases data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid future validation errors; disregard Mustache variables during your review.
	UpdateIncidentJson string `json:"updateIncidentJson"`
	// The REST API HTTP request method to update the case in the third-party system. Valid values are `patch`, `post`, and `put`.
	UpdateIncidentMethod *string `json:"updateIncidentMethod,omitempty"`
	// The REST API URL to update the case by ID in the third-party system. You can use a variable to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.
	UpdateIncidentUrl string `json:"updateIncidentUrl"`
	// The URL to view the case in the external system. You can use variables to add the external system ID or external system title to the URL.
	ViewIncidentUrl string `json:"viewIncidentUrl"`
}

// NewConfigPropertiesCasesWebhook instantiates a new ConfigPropertiesCasesWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPropertiesCasesWebhook(createIncidentJson string, createIncidentResponseKey string, createIncidentUrl string, getIncidentResponseExternalTitleKey string, getIncidentUrl string, updateIncidentJson string, updateIncidentUrl string, viewIncidentUrl string) *ConfigPropertiesCasesWebhook {
	this := ConfigPropertiesCasesWebhook{}
	var createCommentMethod string = "put"
	this.CreateCommentMethod = &createCommentMethod
	this.CreateIncidentJson = createIncidentJson
	var createIncidentMethod string = "post"
	this.CreateIncidentMethod = &createIncidentMethod
	this.CreateIncidentResponseKey = createIncidentResponseKey
	this.CreateIncidentUrl = createIncidentUrl
	this.GetIncidentResponseExternalTitleKey = getIncidentResponseExternalTitleKey
	this.GetIncidentUrl = getIncidentUrl
	var hasAuth bool = true
	this.HasAuth = &hasAuth
	this.UpdateIncidentJson = updateIncidentJson
	var updateIncidentMethod string = "put"
	this.UpdateIncidentMethod = &updateIncidentMethod
	this.UpdateIncidentUrl = updateIncidentUrl
	this.ViewIncidentUrl = viewIncidentUrl
	return &this
}

// NewConfigPropertiesCasesWebhookWithDefaults instantiates a new ConfigPropertiesCasesWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPropertiesCasesWebhookWithDefaults() *ConfigPropertiesCasesWebhook {
	this := ConfigPropertiesCasesWebhook{}
	var createCommentMethod string = "put"
	this.CreateCommentMethod = &createCommentMethod
	var createIncidentMethod string = "post"
	this.CreateIncidentMethod = &createIncidentMethod
	var hasAuth bool = true
	this.HasAuth = &hasAuth
	var updateIncidentMethod string = "put"
	this.UpdateIncidentMethod = &updateIncidentMethod
	return &this
}

// GetCreateCommentJson returns the CreateCommentJson field value if set, zero value otherwise.
func (o *ConfigPropertiesCasesWebhook) GetCreateCommentJson() string {
	if o == nil || IsNil(o.CreateCommentJson) {
		var ret string
		return ret
	}
	return *o.CreateCommentJson
}

// GetCreateCommentJsonOk returns a tuple with the CreateCommentJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetCreateCommentJsonOk() (*string, bool) {
	if o == nil || IsNil(o.CreateCommentJson) {
		return nil, false
	}
	return o.CreateCommentJson, true
}

// HasCreateCommentJson returns a boolean if a field has been set.
func (o *ConfigPropertiesCasesWebhook) HasCreateCommentJson() bool {
	if o != nil && !IsNil(o.CreateCommentJson) {
		return true
	}

	return false
}

// SetCreateCommentJson gets a reference to the given string and assigns it to the CreateCommentJson field.
func (o *ConfigPropertiesCasesWebhook) SetCreateCommentJson(v string) {
	o.CreateCommentJson = &v
}

// GetCreateCommentMethod returns the CreateCommentMethod field value if set, zero value otherwise.
func (o *ConfigPropertiesCasesWebhook) GetCreateCommentMethod() string {
	if o == nil || IsNil(o.CreateCommentMethod) {
		var ret string
		return ret
	}
	return *o.CreateCommentMethod
}

// GetCreateCommentMethodOk returns a tuple with the CreateCommentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetCreateCommentMethodOk() (*string, bool) {
	if o == nil || IsNil(o.CreateCommentMethod) {
		return nil, false
	}
	return o.CreateCommentMethod, true
}

// HasCreateCommentMethod returns a boolean if a field has been set.
func (o *ConfigPropertiesCasesWebhook) HasCreateCommentMethod() bool {
	if o != nil && !IsNil(o.CreateCommentMethod) {
		return true
	}

	return false
}

// SetCreateCommentMethod gets a reference to the given string and assigns it to the CreateCommentMethod field.
func (o *ConfigPropertiesCasesWebhook) SetCreateCommentMethod(v string) {
	o.CreateCommentMethod = &v
}

// GetCreateCommentUrl returns the CreateCommentUrl field value if set, zero value otherwise.
func (o *ConfigPropertiesCasesWebhook) GetCreateCommentUrl() string {
	if o == nil || IsNil(o.CreateCommentUrl) {
		var ret string
		return ret
	}
	return *o.CreateCommentUrl
}

// GetCreateCommentUrlOk returns a tuple with the CreateCommentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetCreateCommentUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CreateCommentUrl) {
		return nil, false
	}
	return o.CreateCommentUrl, true
}

// HasCreateCommentUrl returns a boolean if a field has been set.
func (o *ConfigPropertiesCasesWebhook) HasCreateCommentUrl() bool {
	if o != nil && !IsNil(o.CreateCommentUrl) {
		return true
	}

	return false
}

// SetCreateCommentUrl gets a reference to the given string and assigns it to the CreateCommentUrl field.
func (o *ConfigPropertiesCasesWebhook) SetCreateCommentUrl(v string) {
	o.CreateCommentUrl = &v
}

// GetCreateIncidentJson returns the CreateIncidentJson field value
func (o *ConfigPropertiesCasesWebhook) GetCreateIncidentJson() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreateIncidentJson
}

// GetCreateIncidentJsonOk returns a tuple with the CreateIncidentJson field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetCreateIncidentJsonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateIncidentJson, true
}

// SetCreateIncidentJson sets field value
func (o *ConfigPropertiesCasesWebhook) SetCreateIncidentJson(v string) {
	o.CreateIncidentJson = v
}

// GetCreateIncidentMethod returns the CreateIncidentMethod field value if set, zero value otherwise.
func (o *ConfigPropertiesCasesWebhook) GetCreateIncidentMethod() string {
	if o == nil || IsNil(o.CreateIncidentMethod) {
		var ret string
		return ret
	}
	return *o.CreateIncidentMethod
}

// GetCreateIncidentMethodOk returns a tuple with the CreateIncidentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetCreateIncidentMethodOk() (*string, bool) {
	if o == nil || IsNil(o.CreateIncidentMethod) {
		return nil, false
	}
	return o.CreateIncidentMethod, true
}

// HasCreateIncidentMethod returns a boolean if a field has been set.
func (o *ConfigPropertiesCasesWebhook) HasCreateIncidentMethod() bool {
	if o != nil && !IsNil(o.CreateIncidentMethod) {
		return true
	}

	return false
}

// SetCreateIncidentMethod gets a reference to the given string and assigns it to the CreateIncidentMethod field.
func (o *ConfigPropertiesCasesWebhook) SetCreateIncidentMethod(v string) {
	o.CreateIncidentMethod = &v
}

// GetCreateIncidentResponseKey returns the CreateIncidentResponseKey field value
func (o *ConfigPropertiesCasesWebhook) GetCreateIncidentResponseKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreateIncidentResponseKey
}

// GetCreateIncidentResponseKeyOk returns a tuple with the CreateIncidentResponseKey field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetCreateIncidentResponseKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateIncidentResponseKey, true
}

// SetCreateIncidentResponseKey sets field value
func (o *ConfigPropertiesCasesWebhook) SetCreateIncidentResponseKey(v string) {
	o.CreateIncidentResponseKey = v
}

// GetCreateIncidentUrl returns the CreateIncidentUrl field value
func (o *ConfigPropertiesCasesWebhook) GetCreateIncidentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreateIncidentUrl
}

// GetCreateIncidentUrlOk returns a tuple with the CreateIncidentUrl field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetCreateIncidentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateIncidentUrl, true
}

// SetCreateIncidentUrl sets field value
func (o *ConfigPropertiesCasesWebhook) SetCreateIncidentUrl(v string) {
	o.CreateIncidentUrl = v
}

// GetGetIncidentResponseExternalTitleKey returns the GetIncidentResponseExternalTitleKey field value
func (o *ConfigPropertiesCasesWebhook) GetGetIncidentResponseExternalTitleKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GetIncidentResponseExternalTitleKey
}

// GetGetIncidentResponseExternalTitleKeyOk returns a tuple with the GetIncidentResponseExternalTitleKey field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetGetIncidentResponseExternalTitleKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GetIncidentResponseExternalTitleKey, true
}

// SetGetIncidentResponseExternalTitleKey sets field value
func (o *ConfigPropertiesCasesWebhook) SetGetIncidentResponseExternalTitleKey(v string) {
	o.GetIncidentResponseExternalTitleKey = v
}

// GetGetIncidentUrl returns the GetIncidentUrl field value
func (o *ConfigPropertiesCasesWebhook) GetGetIncidentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GetIncidentUrl
}

// GetGetIncidentUrlOk returns a tuple with the GetIncidentUrl field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetGetIncidentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GetIncidentUrl, true
}

// SetGetIncidentUrl sets field value
func (o *ConfigPropertiesCasesWebhook) SetGetIncidentUrl(v string) {
	o.GetIncidentUrl = v
}

// GetHasAuth returns the HasAuth field value if set, zero value otherwise.
func (o *ConfigPropertiesCasesWebhook) GetHasAuth() bool {
	if o == nil || IsNil(o.HasAuth) {
		var ret bool
		return ret
	}
	return *o.HasAuth
}

// GetHasAuthOk returns a tuple with the HasAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetHasAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAuth) {
		return nil, false
	}
	return o.HasAuth, true
}

// HasHasAuth returns a boolean if a field has been set.
func (o *ConfigPropertiesCasesWebhook) HasHasAuth() bool {
	if o != nil && !IsNil(o.HasAuth) {
		return true
	}

	return false
}

// SetHasAuth gets a reference to the given bool and assigns it to the HasAuth field.
func (o *ConfigPropertiesCasesWebhook) SetHasAuth(v bool) {
	o.HasAuth = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ConfigPropertiesCasesWebhook) GetHeaders() string {
	if o == nil || IsNil(o.Headers) {
		var ret string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetHeadersOk() (*string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ConfigPropertiesCasesWebhook) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given string and assigns it to the Headers field.
func (o *ConfigPropertiesCasesWebhook) SetHeaders(v string) {
	o.Headers = &v
}

// GetUpdateIncidentJson returns the UpdateIncidentJson field value
func (o *ConfigPropertiesCasesWebhook) GetUpdateIncidentJson() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdateIncidentJson
}

// GetUpdateIncidentJsonOk returns a tuple with the UpdateIncidentJson field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetUpdateIncidentJsonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateIncidentJson, true
}

// SetUpdateIncidentJson sets field value
func (o *ConfigPropertiesCasesWebhook) SetUpdateIncidentJson(v string) {
	o.UpdateIncidentJson = v
}

// GetUpdateIncidentMethod returns the UpdateIncidentMethod field value if set, zero value otherwise.
func (o *ConfigPropertiesCasesWebhook) GetUpdateIncidentMethod() string {
	if o == nil || IsNil(o.UpdateIncidentMethod) {
		var ret string
		return ret
	}
	return *o.UpdateIncidentMethod
}

// GetUpdateIncidentMethodOk returns a tuple with the UpdateIncidentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetUpdateIncidentMethodOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateIncidentMethod) {
		return nil, false
	}
	return o.UpdateIncidentMethod, true
}

// HasUpdateIncidentMethod returns a boolean if a field has been set.
func (o *ConfigPropertiesCasesWebhook) HasUpdateIncidentMethod() bool {
	if o != nil && !IsNil(o.UpdateIncidentMethod) {
		return true
	}

	return false
}

// SetUpdateIncidentMethod gets a reference to the given string and assigns it to the UpdateIncidentMethod field.
func (o *ConfigPropertiesCasesWebhook) SetUpdateIncidentMethod(v string) {
	o.UpdateIncidentMethod = &v
}

// GetUpdateIncidentUrl returns the UpdateIncidentUrl field value
func (o *ConfigPropertiesCasesWebhook) GetUpdateIncidentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdateIncidentUrl
}

// GetUpdateIncidentUrlOk returns a tuple with the UpdateIncidentUrl field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetUpdateIncidentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateIncidentUrl, true
}

// SetUpdateIncidentUrl sets field value
func (o *ConfigPropertiesCasesWebhook) SetUpdateIncidentUrl(v string) {
	o.UpdateIncidentUrl = v
}

// GetViewIncidentUrl returns the ViewIncidentUrl field value
func (o *ConfigPropertiesCasesWebhook) GetViewIncidentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ViewIncidentUrl
}

// GetViewIncidentUrlOk returns a tuple with the ViewIncidentUrl field value
// and a boolean to check if the value has been set.
func (o *ConfigPropertiesCasesWebhook) GetViewIncidentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewIncidentUrl, true
}

// SetViewIncidentUrl sets field value
func (o *ConfigPropertiesCasesWebhook) SetViewIncidentUrl(v string) {
	o.ViewIncidentUrl = v
}

func (o ConfigPropertiesCasesWebhook) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPropertiesCasesWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateCommentJson) {
		toSerialize["createCommentJson"] = o.CreateCommentJson
	}
	if !IsNil(o.CreateCommentMethod) {
		toSerialize["createCommentMethod"] = o.CreateCommentMethod
	}
	if !IsNil(o.CreateCommentUrl) {
		toSerialize["createCommentUrl"] = o.CreateCommentUrl
	}
	toSerialize["createIncidentJson"] = o.CreateIncidentJson
	if !IsNil(o.CreateIncidentMethod) {
		toSerialize["createIncidentMethod"] = o.CreateIncidentMethod
	}
	toSerialize["createIncidentResponseKey"] = o.CreateIncidentResponseKey
	toSerialize["createIncidentUrl"] = o.CreateIncidentUrl
	toSerialize["getIncidentResponseExternalTitleKey"] = o.GetIncidentResponseExternalTitleKey
	toSerialize["getIncidentUrl"] = o.GetIncidentUrl
	if !IsNil(o.HasAuth) {
		toSerialize["hasAuth"] = o.HasAuth
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	toSerialize["updateIncidentJson"] = o.UpdateIncidentJson
	if !IsNil(o.UpdateIncidentMethod) {
		toSerialize["updateIncidentMethod"] = o.UpdateIncidentMethod
	}
	toSerialize["updateIncidentUrl"] = o.UpdateIncidentUrl
	toSerialize["viewIncidentUrl"] = o.ViewIncidentUrl
	return toSerialize, nil
}

type NullableConfigPropertiesCasesWebhook struct {
	value *ConfigPropertiesCasesWebhook
	isSet bool
}

func (v NullableConfigPropertiesCasesWebhook) Get() *ConfigPropertiesCasesWebhook {
	return v.value
}

func (v *NullableConfigPropertiesCasesWebhook) Set(val *ConfigPropertiesCasesWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPropertiesCasesWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPropertiesCasesWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPropertiesCasesWebhook(val *ConfigPropertiesCasesWebhook) *NullableConfigPropertiesCasesWebhook {
	return &NullableConfigPropertiesCasesWebhook{value: val, isSet: true}
}

func (v NullableConfigPropertiesCasesWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPropertiesCasesWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
