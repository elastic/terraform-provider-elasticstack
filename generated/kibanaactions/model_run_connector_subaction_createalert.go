/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the RunConnectorSubactionCreatealert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunConnectorSubactionCreatealert{}

// RunConnectorSubactionCreatealert The `createAlert` subaction for Opsgenie connectors.
type RunConnectorSubactionCreatealert struct {
	// The action to test.
	SubAction       string                                          `json:"subAction"`
	SubActionParams RunConnectorSubactionCreatealertSubActionParams `json:"subActionParams"`
}

// NewRunConnectorSubactionCreatealert instantiates a new RunConnectorSubactionCreatealert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunConnectorSubactionCreatealert(subAction string, subActionParams RunConnectorSubactionCreatealertSubActionParams) *RunConnectorSubactionCreatealert {
	this := RunConnectorSubactionCreatealert{}
	this.SubAction = subAction
	this.SubActionParams = subActionParams
	return &this
}

// NewRunConnectorSubactionCreatealertWithDefaults instantiates a new RunConnectorSubactionCreatealert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunConnectorSubactionCreatealertWithDefaults() *RunConnectorSubactionCreatealert {
	this := RunConnectorSubactionCreatealert{}
	return &this
}

// GetSubAction returns the SubAction field value
func (o *RunConnectorSubactionCreatealert) GetSubAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubAction
}

// GetSubActionOk returns a tuple with the SubAction field value
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealert) GetSubActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubAction, true
}

// SetSubAction sets field value
func (o *RunConnectorSubactionCreatealert) SetSubAction(v string) {
	o.SubAction = v
}

// GetSubActionParams returns the SubActionParams field value
func (o *RunConnectorSubactionCreatealert) GetSubActionParams() RunConnectorSubactionCreatealertSubActionParams {
	if o == nil {
		var ret RunConnectorSubactionCreatealertSubActionParams
		return ret
	}

	return o.SubActionParams
}

// GetSubActionParamsOk returns a tuple with the SubActionParams field value
// and a boolean to check if the value has been set.
func (o *RunConnectorSubactionCreatealert) GetSubActionParamsOk() (*RunConnectorSubactionCreatealertSubActionParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubActionParams, true
}

// SetSubActionParams sets field value
func (o *RunConnectorSubactionCreatealert) SetSubActionParams(v RunConnectorSubactionCreatealertSubActionParams) {
	o.SubActionParams = v
}

func (o RunConnectorSubactionCreatealert) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunConnectorSubactionCreatealert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subAction"] = o.SubAction
	toSerialize["subActionParams"] = o.SubActionParams
	return toSerialize, nil
}

type NullableRunConnectorSubactionCreatealert struct {
	value *RunConnectorSubactionCreatealert
	isSet bool
}

func (v NullableRunConnectorSubactionCreatealert) Get() *RunConnectorSubactionCreatealert {
	return v.value
}

func (v *NullableRunConnectorSubactionCreatealert) Set(val *RunConnectorSubactionCreatealert) {
	v.value = val
	v.isSet = true
}

func (v NullableRunConnectorSubactionCreatealert) IsSet() bool {
	return v.isSet
}

func (v *NullableRunConnectorSubactionCreatealert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunConnectorSubactionCreatealert(val *RunConnectorSubactionCreatealert) *NullableRunConnectorSubactionCreatealert {
	return &NullableRunConnectorSubactionCreatealert{value: val, isSet: true}
}

func (v NullableRunConnectorSubactionCreatealert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunConnectorSubactionCreatealert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
