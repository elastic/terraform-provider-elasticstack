/*
Connectors

OpenAPI schema for Connectors endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kibanaactions

import (
	"encoding/json"
)

// checks if the UnauthorizedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnauthorizedResponse{}

// UnauthorizedResponse struct for UnauthorizedResponse
type UnauthorizedResponse struct {
	Error      *string `json:"error,omitempty"`
	Message    *string `json:"message,omitempty"`
	StatusCode *int32  `json:"statusCode,omitempty"`
}

// NewUnauthorizedResponse instantiates a new UnauthorizedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnauthorizedResponse() *UnauthorizedResponse {
	this := UnauthorizedResponse{}
	return &this
}

// NewUnauthorizedResponseWithDefaults instantiates a new UnauthorizedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnauthorizedResponseWithDefaults() *UnauthorizedResponse {
	this := UnauthorizedResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UnauthorizedResponse) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthorizedResponse) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UnauthorizedResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *UnauthorizedResponse) SetError(v string) {
	o.Error = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UnauthorizedResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthorizedResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UnauthorizedResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UnauthorizedResponse) SetMessage(v string) {
	o.Message = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *UnauthorizedResponse) GetStatusCode() int32 {
	if o == nil || IsNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthorizedResponse) GetStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *UnauthorizedResponse) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *UnauthorizedResponse) SetStatusCode(v int32) {
	o.StatusCode = &v
}

func (o UnauthorizedResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnauthorizedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return toSerialize, nil
}

type NullableUnauthorizedResponse struct {
	value *UnauthorizedResponse
	isSet bool
}

func (v NullableUnauthorizedResponse) Get() *UnauthorizedResponse {
	return v.value
}

func (v *NullableUnauthorizedResponse) Set(val *UnauthorizedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUnauthorizedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUnauthorizedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnauthorizedResponse(val *UnauthorizedResponse) *NullableUnauthorizedResponse {
	return &NullableUnauthorizedResponse{value: val, isSet: true}
}

func (v NullableUnauthorizedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnauthorizedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
