/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
)

// checks if the LegacyUpdateAlertRequestPropertiesActionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegacyUpdateAlertRequestPropertiesActionsInner{}

// LegacyUpdateAlertRequestPropertiesActionsInner struct for LegacyUpdateAlertRequestPropertiesActionsInner
type LegacyUpdateAlertRequestPropertiesActionsInner struct {
	// The identifier for the action type.
	ActionTypeId string `json:"actionTypeId"`
	// Grouping actions is recommended for escalations for different types of alert instances. If you don't need this functionality, set it to `default`.
	Group string `json:"group"`
	// The ID of the action saved object to execute.
	Id string `json:"id"`
	// The map to the `params` that the action type will receive. `params` are handled as Mustache templates and passed a default set of context.
	Params map[string]interface{} `json:"params"`
}

type _LegacyUpdateAlertRequestPropertiesActionsInner LegacyUpdateAlertRequestPropertiesActionsInner

// NewLegacyUpdateAlertRequestPropertiesActionsInner instantiates a new LegacyUpdateAlertRequestPropertiesActionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyUpdateAlertRequestPropertiesActionsInner(actionTypeId string, group string, id string, params map[string]interface{}) *LegacyUpdateAlertRequestPropertiesActionsInner {
	this := LegacyUpdateAlertRequestPropertiesActionsInner{}
	this.ActionTypeId = actionTypeId
	this.Group = group
	this.Id = id
	this.Params = params
	return &this
}

// NewLegacyUpdateAlertRequestPropertiesActionsInnerWithDefaults instantiates a new LegacyUpdateAlertRequestPropertiesActionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyUpdateAlertRequestPropertiesActionsInnerWithDefaults() *LegacyUpdateAlertRequestPropertiesActionsInner {
	this := LegacyUpdateAlertRequestPropertiesActionsInner{}
	return &this
}

// GetActionTypeId returns the ActionTypeId field value
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) GetActionTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionTypeId
}

// GetActionTypeIdOk returns a tuple with the ActionTypeId field value
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) GetActionTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionTypeId, true
}

// SetActionTypeId sets field value
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) SetActionTypeId(v string) {
	o.ActionTypeId = v
}

// GetGroup returns the Group field value
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) SetGroup(v string) {
	o.Group = v
}

// GetId returns the Id field value
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) SetId(v string) {
	o.Id = v
}

// GetParams returns the Params field value
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *LegacyUpdateAlertRequestPropertiesActionsInner) SetParams(v map[string]interface{}) {
	o.Params = v
}

func (o LegacyUpdateAlertRequestPropertiesActionsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegacyUpdateAlertRequestPropertiesActionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionTypeId"] = o.ActionTypeId
	toSerialize["group"] = o.Group
	toSerialize["id"] = o.Id
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

func (o *LegacyUpdateAlertRequestPropertiesActionsInner) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actionTypeId",
		"group",
		"id",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegacyUpdateAlertRequestPropertiesActionsInner := _LegacyUpdateAlertRequestPropertiesActionsInner{}

	err = json.Unmarshal(bytes, &varLegacyUpdateAlertRequestPropertiesActionsInner)

	if err != nil {
		return err
	}

	*o = LegacyUpdateAlertRequestPropertiesActionsInner(varLegacyUpdateAlertRequestPropertiesActionsInner)

	return err
}

type NullableLegacyUpdateAlertRequestPropertiesActionsInner struct {
	value *LegacyUpdateAlertRequestPropertiesActionsInner
	isSet bool
}

func (v NullableLegacyUpdateAlertRequestPropertiesActionsInner) Get() *LegacyUpdateAlertRequestPropertiesActionsInner {
	return v.value
}

func (v *NullableLegacyUpdateAlertRequestPropertiesActionsInner) Set(val *LegacyUpdateAlertRequestPropertiesActionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyUpdateAlertRequestPropertiesActionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyUpdateAlertRequestPropertiesActionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyUpdateAlertRequestPropertiesActionsInner(val *LegacyUpdateAlertRequestPropertiesActionsInner) *NullableLegacyUpdateAlertRequestPropertiesActionsInner {
	return &NullableLegacyUpdateAlertRequestPropertiesActionsInner{value: val, isSet: true}
}

func (v NullableLegacyUpdateAlertRequestPropertiesActionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyUpdateAlertRequestPropertiesActionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
