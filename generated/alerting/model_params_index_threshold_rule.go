/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the ParamsIndexThresholdRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParamsIndexThresholdRule{}

// ParamsIndexThresholdRule The parameters for an index threshold rule.
type ParamsIndexThresholdRule struct {
	// The name of the numeric field that is used in the aggregation. This property is required when `aggType` is `avg`, `max`, `min` or `sum`.
	AggField *string  `json:"aggField,omitempty"`
	AggType  *Aggtype `json:"aggType,omitempty"`
	// A KQL expression thats limits the scope of alerts.
	FilterKuery *string        `json:"filterKuery,omitempty"`
	GroupBy     *Groupby       `json:"groupBy,omitempty"`
	Index       []string       `json:"index"`
	TermField   NullableString `json:"termField,omitempty"`
	// This property is required when `groupBy` is `top`. It specifies the number of groups to check against the threshold and therefore limits the number of alerts on high cardinality fields.
	TermSize            *int32              `json:"termSize,omitempty"`
	Threshold           []int32             `json:"threshold"`
	ThresholdComparator Thresholdcomparator `json:"thresholdComparator"`
	// The field that is used to calculate the time window.
	TimeField string `json:"timeField"`
	// The size of the time window (in `timeWindowUnit` units), which determines how far back to search for documents. Generally it should be a value higher than the rule check interval to avoid gaps in detection.
	TimeWindowSize int32          `json:"timeWindowSize"`
	TimeWindowUnit Timewindowunit `json:"timeWindowUnit"`
}

// NewParamsIndexThresholdRule instantiates a new ParamsIndexThresholdRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParamsIndexThresholdRule(index []string, threshold []int32, thresholdComparator Thresholdcomparator, timeField string, timeWindowSize int32, timeWindowUnit Timewindowunit) *ParamsIndexThresholdRule {
	this := ParamsIndexThresholdRule{}
	var aggType Aggtype = COUNT
	this.AggType = &aggType
	var groupBy Groupby = ALL
	this.GroupBy = &groupBy
	this.Index = index
	this.Threshold = threshold
	this.ThresholdComparator = thresholdComparator
	this.TimeField = timeField
	this.TimeWindowSize = timeWindowSize
	this.TimeWindowUnit = timeWindowUnit
	return &this
}

// NewParamsIndexThresholdRuleWithDefaults instantiates a new ParamsIndexThresholdRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParamsIndexThresholdRuleWithDefaults() *ParamsIndexThresholdRule {
	this := ParamsIndexThresholdRule{}
	var aggType Aggtype = COUNT
	this.AggType = &aggType
	var groupBy Groupby = ALL
	this.GroupBy = &groupBy
	return &this
}

// GetAggField returns the AggField field value if set, zero value otherwise.
func (o *ParamsIndexThresholdRule) GetAggField() string {
	if o == nil || IsNil(o.AggField) {
		var ret string
		return ret
	}
	return *o.AggField
}

// GetAggFieldOk returns a tuple with the AggField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetAggFieldOk() (*string, bool) {
	if o == nil || IsNil(o.AggField) {
		return nil, false
	}
	return o.AggField, true
}

// HasAggField returns a boolean if a field has been set.
func (o *ParamsIndexThresholdRule) HasAggField() bool {
	if o != nil && !IsNil(o.AggField) {
		return true
	}

	return false
}

// SetAggField gets a reference to the given string and assigns it to the AggField field.
func (o *ParamsIndexThresholdRule) SetAggField(v string) {
	o.AggField = &v
}

// GetAggType returns the AggType field value if set, zero value otherwise.
func (o *ParamsIndexThresholdRule) GetAggType() Aggtype {
	if o == nil || IsNil(o.AggType) {
		var ret Aggtype
		return ret
	}
	return *o.AggType
}

// GetAggTypeOk returns a tuple with the AggType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetAggTypeOk() (*Aggtype, bool) {
	if o == nil || IsNil(o.AggType) {
		return nil, false
	}
	return o.AggType, true
}

// HasAggType returns a boolean if a field has been set.
func (o *ParamsIndexThresholdRule) HasAggType() bool {
	if o != nil && !IsNil(o.AggType) {
		return true
	}

	return false
}

// SetAggType gets a reference to the given Aggtype and assigns it to the AggType field.
func (o *ParamsIndexThresholdRule) SetAggType(v Aggtype) {
	o.AggType = &v
}

// GetFilterKuery returns the FilterKuery field value if set, zero value otherwise.
func (o *ParamsIndexThresholdRule) GetFilterKuery() string {
	if o == nil || IsNil(o.FilterKuery) {
		var ret string
		return ret
	}
	return *o.FilterKuery
}

// GetFilterKueryOk returns a tuple with the FilterKuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetFilterKueryOk() (*string, bool) {
	if o == nil || IsNil(o.FilterKuery) {
		return nil, false
	}
	return o.FilterKuery, true
}

// HasFilterKuery returns a boolean if a field has been set.
func (o *ParamsIndexThresholdRule) HasFilterKuery() bool {
	if o != nil && !IsNil(o.FilterKuery) {
		return true
	}

	return false
}

// SetFilterKuery gets a reference to the given string and assigns it to the FilterKuery field.
func (o *ParamsIndexThresholdRule) SetFilterKuery(v string) {
	o.FilterKuery = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *ParamsIndexThresholdRule) GetGroupBy() Groupby {
	if o == nil || IsNil(o.GroupBy) {
		var ret Groupby
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetGroupByOk() (*Groupby, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *ParamsIndexThresholdRule) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given Groupby and assigns it to the GroupBy field.
func (o *ParamsIndexThresholdRule) SetGroupBy(v Groupby) {
	o.GroupBy = &v
}

// GetIndex returns the Index field value
func (o *ParamsIndexThresholdRule) GetIndex() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetIndexOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index, true
}

// SetIndex sets field value
func (o *ParamsIndexThresholdRule) SetIndex(v []string) {
	o.Index = v
}

// GetTermField returns the TermField field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParamsIndexThresholdRule) GetTermField() string {
	if o == nil || IsNil(o.TermField.Get()) {
		var ret string
		return ret
	}
	return *o.TermField.Get()
}

// GetTermFieldOk returns a tuple with the TermField field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParamsIndexThresholdRule) GetTermFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TermField.Get(), o.TermField.IsSet()
}

// HasTermField returns a boolean if a field has been set.
func (o *ParamsIndexThresholdRule) HasTermField() bool {
	if o != nil && o.TermField.IsSet() {
		return true
	}

	return false
}

// SetTermField gets a reference to the given NullableString and assigns it to the TermField field.
func (o *ParamsIndexThresholdRule) SetTermField(v string) {
	o.TermField.Set(&v)
}

// SetTermFieldNil sets the value for TermField to be an explicit nil
func (o *ParamsIndexThresholdRule) SetTermFieldNil() {
	o.TermField.Set(nil)
}

// UnsetTermField ensures that no value is present for TermField, not even an explicit nil
func (o *ParamsIndexThresholdRule) UnsetTermField() {
	o.TermField.Unset()
}

// GetTermSize returns the TermSize field value if set, zero value otherwise.
func (o *ParamsIndexThresholdRule) GetTermSize() int32 {
	if o == nil || IsNil(o.TermSize) {
		var ret int32
		return ret
	}
	return *o.TermSize
}

// GetTermSizeOk returns a tuple with the TermSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetTermSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.TermSize) {
		return nil, false
	}
	return o.TermSize, true
}

// HasTermSize returns a boolean if a field has been set.
func (o *ParamsIndexThresholdRule) HasTermSize() bool {
	if o != nil && !IsNil(o.TermSize) {
		return true
	}

	return false
}

// SetTermSize gets a reference to the given int32 and assigns it to the TermSize field.
func (o *ParamsIndexThresholdRule) SetTermSize(v int32) {
	o.TermSize = &v
}

// GetThreshold returns the Threshold field value
func (o *ParamsIndexThresholdRule) GetThreshold() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetThresholdOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Threshold, true
}

// SetThreshold sets field value
func (o *ParamsIndexThresholdRule) SetThreshold(v []int32) {
	o.Threshold = v
}

// GetThresholdComparator returns the ThresholdComparator field value
func (o *ParamsIndexThresholdRule) GetThresholdComparator() Thresholdcomparator {
	if o == nil {
		var ret Thresholdcomparator
		return ret
	}

	return o.ThresholdComparator
}

// GetThresholdComparatorOk returns a tuple with the ThresholdComparator field value
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetThresholdComparatorOk() (*Thresholdcomparator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThresholdComparator, true
}

// SetThresholdComparator sets field value
func (o *ParamsIndexThresholdRule) SetThresholdComparator(v Thresholdcomparator) {
	o.ThresholdComparator = v
}

// GetTimeField returns the TimeField field value
func (o *ParamsIndexThresholdRule) GetTimeField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeField
}

// GetTimeFieldOk returns a tuple with the TimeField field value
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetTimeFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeField, true
}

// SetTimeField sets field value
func (o *ParamsIndexThresholdRule) SetTimeField(v string) {
	o.TimeField = v
}

// GetTimeWindowSize returns the TimeWindowSize field value
func (o *ParamsIndexThresholdRule) GetTimeWindowSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimeWindowSize
}

// GetTimeWindowSizeOk returns a tuple with the TimeWindowSize field value
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetTimeWindowSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeWindowSize, true
}

// SetTimeWindowSize sets field value
func (o *ParamsIndexThresholdRule) SetTimeWindowSize(v int32) {
	o.TimeWindowSize = v
}

// GetTimeWindowUnit returns the TimeWindowUnit field value
func (o *ParamsIndexThresholdRule) GetTimeWindowUnit() Timewindowunit {
	if o == nil {
		var ret Timewindowunit
		return ret
	}

	return o.TimeWindowUnit
}

// GetTimeWindowUnitOk returns a tuple with the TimeWindowUnit field value
// and a boolean to check if the value has been set.
func (o *ParamsIndexThresholdRule) GetTimeWindowUnitOk() (*Timewindowunit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeWindowUnit, true
}

// SetTimeWindowUnit sets field value
func (o *ParamsIndexThresholdRule) SetTimeWindowUnit(v Timewindowunit) {
	o.TimeWindowUnit = v
}

func (o ParamsIndexThresholdRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParamsIndexThresholdRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggField) {
		toSerialize["aggField"] = o.AggField
	}
	if !IsNil(o.AggType) {
		toSerialize["aggType"] = o.AggType
	}
	if !IsNil(o.FilterKuery) {
		toSerialize["filterKuery"] = o.FilterKuery
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	toSerialize["index"] = o.Index
	if o.TermField.IsSet() {
		toSerialize["termField"] = o.TermField.Get()
	}
	if !IsNil(o.TermSize) {
		toSerialize["termSize"] = o.TermSize
	}
	toSerialize["threshold"] = o.Threshold
	toSerialize["thresholdComparator"] = o.ThresholdComparator
	toSerialize["timeField"] = o.TimeField
	toSerialize["timeWindowSize"] = o.TimeWindowSize
	toSerialize["timeWindowUnit"] = o.TimeWindowUnit
	return toSerialize, nil
}

type NullableParamsIndexThresholdRule struct {
	value *ParamsIndexThresholdRule
	isSet bool
}

func (v NullableParamsIndexThresholdRule) Get() *ParamsIndexThresholdRule {
	return v.value
}

func (v *NullableParamsIndexThresholdRule) Set(val *ParamsIndexThresholdRule) {
	v.value = val
	v.isSet = true
}

func (v NullableParamsIndexThresholdRule) IsSet() bool {
	return v.isSet
}

func (v *NullableParamsIndexThresholdRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamsIndexThresholdRule(val *ParamsIndexThresholdRule) *NullableParamsIndexThresholdRule {
	return &NullableParamsIndexThresholdRule{value: val, isSet: true}
}

func (v NullableParamsIndexThresholdRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamsIndexThresholdRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
