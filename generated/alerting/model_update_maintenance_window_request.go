/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the UpdateMaintenanceWindowRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMaintenanceWindowRequest{}

// UpdateMaintenanceWindowRequest struct for UpdateMaintenanceWindowRequest
type UpdateMaintenanceWindowRequest struct {
	// Whether the current maintenance window is enabled. Disabled maintenance windows do not suppress notifications.
	Enabled  *bool                                   `json:"enabled,omitempty"`
	Schedule *CreateMaintenanceWindowRequestSchedule `json:"schedule,omitempty"`
	Scope    *CreateMaintenanceWindowRequestScope    `json:"scope,omitempty"`
	// The name of the maintenance window. While this name does not have to be unique, a distinctive name can help you identify a specific maintenance window.
	Title *string `json:"title,omitempty"`
}

// NewUpdateMaintenanceWindowRequest instantiates a new UpdateMaintenanceWindowRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMaintenanceWindowRequest() *UpdateMaintenanceWindowRequest {
	this := UpdateMaintenanceWindowRequest{}
	return &this
}

// NewUpdateMaintenanceWindowRequestWithDefaults instantiates a new UpdateMaintenanceWindowRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMaintenanceWindowRequestWithDefaults() *UpdateMaintenanceWindowRequest {
	this := UpdateMaintenanceWindowRequest{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateMaintenanceWindowRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMaintenanceWindowRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateMaintenanceWindowRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateMaintenanceWindowRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *UpdateMaintenanceWindowRequest) GetSchedule() CreateMaintenanceWindowRequestSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret CreateMaintenanceWindowRequestSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMaintenanceWindowRequest) GetScheduleOk() (*CreateMaintenanceWindowRequestSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *UpdateMaintenanceWindowRequest) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given CreateMaintenanceWindowRequestSchedule and assigns it to the Schedule field.
func (o *UpdateMaintenanceWindowRequest) SetSchedule(v CreateMaintenanceWindowRequestSchedule) {
	o.Schedule = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *UpdateMaintenanceWindowRequest) GetScope() CreateMaintenanceWindowRequestScope {
	if o == nil || IsNil(o.Scope) {
		var ret CreateMaintenanceWindowRequestScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMaintenanceWindowRequest) GetScopeOk() (*CreateMaintenanceWindowRequestScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *UpdateMaintenanceWindowRequest) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given CreateMaintenanceWindowRequestScope and assigns it to the Scope field.
func (o *UpdateMaintenanceWindowRequest) SetScope(v CreateMaintenanceWindowRequestScope) {
	o.Scope = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UpdateMaintenanceWindowRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMaintenanceWindowRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateMaintenanceWindowRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UpdateMaintenanceWindowRequest) SetTitle(v string) {
	o.Title = &v
}

func (o UpdateMaintenanceWindowRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMaintenanceWindowRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableUpdateMaintenanceWindowRequest struct {
	value *UpdateMaintenanceWindowRequest
	isSet bool
}

func (v NullableUpdateMaintenanceWindowRequest) Get() *UpdateMaintenanceWindowRequest {
	return v.value
}

func (v *NullableUpdateMaintenanceWindowRequest) Set(val *UpdateMaintenanceWindowRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMaintenanceWindowRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMaintenanceWindowRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMaintenanceWindowRequest(val *UpdateMaintenanceWindowRequest) *NullableUpdateMaintenanceWindowRequest {
	return &NullableUpdateMaintenanceWindowRequest{value: val, isSet: true}
}

func (v NullableUpdateMaintenanceWindowRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMaintenanceWindowRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
