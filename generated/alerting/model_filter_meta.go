/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the FilterMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterMeta{}

// FilterMeta struct for FilterMeta
type FilterMeta struct {
	Alias        NullableString         `json:"alias,omitempty"`
	ControlledBy *string                `json:"controlledBy,omitempty"`
	Disabled     *bool                  `json:"disabled,omitempty"`
	Field        *string                `json:"field,omitempty"`
	Group        *string                `json:"group,omitempty"`
	Index        *string                `json:"index,omitempty"`
	IsMultiIndex *bool                  `json:"isMultiIndex,omitempty"`
	Key          *string                `json:"key,omitempty"`
	Negate       *bool                  `json:"negate,omitempty"`
	Params       map[string]interface{} `json:"params,omitempty"`
	Type         *string                `json:"type,omitempty"`
	Value        *string                `json:"value,omitempty"`
}

// NewFilterMeta instantiates a new FilterMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterMeta() *FilterMeta {
	this := FilterMeta{}
	return &this
}

// NewFilterMetaWithDefaults instantiates a new FilterMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterMetaWithDefaults() *FilterMeta {
	this := FilterMeta{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterMeta) GetAlias() string {
	if o == nil || IsNil(o.Alias.Get()) {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterMeta) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *FilterMeta) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *FilterMeta) SetAlias(v string) {
	o.Alias.Set(&v)
}

// SetAliasNil sets the value for Alias to be an explicit nil
func (o *FilterMeta) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *FilterMeta) UnsetAlias() {
	o.Alias.Unset()
}

// GetControlledBy returns the ControlledBy field value if set, zero value otherwise.
func (o *FilterMeta) GetControlledBy() string {
	if o == nil || IsNil(o.ControlledBy) {
		var ret string
		return ret
	}
	return *o.ControlledBy
}

// GetControlledByOk returns a tuple with the ControlledBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetControlledByOk() (*string, bool) {
	if o == nil || IsNil(o.ControlledBy) {
		return nil, false
	}
	return o.ControlledBy, true
}

// HasControlledBy returns a boolean if a field has been set.
func (o *FilterMeta) HasControlledBy() bool {
	if o != nil && !IsNil(o.ControlledBy) {
		return true
	}

	return false
}

// SetControlledBy gets a reference to the given string and assigns it to the ControlledBy field.
func (o *FilterMeta) SetControlledBy(v string) {
	o.ControlledBy = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *FilterMeta) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *FilterMeta) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *FilterMeta) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *FilterMeta) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *FilterMeta) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *FilterMeta) SetField(v string) {
	o.Field = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *FilterMeta) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *FilterMeta) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *FilterMeta) SetGroup(v string) {
	o.Group = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *FilterMeta) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *FilterMeta) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *FilterMeta) SetIndex(v string) {
	o.Index = &v
}

// GetIsMultiIndex returns the IsMultiIndex field value if set, zero value otherwise.
func (o *FilterMeta) GetIsMultiIndex() bool {
	if o == nil || IsNil(o.IsMultiIndex) {
		var ret bool
		return ret
	}
	return *o.IsMultiIndex
}

// GetIsMultiIndexOk returns a tuple with the IsMultiIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetIsMultiIndexOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMultiIndex) {
		return nil, false
	}
	return o.IsMultiIndex, true
}

// HasIsMultiIndex returns a boolean if a field has been set.
func (o *FilterMeta) HasIsMultiIndex() bool {
	if o != nil && !IsNil(o.IsMultiIndex) {
		return true
	}

	return false
}

// SetIsMultiIndex gets a reference to the given bool and assigns it to the IsMultiIndex field.
func (o *FilterMeta) SetIsMultiIndex(v bool) {
	o.IsMultiIndex = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *FilterMeta) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *FilterMeta) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *FilterMeta) SetKey(v string) {
	o.Key = &v
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *FilterMeta) GetNegate() bool {
	if o == nil || IsNil(o.Negate) {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetNegateOk() (*bool, bool) {
	if o == nil || IsNil(o.Negate) {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *FilterMeta) HasNegate() bool {
	if o != nil && !IsNil(o.Negate) {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *FilterMeta) SetNegate(v bool) {
	o.Negate = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *FilterMeta) GetParams() map[string]interface{} {
	if o == nil || IsNil(o.Params) {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *FilterMeta) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *FilterMeta) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FilterMeta) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FilterMeta) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FilterMeta) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FilterMeta) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterMeta) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FilterMeta) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FilterMeta) SetValue(v string) {
	o.Value = &v
}

func (o FilterMeta) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if !IsNil(o.ControlledBy) {
		toSerialize["controlledBy"] = o.ControlledBy
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.IsMultiIndex) {
		toSerialize["isMultiIndex"] = o.IsMultiIndex
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Negate) {
		toSerialize["negate"] = o.Negate
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableFilterMeta struct {
	value *FilterMeta
	isSet bool
}

func (v NullableFilterMeta) Get() *FilterMeta {
	return v.value
}

func (v *NullableFilterMeta) Set(val *FilterMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterMeta(val *FilterMeta) *NullableFilterMeta {
	return &NullableFilterMeta{value: val, isSet: true}
}

func (v NullableFilterMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
