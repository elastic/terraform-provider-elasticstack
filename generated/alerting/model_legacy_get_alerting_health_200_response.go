/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the LegacyGetAlertingHealth200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegacyGetAlertingHealth200Response{}

// LegacyGetAlertingHealth200Response struct for LegacyGetAlertingHealth200Response
type LegacyGetAlertingHealth200Response struct {
	AlertingFrameworkHealth *LegacyGetAlertingHealth200ResponseAlertingFrameworkHealth `json:"alertingFrameworkHealth,omitempty"`
	// If `false`, the encrypted saved object plugin does not have a permanent encryption key.
	HasPermanentEncryptionKey *bool `json:"hasPermanentEncryptionKey,omitempty"`
	// If `false`, security is enabled but TLS is not.
	IsSufficientlySecure *bool `json:"isSufficientlySecure,omitempty"`
}

// NewLegacyGetAlertingHealth200Response instantiates a new LegacyGetAlertingHealth200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyGetAlertingHealth200Response() *LegacyGetAlertingHealth200Response {
	this := LegacyGetAlertingHealth200Response{}
	return &this
}

// NewLegacyGetAlertingHealth200ResponseWithDefaults instantiates a new LegacyGetAlertingHealth200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyGetAlertingHealth200ResponseWithDefaults() *LegacyGetAlertingHealth200Response {
	this := LegacyGetAlertingHealth200Response{}
	return &this
}

// GetAlertingFrameworkHealth returns the AlertingFrameworkHealth field value if set, zero value otherwise.
func (o *LegacyGetAlertingHealth200Response) GetAlertingFrameworkHealth() LegacyGetAlertingHealth200ResponseAlertingFrameworkHealth {
	if o == nil || IsNil(o.AlertingFrameworkHealth) {
		var ret LegacyGetAlertingHealth200ResponseAlertingFrameworkHealth
		return ret
	}
	return *o.AlertingFrameworkHealth
}

// GetAlertingFrameworkHealthOk returns a tuple with the AlertingFrameworkHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyGetAlertingHealth200Response) GetAlertingFrameworkHealthOk() (*LegacyGetAlertingHealth200ResponseAlertingFrameworkHealth, bool) {
	if o == nil || IsNil(o.AlertingFrameworkHealth) {
		return nil, false
	}
	return o.AlertingFrameworkHealth, true
}

// HasAlertingFrameworkHealth returns a boolean if a field has been set.
func (o *LegacyGetAlertingHealth200Response) HasAlertingFrameworkHealth() bool {
	if o != nil && !IsNil(o.AlertingFrameworkHealth) {
		return true
	}

	return false
}

// SetAlertingFrameworkHealth gets a reference to the given LegacyGetAlertingHealth200ResponseAlertingFrameworkHealth and assigns it to the AlertingFrameworkHealth field.
func (o *LegacyGetAlertingHealth200Response) SetAlertingFrameworkHealth(v LegacyGetAlertingHealth200ResponseAlertingFrameworkHealth) {
	o.AlertingFrameworkHealth = &v
}

// GetHasPermanentEncryptionKey returns the HasPermanentEncryptionKey field value if set, zero value otherwise.
func (o *LegacyGetAlertingHealth200Response) GetHasPermanentEncryptionKey() bool {
	if o == nil || IsNil(o.HasPermanentEncryptionKey) {
		var ret bool
		return ret
	}
	return *o.HasPermanentEncryptionKey
}

// GetHasPermanentEncryptionKeyOk returns a tuple with the HasPermanentEncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyGetAlertingHealth200Response) GetHasPermanentEncryptionKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPermanentEncryptionKey) {
		return nil, false
	}
	return o.HasPermanentEncryptionKey, true
}

// HasHasPermanentEncryptionKey returns a boolean if a field has been set.
func (o *LegacyGetAlertingHealth200Response) HasHasPermanentEncryptionKey() bool {
	if o != nil && !IsNil(o.HasPermanentEncryptionKey) {
		return true
	}

	return false
}

// SetHasPermanentEncryptionKey gets a reference to the given bool and assigns it to the HasPermanentEncryptionKey field.
func (o *LegacyGetAlertingHealth200Response) SetHasPermanentEncryptionKey(v bool) {
	o.HasPermanentEncryptionKey = &v
}

// GetIsSufficientlySecure returns the IsSufficientlySecure field value if set, zero value otherwise.
func (o *LegacyGetAlertingHealth200Response) GetIsSufficientlySecure() bool {
	if o == nil || IsNil(o.IsSufficientlySecure) {
		var ret bool
		return ret
	}
	return *o.IsSufficientlySecure
}

// GetIsSufficientlySecureOk returns a tuple with the IsSufficientlySecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyGetAlertingHealth200Response) GetIsSufficientlySecureOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSufficientlySecure) {
		return nil, false
	}
	return o.IsSufficientlySecure, true
}

// HasIsSufficientlySecure returns a boolean if a field has been set.
func (o *LegacyGetAlertingHealth200Response) HasIsSufficientlySecure() bool {
	if o != nil && !IsNil(o.IsSufficientlySecure) {
		return true
	}

	return false
}

// SetIsSufficientlySecure gets a reference to the given bool and assigns it to the IsSufficientlySecure field.
func (o *LegacyGetAlertingHealth200Response) SetIsSufficientlySecure(v bool) {
	o.IsSufficientlySecure = &v
}

func (o LegacyGetAlertingHealth200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegacyGetAlertingHealth200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertingFrameworkHealth) {
		toSerialize["alertingFrameworkHealth"] = o.AlertingFrameworkHealth
	}
	if !IsNil(o.HasPermanentEncryptionKey) {
		toSerialize["hasPermanentEncryptionKey"] = o.HasPermanentEncryptionKey
	}
	if !IsNil(o.IsSufficientlySecure) {
		toSerialize["isSufficientlySecure"] = o.IsSufficientlySecure
	}
	return toSerialize, nil
}

type NullableLegacyGetAlertingHealth200Response struct {
	value *LegacyGetAlertingHealth200Response
	isSet bool
}

func (v NullableLegacyGetAlertingHealth200Response) Get() *LegacyGetAlertingHealth200Response {
	return v.value
}

func (v *NullableLegacyGetAlertingHealth200Response) Set(val *LegacyGetAlertingHealth200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyGetAlertingHealth200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyGetAlertingHealth200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyGetAlertingHealth200Response(val *LegacyGetAlertingHealth200Response) *NullableLegacyGetAlertingHealth200Response {
	return &NullableLegacyGetAlertingHealth200Response{value: val, isSet: true}
}

func (v NullableLegacyGetAlertingHealth200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyGetAlertingHealth200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
