/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
)

// Groupby Indicates whether the aggregation is applied over all documents (`all`) or split into groups (`top`) using a grouping field (`termField`). If grouping is used, an alert will be created for each group when it exceeds the threshold; only the top groups (up to `termSize` number of groups) are checked.
type Groupby string

// List of groupby
const (
	ALL Groupby = "all"
	TOP Groupby = "top"
)

// All allowed values of Groupby enum
var AllowedGroupbyEnumValues = []Groupby{
	"all",
	"top",
}

func (v *Groupby) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Groupby(value)
	for _, existing := range AllowedGroupbyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Groupby", value)
}

// NewGroupbyFromValue returns a pointer to a valid Groupby
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupbyFromValue(v string) (*Groupby, error) {
	ev := Groupby(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Groupby: valid values are %v", v, AllowedGroupbyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Groupby) IsValid() bool {
	for _, existing := range AllowedGroupbyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to groupby value
func (v Groupby) Ptr() *Groupby {
	return &v
}

type NullableGroupby struct {
	value *Groupby
	isSet bool
}

func (v NullableGroupby) Get() *Groupby {
	return v.value
}

func (v *NullableGroupby) Set(val *Groupby) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupby) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupby) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupby(val *Groupby) *NullableGroupby {
	return &NullableGroupby{value: val, isSet: true}
}

func (v NullableGroupby) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupby) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
