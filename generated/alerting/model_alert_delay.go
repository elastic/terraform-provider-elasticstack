/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the AlertDelay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertDelay{}

// AlertDelay Indicates that an alert occurs only when the specified number of consecutive runs met the rule conditions.
type AlertDelay struct {
	// The number of consecutive runs that must meet the rule conditions.
	Active float32 `json:"active"`
}

// NewAlertDelay instantiates a new AlertDelay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertDelay(active float32) *AlertDelay {
	this := AlertDelay{}
	this.Active = active
	return &this
}

// NewAlertDelayWithDefaults instantiates a new AlertDelay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertDelayWithDefaults() *AlertDelay {
	this := AlertDelay{}
	return &this
}

// GetActive returns the Active field value
func (o *AlertDelay) GetActive() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *AlertDelay) GetActiveOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *AlertDelay) SetActive(v float32) {
	o.Active = v
}

func (o AlertDelay) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertDelay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	return toSerialize, nil
}

type NullableAlertDelay struct {
	value *AlertDelay
	isSet bool
}

func (v NullableAlertDelay) Get() *AlertDelay {
	return v.value
}

func (v *NullableAlertDelay) Set(val *AlertDelay) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertDelay) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertDelay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertDelay(val *AlertDelay) *NullableAlertDelay {
	return &NullableAlertDelay{value: val, isSet: true}
}

func (v NullableAlertDelay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertDelay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
