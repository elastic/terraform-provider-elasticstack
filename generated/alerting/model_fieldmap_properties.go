/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the FieldmapProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldmapProperties{}

// FieldmapProperties struct for FieldmapProperties
type FieldmapProperties struct {
	// Indicates whether the field is an array.
	Array *bool `json:"array,omitempty"`
	// Indicates whether it is a dynamic field mapping.
	Dynamic *bool `json:"dynamic,omitempty"`
	// Indicates the format of the field. For example, if the `type` is `date_range`, the `format` can be `epoch_millis||strict_date_optional_time`.
	Format *string `json:"format,omitempty"`
	// Specifies the maximum length of a string field. Longer strings are not indexed or stored.
	IgnoreAbove *int32 `json:"ignore_above,omitempty"`
	// Indicates whether field values are indexed.
	Index *bool `json:"index,omitempty"`
	// TBD
	Path *string `json:"path,omitempty"`
	// Details about the object properties. This property is applicable when `type` is `object`.
	Properties map[string]FieldmapPropertiesPropertiesValue `json:"properties,omitempty"`
	// Indicates whether the field is required.
	Required *bool `json:"required,omitempty"`
	// The scaling factor to use when encoding values. This property is applicable when `type` is `scaled_float`. Values will be multiplied by this factor at index time and rounded to the closest long value.
	ScalingFactor *int32 `json:"scaling_factor,omitempty"`
	// Specifies the data type for the field.
	Type *string `json:"type,omitempty"`
}

// NewFieldmapProperties instantiates a new FieldmapProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldmapProperties() *FieldmapProperties {
	this := FieldmapProperties{}
	return &this
}

// NewFieldmapPropertiesWithDefaults instantiates a new FieldmapProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldmapPropertiesWithDefaults() *FieldmapProperties {
	this := FieldmapProperties{}
	return &this
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *FieldmapProperties) GetArray() bool {
	if o == nil || IsNil(o.Array) {
		var ret bool
		return ret
	}
	return *o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetArrayOk() (*bool, bool) {
	if o == nil || IsNil(o.Array) {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *FieldmapProperties) HasArray() bool {
	if o != nil && !IsNil(o.Array) {
		return true
	}

	return false
}

// SetArray gets a reference to the given bool and assigns it to the Array field.
func (o *FieldmapProperties) SetArray(v bool) {
	o.Array = &v
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *FieldmapProperties) GetDynamic() bool {
	if o == nil || IsNil(o.Dynamic) {
		var ret bool
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetDynamicOk() (*bool, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *FieldmapProperties) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given bool and assigns it to the Dynamic field.
func (o *FieldmapProperties) SetDynamic(v bool) {
	o.Dynamic = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *FieldmapProperties) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *FieldmapProperties) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *FieldmapProperties) SetFormat(v string) {
	o.Format = &v
}

// GetIgnoreAbove returns the IgnoreAbove field value if set, zero value otherwise.
func (o *FieldmapProperties) GetIgnoreAbove() int32 {
	if o == nil || IsNil(o.IgnoreAbove) {
		var ret int32
		return ret
	}
	return *o.IgnoreAbove
}

// GetIgnoreAboveOk returns a tuple with the IgnoreAbove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetIgnoreAboveOk() (*int32, bool) {
	if o == nil || IsNil(o.IgnoreAbove) {
		return nil, false
	}
	return o.IgnoreAbove, true
}

// HasIgnoreAbove returns a boolean if a field has been set.
func (o *FieldmapProperties) HasIgnoreAbove() bool {
	if o != nil && !IsNil(o.IgnoreAbove) {
		return true
	}

	return false
}

// SetIgnoreAbove gets a reference to the given int32 and assigns it to the IgnoreAbove field.
func (o *FieldmapProperties) SetIgnoreAbove(v int32) {
	o.IgnoreAbove = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *FieldmapProperties) GetIndex() bool {
	if o == nil || IsNil(o.Index) {
		var ret bool
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetIndexOk() (*bool, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *FieldmapProperties) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given bool and assigns it to the Index field.
func (o *FieldmapProperties) SetIndex(v bool) {
	o.Index = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FieldmapProperties) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FieldmapProperties) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FieldmapProperties) SetPath(v string) {
	o.Path = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldmapProperties) GetProperties() map[string]FieldmapPropertiesPropertiesValue {
	if o == nil {
		var ret map[string]FieldmapPropertiesPropertiesValue
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldmapProperties) GetPropertiesOk() (*map[string]FieldmapPropertiesPropertiesValue, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return &o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *FieldmapProperties) HasProperties() bool {
	if o != nil && IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]FieldmapPropertiesPropertiesValue and assigns it to the Properties field.
func (o *FieldmapProperties) SetProperties(v map[string]FieldmapPropertiesPropertiesValue) {
	o.Properties = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *FieldmapProperties) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *FieldmapProperties) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *FieldmapProperties) SetRequired(v bool) {
	o.Required = &v
}

// GetScalingFactor returns the ScalingFactor field value if set, zero value otherwise.
func (o *FieldmapProperties) GetScalingFactor() int32 {
	if o == nil || IsNil(o.ScalingFactor) {
		var ret int32
		return ret
	}
	return *o.ScalingFactor
}

// GetScalingFactorOk returns a tuple with the ScalingFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetScalingFactorOk() (*int32, bool) {
	if o == nil || IsNil(o.ScalingFactor) {
		return nil, false
	}
	return o.ScalingFactor, true
}

// HasScalingFactor returns a boolean if a field has been set.
func (o *FieldmapProperties) HasScalingFactor() bool {
	if o != nil && !IsNil(o.ScalingFactor) {
		return true
	}

	return false
}

// SetScalingFactor gets a reference to the given int32 and assigns it to the ScalingFactor field.
func (o *FieldmapProperties) SetScalingFactor(v int32) {
	o.ScalingFactor = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FieldmapProperties) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldmapProperties) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FieldmapProperties) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FieldmapProperties) SetType(v string) {
	o.Type = &v
}

func (o FieldmapProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldmapProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Array) {
		toSerialize["array"] = o.Array
	}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.IgnoreAbove) {
		toSerialize["ignore_above"] = o.IgnoreAbove
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.ScalingFactor) {
		toSerialize["scaling_factor"] = o.ScalingFactor
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableFieldmapProperties struct {
	value *FieldmapProperties
	isSet bool
}

func (v NullableFieldmapProperties) Get() *FieldmapProperties {
	return v.value
}

func (v *NullableFieldmapProperties) Set(val *FieldmapProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldmapProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldmapProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldmapProperties(val *FieldmapProperties) *NullableFieldmapProperties {
	return &NullableFieldmapProperties{value: val, isSet: true}
}

func (v NullableFieldmapProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldmapProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
