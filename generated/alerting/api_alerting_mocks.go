// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/alerting/api_alerting.go
//
// Generated by this command:
//
//	mockgen -destination=../generated/alerting/api_alerting_mocks.go -package=alerting -source ../generated/alerting/api_alerting.go AlertingAPI
//

// Package alerting is a generated GoMock package.
package alerting

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAlertingAPI is a mock of AlertingAPI interface.
type MockAlertingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAlertingAPIMockRecorder
}

// MockAlertingAPIMockRecorder is the mock recorder for MockAlertingAPI.
type MockAlertingAPIMockRecorder struct {
	mock *MockAlertingAPI
}

// NewMockAlertingAPI creates a new mock instance.
func NewMockAlertingAPI(ctrl *gomock.Controller) *MockAlertingAPI {
	mock := &MockAlertingAPI{ctrl: ctrl}
	mock.recorder = &MockAlertingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertingAPI) EXPECT() *MockAlertingAPIMockRecorder {
	return m.recorder
}

// CreateRule mocks base method.
func (m *MockAlertingAPI) CreateRule(ctx context.Context, spaceId any) ApiCreateRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", ctx, spaceId)
	ret0, _ := ret[0].(ApiCreateRuleRequest)
	return ret0
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockAlertingAPIMockRecorder) CreateRule(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockAlertingAPI)(nil).CreateRule), ctx, spaceId)
}

// CreateRuleExecute mocks base method.
func (m *MockAlertingAPI) CreateRuleExecute(r ApiCreateRuleRequest) (*RuleResponseProperties, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleExecute", r)
	ret0, _ := ret[0].(*RuleResponseProperties)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRuleExecute indicates an expected call of CreateRuleExecute.
func (mr *MockAlertingAPIMockRecorder) CreateRuleExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleExecute", reflect.TypeOf((*MockAlertingAPI)(nil).CreateRuleExecute), r)
}

// CreateRuleId mocks base method.
func (m *MockAlertingAPI) CreateRuleId(ctx context.Context, spaceId any, ruleId string) ApiCreateRuleIdRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleId", ctx, spaceId, ruleId)
	ret0, _ := ret[0].(ApiCreateRuleIdRequest)
	return ret0
}

// CreateRuleId indicates an expected call of CreateRuleId.
func (mr *MockAlertingAPIMockRecorder) CreateRuleId(ctx, spaceId, ruleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleId", reflect.TypeOf((*MockAlertingAPI)(nil).CreateRuleId), ctx, spaceId, ruleId)
}

// CreateRuleIdExecute mocks base method.
func (m *MockAlertingAPI) CreateRuleIdExecute(r ApiCreateRuleIdRequest) (*RuleResponseProperties, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleIdExecute", r)
	ret0, _ := ret[0].(*RuleResponseProperties)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRuleIdExecute indicates an expected call of CreateRuleIdExecute.
func (mr *MockAlertingAPIMockRecorder) CreateRuleIdExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleIdExecute", reflect.TypeOf((*MockAlertingAPI)(nil).CreateRuleIdExecute), r)
}

// DeleteRule mocks base method.
func (m *MockAlertingAPI) DeleteRule(ctx context.Context, ruleId, spaceId any) ApiDeleteRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", ctx, ruleId, spaceId)
	ret0, _ := ret[0].(ApiDeleteRuleRequest)
	return ret0
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockAlertingAPIMockRecorder) DeleteRule(ctx, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockAlertingAPI)(nil).DeleteRule), ctx, ruleId, spaceId)
}

// DeleteRuleExecute mocks base method.
func (m *MockAlertingAPI) DeleteRuleExecute(r ApiDeleteRuleRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleExecute indicates an expected call of DeleteRuleExecute.
func (mr *MockAlertingAPIMockRecorder) DeleteRuleExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleExecute", reflect.TypeOf((*MockAlertingAPI)(nil).DeleteRuleExecute), r)
}

// DisableRule mocks base method.
func (m *MockAlertingAPI) DisableRule(ctx context.Context, ruleId, spaceId any) ApiDisableRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRule", ctx, ruleId, spaceId)
	ret0, _ := ret[0].(ApiDisableRuleRequest)
	return ret0
}

// DisableRule indicates an expected call of DisableRule.
func (mr *MockAlertingAPIMockRecorder) DisableRule(ctx, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRule", reflect.TypeOf((*MockAlertingAPI)(nil).DisableRule), ctx, ruleId, spaceId)
}

// DisableRuleExecute mocks base method.
func (m *MockAlertingAPI) DisableRuleExecute(r ApiDisableRuleRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRuleExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableRuleExecute indicates an expected call of DisableRuleExecute.
func (mr *MockAlertingAPIMockRecorder) DisableRuleExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRuleExecute", reflect.TypeOf((*MockAlertingAPI)(nil).DisableRuleExecute), r)
}

// EnableRule mocks base method.
func (m *MockAlertingAPI) EnableRule(ctx context.Context, ruleId, spaceId any) ApiEnableRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRule", ctx, ruleId, spaceId)
	ret0, _ := ret[0].(ApiEnableRuleRequest)
	return ret0
}

// EnableRule indicates an expected call of EnableRule.
func (mr *MockAlertingAPIMockRecorder) EnableRule(ctx, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRule", reflect.TypeOf((*MockAlertingAPI)(nil).EnableRule), ctx, ruleId, spaceId)
}

// EnableRuleExecute mocks base method.
func (m *MockAlertingAPI) EnableRuleExecute(r ApiEnableRuleRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRuleExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRuleExecute indicates an expected call of EnableRuleExecute.
func (mr *MockAlertingAPIMockRecorder) EnableRuleExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRuleExecute", reflect.TypeOf((*MockAlertingAPI)(nil).EnableRuleExecute), r)
}

// FindRules mocks base method.
func (m *MockAlertingAPI) FindRules(ctx context.Context, spaceId any) ApiFindRulesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRules", ctx, spaceId)
	ret0, _ := ret[0].(ApiFindRulesRequest)
	return ret0
}

// FindRules indicates an expected call of FindRules.
func (mr *MockAlertingAPIMockRecorder) FindRules(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRules", reflect.TypeOf((*MockAlertingAPI)(nil).FindRules), ctx, spaceId)
}

// FindRulesExecute mocks base method.
func (m *MockAlertingAPI) FindRulesExecute(r ApiFindRulesRequest) (*FindRules200Response, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRulesExecute", r)
	ret0, _ := ret[0].(*FindRules200Response)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindRulesExecute indicates an expected call of FindRulesExecute.
func (mr *MockAlertingAPIMockRecorder) FindRulesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRulesExecute", reflect.TypeOf((*MockAlertingAPI)(nil).FindRulesExecute), r)
}

// GetAlertingHealth mocks base method.
func (m *MockAlertingAPI) GetAlertingHealth(ctx context.Context, spaceId any) ApiGetAlertingHealthRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertingHealth", ctx, spaceId)
	ret0, _ := ret[0].(ApiGetAlertingHealthRequest)
	return ret0
}

// GetAlertingHealth indicates an expected call of GetAlertingHealth.
func (mr *MockAlertingAPIMockRecorder) GetAlertingHealth(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertingHealth", reflect.TypeOf((*MockAlertingAPI)(nil).GetAlertingHealth), ctx, spaceId)
}

// GetAlertingHealthExecute mocks base method.
func (m *MockAlertingAPI) GetAlertingHealthExecute(r ApiGetAlertingHealthRequest) (*GetAlertingHealth200Response, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertingHealthExecute", r)
	ret0, _ := ret[0].(*GetAlertingHealth200Response)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlertingHealthExecute indicates an expected call of GetAlertingHealthExecute.
func (mr *MockAlertingAPIMockRecorder) GetAlertingHealthExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertingHealthExecute", reflect.TypeOf((*MockAlertingAPI)(nil).GetAlertingHealthExecute), r)
}

// GetRule mocks base method.
func (m *MockAlertingAPI) GetRule(ctx context.Context, ruleId, spaceId any) ApiGetRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", ctx, ruleId, spaceId)
	ret0, _ := ret[0].(ApiGetRuleRequest)
	return ret0
}

// GetRule indicates an expected call of GetRule.
func (mr *MockAlertingAPIMockRecorder) GetRule(ctx, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockAlertingAPI)(nil).GetRule), ctx, ruleId, spaceId)
}

// GetRuleExecute mocks base method.
func (m *MockAlertingAPI) GetRuleExecute(r ApiGetRuleRequest) (*RuleResponseProperties, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleExecute", r)
	ret0, _ := ret[0].(*RuleResponseProperties)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRuleExecute indicates an expected call of GetRuleExecute.
func (mr *MockAlertingAPIMockRecorder) GetRuleExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleExecute", reflect.TypeOf((*MockAlertingAPI)(nil).GetRuleExecute), r)
}

// GetRuleTypes mocks base method.
func (m *MockAlertingAPI) GetRuleTypes(ctx context.Context, spaceId any) ApiGetRuleTypesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleTypes", ctx, spaceId)
	ret0, _ := ret[0].(ApiGetRuleTypesRequest)
	return ret0
}

// GetRuleTypes indicates an expected call of GetRuleTypes.
func (mr *MockAlertingAPIMockRecorder) GetRuleTypes(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleTypes", reflect.TypeOf((*MockAlertingAPI)(nil).GetRuleTypes), ctx, spaceId)
}

// GetRuleTypesExecute mocks base method.
func (m *MockAlertingAPI) GetRuleTypesExecute(r ApiGetRuleTypesRequest) ([]GetRuleTypes200ResponseInner, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleTypesExecute", r)
	ret0, _ := ret[0].([]GetRuleTypes200ResponseInner)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRuleTypesExecute indicates an expected call of GetRuleTypesExecute.
func (mr *MockAlertingAPIMockRecorder) GetRuleTypesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleTypesExecute", reflect.TypeOf((*MockAlertingAPI)(nil).GetRuleTypesExecute), r)
}

// LegacyCreateAlert mocks base method.
func (m *MockAlertingAPI) LegacyCreateAlert(ctx context.Context, alertId string, spaceId any) ApiLegacyCreateAlertRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyCreateAlert", ctx, alertId, spaceId)
	ret0, _ := ret[0].(ApiLegacyCreateAlertRequest)
	return ret0
}

// LegacyCreateAlert indicates an expected call of LegacyCreateAlert.
func (mr *MockAlertingAPIMockRecorder) LegacyCreateAlert(ctx, alertId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyCreateAlert", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyCreateAlert), ctx, alertId, spaceId)
}

// LegacyCreateAlertExecute mocks base method.
func (m *MockAlertingAPI) LegacyCreateAlertExecute(r ApiLegacyCreateAlertRequest) (*AlertResponseProperties, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyCreateAlertExecute", r)
	ret0, _ := ret[0].(*AlertResponseProperties)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LegacyCreateAlertExecute indicates an expected call of LegacyCreateAlertExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyCreateAlertExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyCreateAlertExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyCreateAlertExecute), r)
}

// LegacyDisableAlert mocks base method.
func (m *MockAlertingAPI) LegacyDisableAlert(ctx context.Context, spaceId any, alertId string) ApiLegacyDisableAlertRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyDisableAlert", ctx, spaceId, alertId)
	ret0, _ := ret[0].(ApiLegacyDisableAlertRequest)
	return ret0
}

// LegacyDisableAlert indicates an expected call of LegacyDisableAlert.
func (mr *MockAlertingAPIMockRecorder) LegacyDisableAlert(ctx, spaceId, alertId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyDisableAlert", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyDisableAlert), ctx, spaceId, alertId)
}

// LegacyDisableAlertExecute mocks base method.
func (m *MockAlertingAPI) LegacyDisableAlertExecute(r ApiLegacyDisableAlertRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyDisableAlertExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LegacyDisableAlertExecute indicates an expected call of LegacyDisableAlertExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyDisableAlertExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyDisableAlertExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyDisableAlertExecute), r)
}

// LegacyEnableAlert mocks base method.
func (m *MockAlertingAPI) LegacyEnableAlert(ctx context.Context, spaceId any, alertId string) ApiLegacyEnableAlertRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyEnableAlert", ctx, spaceId, alertId)
	ret0, _ := ret[0].(ApiLegacyEnableAlertRequest)
	return ret0
}

// LegacyEnableAlert indicates an expected call of LegacyEnableAlert.
func (mr *MockAlertingAPIMockRecorder) LegacyEnableAlert(ctx, spaceId, alertId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyEnableAlert", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyEnableAlert), ctx, spaceId, alertId)
}

// LegacyEnableAlertExecute mocks base method.
func (m *MockAlertingAPI) LegacyEnableAlertExecute(r ApiLegacyEnableAlertRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyEnableAlertExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LegacyEnableAlertExecute indicates an expected call of LegacyEnableAlertExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyEnableAlertExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyEnableAlertExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyEnableAlertExecute), r)
}

// LegacyFindAlerts mocks base method.
func (m *MockAlertingAPI) LegacyFindAlerts(ctx context.Context, spaceId any) ApiLegacyFindAlertsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyFindAlerts", ctx, spaceId)
	ret0, _ := ret[0].(ApiLegacyFindAlertsRequest)
	return ret0
}

// LegacyFindAlerts indicates an expected call of LegacyFindAlerts.
func (mr *MockAlertingAPIMockRecorder) LegacyFindAlerts(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyFindAlerts", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyFindAlerts), ctx, spaceId)
}

// LegacyFindAlertsExecute mocks base method.
func (m *MockAlertingAPI) LegacyFindAlertsExecute(r ApiLegacyFindAlertsRequest) (*LegacyFindAlerts200Response, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyFindAlertsExecute", r)
	ret0, _ := ret[0].(*LegacyFindAlerts200Response)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LegacyFindAlertsExecute indicates an expected call of LegacyFindAlertsExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyFindAlertsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyFindAlertsExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyFindAlertsExecute), r)
}

// LegacyGetAlert mocks base method.
func (m *MockAlertingAPI) LegacyGetAlert(ctx context.Context, spaceId any, alertId string) ApiLegacyGetAlertRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyGetAlert", ctx, spaceId, alertId)
	ret0, _ := ret[0].(ApiLegacyGetAlertRequest)
	return ret0
}

// LegacyGetAlert indicates an expected call of LegacyGetAlert.
func (mr *MockAlertingAPIMockRecorder) LegacyGetAlert(ctx, spaceId, alertId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyGetAlert", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyGetAlert), ctx, spaceId, alertId)
}

// LegacyGetAlertExecute mocks base method.
func (m *MockAlertingAPI) LegacyGetAlertExecute(r ApiLegacyGetAlertRequest) (*AlertResponseProperties, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyGetAlertExecute", r)
	ret0, _ := ret[0].(*AlertResponseProperties)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LegacyGetAlertExecute indicates an expected call of LegacyGetAlertExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyGetAlertExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyGetAlertExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyGetAlertExecute), r)
}

// LegacyGetAlertTypes mocks base method.
func (m *MockAlertingAPI) LegacyGetAlertTypes(ctx context.Context, spaceId any) ApiLegacyGetAlertTypesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyGetAlertTypes", ctx, spaceId)
	ret0, _ := ret[0].(ApiLegacyGetAlertTypesRequest)
	return ret0
}

// LegacyGetAlertTypes indicates an expected call of LegacyGetAlertTypes.
func (mr *MockAlertingAPIMockRecorder) LegacyGetAlertTypes(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyGetAlertTypes", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyGetAlertTypes), ctx, spaceId)
}

// LegacyGetAlertTypesExecute mocks base method.
func (m *MockAlertingAPI) LegacyGetAlertTypesExecute(r ApiLegacyGetAlertTypesRequest) ([]LegacyGetAlertTypes200ResponseInner, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyGetAlertTypesExecute", r)
	ret0, _ := ret[0].([]LegacyGetAlertTypes200ResponseInner)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LegacyGetAlertTypesExecute indicates an expected call of LegacyGetAlertTypesExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyGetAlertTypesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyGetAlertTypesExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyGetAlertTypesExecute), r)
}

// LegacyGetAlertingHealth mocks base method.
func (m *MockAlertingAPI) LegacyGetAlertingHealth(ctx context.Context, spaceId any) ApiLegacyGetAlertingHealthRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyGetAlertingHealth", ctx, spaceId)
	ret0, _ := ret[0].(ApiLegacyGetAlertingHealthRequest)
	return ret0
}

// LegacyGetAlertingHealth indicates an expected call of LegacyGetAlertingHealth.
func (mr *MockAlertingAPIMockRecorder) LegacyGetAlertingHealth(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyGetAlertingHealth", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyGetAlertingHealth), ctx, spaceId)
}

// LegacyGetAlertingHealthExecute mocks base method.
func (m *MockAlertingAPI) LegacyGetAlertingHealthExecute(r ApiLegacyGetAlertingHealthRequest) (*LegacyGetAlertingHealth200Response, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyGetAlertingHealthExecute", r)
	ret0, _ := ret[0].(*LegacyGetAlertingHealth200Response)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LegacyGetAlertingHealthExecute indicates an expected call of LegacyGetAlertingHealthExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyGetAlertingHealthExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyGetAlertingHealthExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyGetAlertingHealthExecute), r)
}

// LegacyMuteAlertInstance mocks base method.
func (m *MockAlertingAPI) LegacyMuteAlertInstance(ctx context.Context, spaceId any, alertId, alertInstanceId string) ApiLegacyMuteAlertInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyMuteAlertInstance", ctx, spaceId, alertId, alertInstanceId)
	ret0, _ := ret[0].(ApiLegacyMuteAlertInstanceRequest)
	return ret0
}

// LegacyMuteAlertInstance indicates an expected call of LegacyMuteAlertInstance.
func (mr *MockAlertingAPIMockRecorder) LegacyMuteAlertInstance(ctx, spaceId, alertId, alertInstanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyMuteAlertInstance", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyMuteAlertInstance), ctx, spaceId, alertId, alertInstanceId)
}

// LegacyMuteAlertInstanceExecute mocks base method.
func (m *MockAlertingAPI) LegacyMuteAlertInstanceExecute(r ApiLegacyMuteAlertInstanceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyMuteAlertInstanceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LegacyMuteAlertInstanceExecute indicates an expected call of LegacyMuteAlertInstanceExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyMuteAlertInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyMuteAlertInstanceExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyMuteAlertInstanceExecute), r)
}

// LegacyMuteAllAlertInstances mocks base method.
func (m *MockAlertingAPI) LegacyMuteAllAlertInstances(ctx context.Context, spaceId any, alertId string) ApiLegacyMuteAllAlertInstancesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyMuteAllAlertInstances", ctx, spaceId, alertId)
	ret0, _ := ret[0].(ApiLegacyMuteAllAlertInstancesRequest)
	return ret0
}

// LegacyMuteAllAlertInstances indicates an expected call of LegacyMuteAllAlertInstances.
func (mr *MockAlertingAPIMockRecorder) LegacyMuteAllAlertInstances(ctx, spaceId, alertId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyMuteAllAlertInstances", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyMuteAllAlertInstances), ctx, spaceId, alertId)
}

// LegacyMuteAllAlertInstancesExecute mocks base method.
func (m *MockAlertingAPI) LegacyMuteAllAlertInstancesExecute(r ApiLegacyMuteAllAlertInstancesRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyMuteAllAlertInstancesExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LegacyMuteAllAlertInstancesExecute indicates an expected call of LegacyMuteAllAlertInstancesExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyMuteAllAlertInstancesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyMuteAllAlertInstancesExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyMuteAllAlertInstancesExecute), r)
}

// LegacyUnmuteAlertInstance mocks base method.
func (m *MockAlertingAPI) LegacyUnmuteAlertInstance(ctx context.Context, spaceId any, alertId, alertInstanceId string) ApiLegacyUnmuteAlertInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyUnmuteAlertInstance", ctx, spaceId, alertId, alertInstanceId)
	ret0, _ := ret[0].(ApiLegacyUnmuteAlertInstanceRequest)
	return ret0
}

// LegacyUnmuteAlertInstance indicates an expected call of LegacyUnmuteAlertInstance.
func (mr *MockAlertingAPIMockRecorder) LegacyUnmuteAlertInstance(ctx, spaceId, alertId, alertInstanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyUnmuteAlertInstance", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyUnmuteAlertInstance), ctx, spaceId, alertId, alertInstanceId)
}

// LegacyUnmuteAlertInstanceExecute mocks base method.
func (m *MockAlertingAPI) LegacyUnmuteAlertInstanceExecute(r ApiLegacyUnmuteAlertInstanceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyUnmuteAlertInstanceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LegacyUnmuteAlertInstanceExecute indicates an expected call of LegacyUnmuteAlertInstanceExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyUnmuteAlertInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyUnmuteAlertInstanceExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyUnmuteAlertInstanceExecute), r)
}

// LegacyUnmuteAllAlertInstances mocks base method.
func (m *MockAlertingAPI) LegacyUnmuteAllAlertInstances(ctx context.Context, spaceId any, alertId string) ApiLegacyUnmuteAllAlertInstancesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyUnmuteAllAlertInstances", ctx, spaceId, alertId)
	ret0, _ := ret[0].(ApiLegacyUnmuteAllAlertInstancesRequest)
	return ret0
}

// LegacyUnmuteAllAlertInstances indicates an expected call of LegacyUnmuteAllAlertInstances.
func (mr *MockAlertingAPIMockRecorder) LegacyUnmuteAllAlertInstances(ctx, spaceId, alertId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyUnmuteAllAlertInstances", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyUnmuteAllAlertInstances), ctx, spaceId, alertId)
}

// LegacyUnmuteAllAlertInstancesExecute mocks base method.
func (m *MockAlertingAPI) LegacyUnmuteAllAlertInstancesExecute(r ApiLegacyUnmuteAllAlertInstancesRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyUnmuteAllAlertInstancesExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LegacyUnmuteAllAlertInstancesExecute indicates an expected call of LegacyUnmuteAllAlertInstancesExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyUnmuteAllAlertInstancesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyUnmuteAllAlertInstancesExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyUnmuteAllAlertInstancesExecute), r)
}

// LegacyUpdateAlert mocks base method.
func (m *MockAlertingAPI) LegacyUpdateAlert(ctx context.Context, spaceId any, alertId string) ApiLegacyUpdateAlertRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyUpdateAlert", ctx, spaceId, alertId)
	ret0, _ := ret[0].(ApiLegacyUpdateAlertRequest)
	return ret0
}

// LegacyUpdateAlert indicates an expected call of LegacyUpdateAlert.
func (mr *MockAlertingAPIMockRecorder) LegacyUpdateAlert(ctx, spaceId, alertId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyUpdateAlert", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyUpdateAlert), ctx, spaceId, alertId)
}

// LegacyUpdateAlertExecute mocks base method.
func (m *MockAlertingAPI) LegacyUpdateAlertExecute(r ApiLegacyUpdateAlertRequest) (*AlertResponseProperties, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyUpdateAlertExecute", r)
	ret0, _ := ret[0].(*AlertResponseProperties)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LegacyUpdateAlertExecute indicates an expected call of LegacyUpdateAlertExecute.
func (mr *MockAlertingAPIMockRecorder) LegacyUpdateAlertExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyUpdateAlertExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegacyUpdateAlertExecute), r)
}

// LegaryDeleteAlert mocks base method.
func (m *MockAlertingAPI) LegaryDeleteAlert(ctx context.Context, spaceId any, alertId string) ApiLegaryDeleteAlertRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegaryDeleteAlert", ctx, spaceId, alertId)
	ret0, _ := ret[0].(ApiLegaryDeleteAlertRequest)
	return ret0
}

// LegaryDeleteAlert indicates an expected call of LegaryDeleteAlert.
func (mr *MockAlertingAPIMockRecorder) LegaryDeleteAlert(ctx, spaceId, alertId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegaryDeleteAlert", reflect.TypeOf((*MockAlertingAPI)(nil).LegaryDeleteAlert), ctx, spaceId, alertId)
}

// LegaryDeleteAlertExecute mocks base method.
func (m *MockAlertingAPI) LegaryDeleteAlertExecute(r ApiLegaryDeleteAlertRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegaryDeleteAlertExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LegaryDeleteAlertExecute indicates an expected call of LegaryDeleteAlertExecute.
func (mr *MockAlertingAPIMockRecorder) LegaryDeleteAlertExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegaryDeleteAlertExecute", reflect.TypeOf((*MockAlertingAPI)(nil).LegaryDeleteAlertExecute), r)
}

// MuteAlert mocks base method.
func (m *MockAlertingAPI) MuteAlert(ctx context.Context, alertId, ruleId, spaceId any) ApiMuteAlertRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteAlert", ctx, alertId, ruleId, spaceId)
	ret0, _ := ret[0].(ApiMuteAlertRequest)
	return ret0
}

// MuteAlert indicates an expected call of MuteAlert.
func (mr *MockAlertingAPIMockRecorder) MuteAlert(ctx, alertId, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteAlert", reflect.TypeOf((*MockAlertingAPI)(nil).MuteAlert), ctx, alertId, ruleId, spaceId)
}

// MuteAlertExecute mocks base method.
func (m *MockAlertingAPI) MuteAlertExecute(r ApiMuteAlertRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteAlertExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MuteAlertExecute indicates an expected call of MuteAlertExecute.
func (mr *MockAlertingAPIMockRecorder) MuteAlertExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteAlertExecute", reflect.TypeOf((*MockAlertingAPI)(nil).MuteAlertExecute), r)
}

// MuteAllAlerts mocks base method.
func (m *MockAlertingAPI) MuteAllAlerts(ctx context.Context, ruleId, spaceId any) ApiMuteAllAlertsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteAllAlerts", ctx, ruleId, spaceId)
	ret0, _ := ret[0].(ApiMuteAllAlertsRequest)
	return ret0
}

// MuteAllAlerts indicates an expected call of MuteAllAlerts.
func (mr *MockAlertingAPIMockRecorder) MuteAllAlerts(ctx, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteAllAlerts", reflect.TypeOf((*MockAlertingAPI)(nil).MuteAllAlerts), ctx, ruleId, spaceId)
}

// MuteAllAlertsExecute mocks base method.
func (m *MockAlertingAPI) MuteAllAlertsExecute(r ApiMuteAllAlertsRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteAllAlertsExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MuteAllAlertsExecute indicates an expected call of MuteAllAlertsExecute.
func (mr *MockAlertingAPIMockRecorder) MuteAllAlertsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteAllAlertsExecute", reflect.TypeOf((*MockAlertingAPI)(nil).MuteAllAlertsExecute), r)
}

// UnmuteAlert mocks base method.
func (m *MockAlertingAPI) UnmuteAlert(ctx context.Context, alertId, ruleId, spaceId any) ApiUnmuteAlertRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmuteAlert", ctx, alertId, ruleId, spaceId)
	ret0, _ := ret[0].(ApiUnmuteAlertRequest)
	return ret0
}

// UnmuteAlert indicates an expected call of UnmuteAlert.
func (mr *MockAlertingAPIMockRecorder) UnmuteAlert(ctx, alertId, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmuteAlert", reflect.TypeOf((*MockAlertingAPI)(nil).UnmuteAlert), ctx, alertId, ruleId, spaceId)
}

// UnmuteAlertExecute mocks base method.
func (m *MockAlertingAPI) UnmuteAlertExecute(r ApiUnmuteAlertRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmuteAlertExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmuteAlertExecute indicates an expected call of UnmuteAlertExecute.
func (mr *MockAlertingAPIMockRecorder) UnmuteAlertExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmuteAlertExecute", reflect.TypeOf((*MockAlertingAPI)(nil).UnmuteAlertExecute), r)
}

// UnmuteAllAlerts mocks base method.
func (m *MockAlertingAPI) UnmuteAllAlerts(ctx context.Context, ruleId, spaceId any) ApiUnmuteAllAlertsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmuteAllAlerts", ctx, ruleId, spaceId)
	ret0, _ := ret[0].(ApiUnmuteAllAlertsRequest)
	return ret0
}

// UnmuteAllAlerts indicates an expected call of UnmuteAllAlerts.
func (mr *MockAlertingAPIMockRecorder) UnmuteAllAlerts(ctx, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmuteAllAlerts", reflect.TypeOf((*MockAlertingAPI)(nil).UnmuteAllAlerts), ctx, ruleId, spaceId)
}

// UnmuteAllAlertsExecute mocks base method.
func (m *MockAlertingAPI) UnmuteAllAlertsExecute(r ApiUnmuteAllAlertsRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmuteAllAlertsExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmuteAllAlertsExecute indicates an expected call of UnmuteAllAlertsExecute.
func (mr *MockAlertingAPIMockRecorder) UnmuteAllAlertsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmuteAllAlertsExecute", reflect.TypeOf((*MockAlertingAPI)(nil).UnmuteAllAlertsExecute), r)
}

// UpdateRule mocks base method.
func (m *MockAlertingAPI) UpdateRule(ctx context.Context, ruleId, spaceId any) ApiUpdateRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", ctx, ruleId, spaceId)
	ret0, _ := ret[0].(ApiUpdateRuleRequest)
	return ret0
}

// UpdateRule indicates an expected call of UpdateRule.
func (mr *MockAlertingAPIMockRecorder) UpdateRule(ctx, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockAlertingAPI)(nil).UpdateRule), ctx, ruleId, spaceId)
}

// UpdateRuleAPIKey mocks base method.
func (m *MockAlertingAPI) UpdateRuleAPIKey(ctx context.Context, ruleId, spaceId any) ApiUpdateRuleAPIKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleAPIKey", ctx, ruleId, spaceId)
	ret0, _ := ret[0].(ApiUpdateRuleAPIKeyRequest)
	return ret0
}

// UpdateRuleAPIKey indicates an expected call of UpdateRuleAPIKey.
func (mr *MockAlertingAPIMockRecorder) UpdateRuleAPIKey(ctx, ruleId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleAPIKey", reflect.TypeOf((*MockAlertingAPI)(nil).UpdateRuleAPIKey), ctx, ruleId, spaceId)
}

// UpdateRuleAPIKeyExecute mocks base method.
func (m *MockAlertingAPI) UpdateRuleAPIKeyExecute(r ApiUpdateRuleAPIKeyRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleAPIKeyExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleAPIKeyExecute indicates an expected call of UpdateRuleAPIKeyExecute.
func (mr *MockAlertingAPIMockRecorder) UpdateRuleAPIKeyExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleAPIKeyExecute", reflect.TypeOf((*MockAlertingAPI)(nil).UpdateRuleAPIKeyExecute), r)
}

// UpdateRuleExecute mocks base method.
func (m *MockAlertingAPI) UpdateRuleExecute(r ApiUpdateRuleRequest) (*RuleResponseProperties, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleExecute", r)
	ret0, _ := ret[0].(*RuleResponseProperties)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRuleExecute indicates an expected call of UpdateRuleExecute.
func (mr *MockAlertingAPIMockRecorder) UpdateRuleExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleExecute", reflect.TypeOf((*MockAlertingAPI)(nil).UpdateRuleExecute), r)
}
