/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
)

// checks if the LegacyUpdateAlertRequestProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegacyUpdateAlertRequestProperties{}

// LegacyUpdateAlertRequestProperties struct for LegacyUpdateAlertRequestProperties
type LegacyUpdateAlertRequestProperties struct {
	Actions []LegacyUpdateAlertRequestPropertiesActionsInner `json:"actions,omitempty"`
	// A name to reference and search.
	Name string `json:"name"`
	// The condition for throttling the notification.
	NotifyWhen string `json:"notifyWhen"`
	// The parameters to pass to the alert type executor `params` value. This will also validate against the alert type params validator, if defined.
	Params   map[string]interface{}                     `json:"params"`
	Schedule LegacyUpdateAlertRequestPropertiesSchedule `json:"schedule"`
	// A list of keywords to reference and search.
	Tags []string `json:"tags,omitempty"`
	// How often this alert should fire the same actions. This will prevent the alert from sending out the same notification over and over. For example, if an alert with a schedule of 1 minute stays in a triggered state for 90 minutes, setting a throttle of `10m` or `1h` will prevent it from sending 90 notifications during this period.
	Throttle *string `json:"throttle,omitempty"`
}

type _LegacyUpdateAlertRequestProperties LegacyUpdateAlertRequestProperties

// NewLegacyUpdateAlertRequestProperties instantiates a new LegacyUpdateAlertRequestProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyUpdateAlertRequestProperties(name string, notifyWhen string, params map[string]interface{}, schedule LegacyUpdateAlertRequestPropertiesSchedule) *LegacyUpdateAlertRequestProperties {
	this := LegacyUpdateAlertRequestProperties{}
	this.Name = name
	this.NotifyWhen = notifyWhen
	this.Params = params
	this.Schedule = schedule
	return &this
}

// NewLegacyUpdateAlertRequestPropertiesWithDefaults instantiates a new LegacyUpdateAlertRequestProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyUpdateAlertRequestPropertiesWithDefaults() *LegacyUpdateAlertRequestProperties {
	this := LegacyUpdateAlertRequestProperties{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *LegacyUpdateAlertRequestProperties) GetActions() []LegacyUpdateAlertRequestPropertiesActionsInner {
	if o == nil || IsNil(o.Actions) {
		var ret []LegacyUpdateAlertRequestPropertiesActionsInner
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestProperties) GetActionsOk() ([]LegacyUpdateAlertRequestPropertiesActionsInner, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *LegacyUpdateAlertRequestProperties) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []LegacyUpdateAlertRequestPropertiesActionsInner and assigns it to the Actions field.
func (o *LegacyUpdateAlertRequestProperties) SetActions(v []LegacyUpdateAlertRequestPropertiesActionsInner) {
	o.Actions = v
}

// GetName returns the Name field value
func (o *LegacyUpdateAlertRequestProperties) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LegacyUpdateAlertRequestProperties) SetName(v string) {
	o.Name = v
}

// GetNotifyWhen returns the NotifyWhen field value
func (o *LegacyUpdateAlertRequestProperties) GetNotifyWhen() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifyWhen
}

// GetNotifyWhenOk returns a tuple with the NotifyWhen field value
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestProperties) GetNotifyWhenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyWhen, true
}

// SetNotifyWhen sets field value
func (o *LegacyUpdateAlertRequestProperties) SetNotifyWhen(v string) {
	o.NotifyWhen = v
}

// GetParams returns the Params field value
func (o *LegacyUpdateAlertRequestProperties) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestProperties) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *LegacyUpdateAlertRequestProperties) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetSchedule returns the Schedule field value
func (o *LegacyUpdateAlertRequestProperties) GetSchedule() LegacyUpdateAlertRequestPropertiesSchedule {
	if o == nil {
		var ret LegacyUpdateAlertRequestPropertiesSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestProperties) GetScheduleOk() (*LegacyUpdateAlertRequestPropertiesSchedule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *LegacyUpdateAlertRequestProperties) SetSchedule(v LegacyUpdateAlertRequestPropertiesSchedule) {
	o.Schedule = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *LegacyUpdateAlertRequestProperties) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestProperties) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *LegacyUpdateAlertRequestProperties) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *LegacyUpdateAlertRequestProperties) SetTags(v []string) {
	o.Tags = v
}

// GetThrottle returns the Throttle field value if set, zero value otherwise.
func (o *LegacyUpdateAlertRequestProperties) GetThrottle() string {
	if o == nil || IsNil(o.Throttle) {
		var ret string
		return ret
	}
	return *o.Throttle
}

// GetThrottleOk returns a tuple with the Throttle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUpdateAlertRequestProperties) GetThrottleOk() (*string, bool) {
	if o == nil || IsNil(o.Throttle) {
		return nil, false
	}
	return o.Throttle, true
}

// HasThrottle returns a boolean if a field has been set.
func (o *LegacyUpdateAlertRequestProperties) HasThrottle() bool {
	if o != nil && !IsNil(o.Throttle) {
		return true
	}

	return false
}

// SetThrottle gets a reference to the given string and assigns it to the Throttle field.
func (o *LegacyUpdateAlertRequestProperties) SetThrottle(v string) {
	o.Throttle = &v
}

func (o LegacyUpdateAlertRequestProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegacyUpdateAlertRequestProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	toSerialize["name"] = o.Name
	toSerialize["notifyWhen"] = o.NotifyWhen
	toSerialize["params"] = o.Params
	toSerialize["schedule"] = o.Schedule
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Throttle) {
		toSerialize["throttle"] = o.Throttle
	}
	return toSerialize, nil
}

func (o *LegacyUpdateAlertRequestProperties) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"notifyWhen",
		"params",
		"schedule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegacyUpdateAlertRequestProperties := _LegacyUpdateAlertRequestProperties{}

	err = json.Unmarshal(bytes, &varLegacyUpdateAlertRequestProperties)

	if err != nil {
		return err
	}

	*o = LegacyUpdateAlertRequestProperties(varLegacyUpdateAlertRequestProperties)

	return err
}

type NullableLegacyUpdateAlertRequestProperties struct {
	value *LegacyUpdateAlertRequestProperties
	isSet bool
}

func (v NullableLegacyUpdateAlertRequestProperties) Get() *LegacyUpdateAlertRequestProperties {
	return v.value
}

func (v *NullableLegacyUpdateAlertRequestProperties) Set(val *LegacyUpdateAlertRequestProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyUpdateAlertRequestProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyUpdateAlertRequestProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyUpdateAlertRequestProperties(val *LegacyUpdateAlertRequestProperties) *NullableLegacyUpdateAlertRequestProperties {
	return &NullableLegacyUpdateAlertRequestProperties{value: val, isSet: true}
}

func (v NullableLegacyUpdateAlertRequestProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyUpdateAlertRequestProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
