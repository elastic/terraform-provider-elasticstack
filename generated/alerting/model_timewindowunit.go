/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
)

// Timewindowunit The type of units for the time window: seconds, minutes, hours, or days.
type Timewindowunit string

// List of timewindowunit
const (
	S Timewindowunit = "s"
	M Timewindowunit = "m"
	H Timewindowunit = "h"
	D Timewindowunit = "d"
)

// All allowed values of Timewindowunit enum
var AllowedTimewindowunitEnumValues = []Timewindowunit{
	"s",
	"m",
	"h",
	"d",
}

func (v *Timewindowunit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Timewindowunit(value)
	for _, existing := range AllowedTimewindowunitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Timewindowunit", value)
}

// NewTimewindowunitFromValue returns a pointer to a valid Timewindowunit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimewindowunitFromValue(v string) (*Timewindowunit, error) {
	ev := Timewindowunit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Timewindowunit: valid values are %v", v, AllowedTimewindowunitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Timewindowunit) IsValid() bool {
	for _, existing := range AllowedTimewindowunitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to timewindowunit value
func (v Timewindowunit) Ptr() *Timewindowunit {
	return &v
}

type NullableTimewindowunit struct {
	value *Timewindowunit
	isSet bool
}

func (v NullableTimewindowunit) Get() *Timewindowunit {
	return v.value
}

func (v *NullableTimewindowunit) Set(val *Timewindowunit) {
	v.value = val
	v.isSet = true
}

func (v NullableTimewindowunit) IsSet() bool {
	return v.isSet
}

func (v *NullableTimewindowunit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimewindowunit(val *Timewindowunit) *NullableTimewindowunit {
	return &NullableTimewindowunit{value: val, isSet: true}
}

func (v NullableTimewindowunit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimewindowunit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
