/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
)

// Aggtype The type of aggregation to perform.
type Aggtype string

// List of aggtype
const (
	AVG   Aggtype = "avg"
	COUNT Aggtype = "count"
	MAX   Aggtype = "max"
	MIN   Aggtype = "min"
	SUM   Aggtype = "sum"
)

// All allowed values of Aggtype enum
var AllowedAggtypeEnumValues = []Aggtype{
	"avg",
	"count",
	"max",
	"min",
	"sum",
}

func (v *Aggtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Aggtype(value)
	for _, existing := range AllowedAggtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Aggtype", value)
}

// NewAggtypeFromValue returns a pointer to a valid Aggtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggtypeFromValue(v string) (*Aggtype, error) {
	ev := Aggtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Aggtype: valid values are %v", v, AllowedAggtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Aggtype) IsValid() bool {
	for _, existing := range AllowedAggtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to aggtype value
func (v Aggtype) Ptr() *Aggtype {
	return &v
}

type NullableAggtype struct {
	value *Aggtype
	isSet bool
}

func (v NullableAggtype) Get() *Aggtype {
	return v.value
}

func (v *NullableAggtype) Set(val *Aggtype) {
	v.value = val
	v.isSet = true
}

func (v NullableAggtype) IsSet() bool {
	return v.isSet
}

func (v *NullableAggtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggtype(val *Aggtype) *NullableAggtype {
	return &NullableAggtype{value: val, isSet: true}
}

func (v NullableAggtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
