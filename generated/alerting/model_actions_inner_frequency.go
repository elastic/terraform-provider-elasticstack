/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the ActionsInnerFrequency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionsInnerFrequency{}

// ActionsInnerFrequency The parameters that affect how often actions are generated. NOTE: You cannot specify these parameters when `notify_when` or `throttle` are defined at the rule level.
type ActionsInnerFrequency struct {
	NotifyWhen NotifyWhen `json:"notify_when"`
	// Indicates whether the action is a summary.
	Summary bool `json:"summary"`
	// The throttle interval, which defines how often an alert generates repeated actions. It is applicable only if `notify_when` is set to `onThrottleInterval`. It is specified in seconds, minutes, hours, or days.
	Throttle NullableString `json:"throttle,omitempty"`
}

// NewActionsInnerFrequency instantiates a new ActionsInnerFrequency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionsInnerFrequency(notifyWhen NotifyWhen, summary bool) *ActionsInnerFrequency {
	this := ActionsInnerFrequency{}
	this.NotifyWhen = notifyWhen
	this.Summary = summary
	return &this
}

// NewActionsInnerFrequencyWithDefaults instantiates a new ActionsInnerFrequency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionsInnerFrequencyWithDefaults() *ActionsInnerFrequency {
	this := ActionsInnerFrequency{}
	return &this
}

// GetNotifyWhen returns the NotifyWhen field value
func (o *ActionsInnerFrequency) GetNotifyWhen() NotifyWhen {
	if o == nil {
		var ret NotifyWhen
		return ret
	}

	return o.NotifyWhen
}

// GetNotifyWhenOk returns a tuple with the NotifyWhen field value
// and a boolean to check if the value has been set.
func (o *ActionsInnerFrequency) GetNotifyWhenOk() (*NotifyWhen, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyWhen, true
}

// SetNotifyWhen sets field value
func (o *ActionsInnerFrequency) SetNotifyWhen(v NotifyWhen) {
	o.NotifyWhen = v
}

// GetSummary returns the Summary field value
func (o *ActionsInnerFrequency) GetSummary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *ActionsInnerFrequency) GetSummaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *ActionsInnerFrequency) SetSummary(v bool) {
	o.Summary = v
}

// GetThrottle returns the Throttle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionsInnerFrequency) GetThrottle() string {
	if o == nil || IsNil(o.Throttle.Get()) {
		var ret string
		return ret
	}
	return *o.Throttle.Get()
}

// GetThrottleOk returns a tuple with the Throttle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionsInnerFrequency) GetThrottleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Throttle.Get(), o.Throttle.IsSet()
}

// HasThrottle returns a boolean if a field has been set.
func (o *ActionsInnerFrequency) HasThrottle() bool {
	if o != nil && o.Throttle.IsSet() {
		return true
	}

	return false
}

// SetThrottle gets a reference to the given NullableString and assigns it to the Throttle field.
func (o *ActionsInnerFrequency) SetThrottle(v string) {
	o.Throttle.Set(&v)
}

// SetThrottleNil sets the value for Throttle to be an explicit nil
func (o *ActionsInnerFrequency) SetThrottleNil() {
	o.Throttle.Set(nil)
}

// UnsetThrottle ensures that no value is present for Throttle, not even an explicit nil
func (o *ActionsInnerFrequency) UnsetThrottle() {
	o.Throttle.Unset()
}

func (o ActionsInnerFrequency) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionsInnerFrequency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notify_when"] = o.NotifyWhen
	toSerialize["summary"] = o.Summary
	if o.Throttle.IsSet() {
		toSerialize["throttle"] = o.Throttle.Get()
	}
	return toSerialize, nil
}

type NullableActionsInnerFrequency struct {
	value *ActionsInnerFrequency
	isSet bool
}

func (v NullableActionsInnerFrequency) Get() *ActionsInnerFrequency {
	return v.value
}

func (v *NullableActionsInnerFrequency) Set(val *ActionsInnerFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableActionsInnerFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableActionsInnerFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionsInnerFrequency(val *ActionsInnerFrequency) *NullableActionsInnerFrequency {
	return &NullableActionsInnerFrequency{value: val, isSet: true}
}

func (v NullableActionsInnerFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionsInnerFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
