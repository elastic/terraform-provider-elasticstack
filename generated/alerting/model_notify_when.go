/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
)

// NotifyWhen Deprecated in 8.13.0. Use the `notify_when` property in the action `frequency` object instead. Indicates how often alerts generate actions. NOTE: You cannot specify `notify_when` at both the rule and action level. If you set it at the rule level then update the rule in Kibana, it is automatically changed to use action-specific values.
type NotifyWhen string

// List of notify_when
const (
	ON_ACTION_GROUP_CHANGE NotifyWhen = "onActionGroupChange"
	ON_ACTIVE_ALERT        NotifyWhen = "onActiveAlert"
	ON_THROTTLE_INTERVAL   NotifyWhen = "onThrottleInterval"
)

// All allowed values of NotifyWhen enum
var AllowedNotifyWhenEnumValues = []NotifyWhen{
	"onActionGroupChange",
	"onActiveAlert",
	"onThrottleInterval",
}

func (v *NotifyWhen) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifyWhen(value)
	for _, existing := range AllowedNotifyWhenEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifyWhen", value)
}

// NewNotifyWhenFromValue returns a pointer to a valid NotifyWhen
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifyWhenFromValue(v string) (*NotifyWhen, error) {
	ev := NotifyWhen(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifyWhen: valid values are %v", v, AllowedNotifyWhenEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifyWhen) IsValid() bool {
	for _, existing := range AllowedNotifyWhenEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to notify_when value
func (v NotifyWhen) Ptr() *NotifyWhen {
	return &v
}

type NullableNotifyWhen struct {
	value *NotifyWhen
	isSet bool
}

func (v NullableNotifyWhen) Get() *NotifyWhen {
	return v.value
}

func (v *NullableNotifyWhen) Set(val *NotifyWhen) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyWhen) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyWhen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyWhen(val *NotifyWhen) *NullableNotifyWhen {
	return &NullableNotifyWhen{value: val, isSet: true}
}

func (v NullableNotifyWhen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyWhen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
