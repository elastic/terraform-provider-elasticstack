/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RuleResponseProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleResponseProperties{}

// RuleResponseProperties struct for RuleResponseProperties
type RuleResponseProperties struct {
	Actions     []ActionsInner `json:"actions"`
	ApiKeyOwner NullableString `json:"api_key_owner"`
	// The application or feature that owns the rule. For example, `alerts`, `apm`, `discover`, `infrastructure`, `logs`, `metrics`, `ml`, `monitoring`, `securitySolution`, `siem`, `stackAlerts`, or `uptime`.
	Consumer string `json:"consumer"`
	// The date and time that the rule was created.
	CreatedAt time.Time `json:"created_at"`
	// The identifier for the user that created the rule.
	CreatedBy NullableString `json:"created_by"`
	// Indicates whether the rule is currently enabled.
	Enabled         bool                                  `json:"enabled"`
	ExecutionStatus RuleResponsePropertiesExecutionStatus `json:"execution_status"`
	// The identifier for the rule.
	Id            string                         `json:"id"`
	LastRun       *RuleResponsePropertiesLastRun `json:"last_run,omitempty"`
	MutedAlertIds []string                       `json:"muted_alert_ids"`
	MuteAll       bool                           `json:"mute_all"`
	// The name of the rule.
	Name       string       `json:"name"`
	NextRun    NullableTime `json:"next_run,omitempty"`
	NotifyWhen *NotifyWhen  `json:"notify_when,omitempty"`
	// The parameters for the rule.
	Params map[string]interface{} `json:"params"`
	// The identifier for the type of rule. For example, `.es-query`, `.index-threshold`, `logs.alert.document.count`, `monitoring_alert_cluster_health`, `siem.thresholdRule`, or `xpack.ml.anomaly_detection_alert`.
	RuleTypeId string `json:"rule_type_id"`
	// Indicates whether the rule is running.
	Running         *bool    `json:"running,omitempty"`
	Schedule        Schedule `json:"schedule"`
	ScheduledTaskId *string  `json:"scheduled_task_id,omitempty"`
	// The tags for the rule.
	Tags []string `json:"tags"`
	// The throttle interval, which defines how often an alert generates repeated actions. It is applicable only if `notify_when` is set to `onThrottleInterval`. It is specified in seconds, minutes, hours, or days.
	Throttle NullableString `json:"throttle"`
	// The date and time that the rule was updated most recently.
	UpdatedAt string `json:"updated_at"`
	// The identifier for the user that updated this rule most recently.
	UpdatedBy NullableString `json:"updated_by"`
}

type _RuleResponseProperties RuleResponseProperties

// NewRuleResponseProperties instantiates a new RuleResponseProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleResponseProperties(actions []ActionsInner, apiKeyOwner NullableString, consumer string, createdAt time.Time, createdBy NullableString, enabled bool, executionStatus RuleResponsePropertiesExecutionStatus, id string, mutedAlertIds []string, muteAll bool, name string, params map[string]interface{}, ruleTypeId string, schedule Schedule, tags []string, throttle NullableString, updatedAt string, updatedBy NullableString) *RuleResponseProperties {
	this := RuleResponseProperties{}
	this.Actions = actions
	this.ApiKeyOwner = apiKeyOwner
	this.Consumer = consumer
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.Enabled = enabled
	this.ExecutionStatus = executionStatus
	this.Id = id
	this.MutedAlertIds = mutedAlertIds
	this.MuteAll = muteAll
	this.Name = name
	this.Params = params
	this.RuleTypeId = ruleTypeId
	this.Schedule = schedule
	this.Tags = tags
	this.Throttle = throttle
	this.UpdatedAt = updatedAt
	this.UpdatedBy = updatedBy
	return &this
}

// NewRuleResponsePropertiesWithDefaults instantiates a new RuleResponseProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleResponsePropertiesWithDefaults() *RuleResponseProperties {
	this := RuleResponseProperties{}
	return &this
}

// GetActions returns the Actions field value
// If the value is explicit nil, the zero value for []ActionsInner will be returned
func (o *RuleResponseProperties) GetActions() []ActionsInner {
	if o == nil {
		var ret []ActionsInner
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseProperties) GetActionsOk() ([]ActionsInner, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *RuleResponseProperties) SetActions(v []ActionsInner) {
	o.Actions = v
}

// GetApiKeyOwner returns the ApiKeyOwner field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RuleResponseProperties) GetApiKeyOwner() string {
	if o == nil || o.ApiKeyOwner.Get() == nil {
		var ret string
		return ret
	}

	return *o.ApiKeyOwner.Get()
}

// GetApiKeyOwnerOk returns a tuple with the ApiKeyOwner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseProperties) GetApiKeyOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiKeyOwner.Get(), o.ApiKeyOwner.IsSet()
}

// SetApiKeyOwner sets field value
func (o *RuleResponseProperties) SetApiKeyOwner(v string) {
	o.ApiKeyOwner.Set(&v)
}

// GetConsumer returns the Consumer field value
func (o *RuleResponseProperties) GetConsumer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Consumer
}

// GetConsumerOk returns a tuple with the Consumer field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetConsumerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consumer, true
}

// SetConsumer sets field value
func (o *RuleResponseProperties) SetConsumer(v string) {
	o.Consumer = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *RuleResponseProperties) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RuleResponseProperties) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RuleResponseProperties) GetCreatedBy() string {
	if o == nil || o.CreatedBy.Get() == nil {
		var ret string
		return ret
	}

	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseProperties) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// SetCreatedBy sets field value
func (o *RuleResponseProperties) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}

// GetEnabled returns the Enabled field value
func (o *RuleResponseProperties) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *RuleResponseProperties) SetEnabled(v bool) {
	o.Enabled = v
}

// GetExecutionStatus returns the ExecutionStatus field value
func (o *RuleResponseProperties) GetExecutionStatus() RuleResponsePropertiesExecutionStatus {
	if o == nil {
		var ret RuleResponsePropertiesExecutionStatus
		return ret
	}

	return o.ExecutionStatus
}

// GetExecutionStatusOk returns a tuple with the ExecutionStatus field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetExecutionStatusOk() (*RuleResponsePropertiesExecutionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionStatus, true
}

// SetExecutionStatus sets field value
func (o *RuleResponseProperties) SetExecutionStatus(v RuleResponsePropertiesExecutionStatus) {
	o.ExecutionStatus = v
}

// GetId returns the Id field value
func (o *RuleResponseProperties) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RuleResponseProperties) SetId(v string) {
	o.Id = v
}

// GetLastRun returns the LastRun field value if set, zero value otherwise.
func (o *RuleResponseProperties) GetLastRun() RuleResponsePropertiesLastRun {
	if o == nil || IsNil(o.LastRun) {
		var ret RuleResponsePropertiesLastRun
		return ret
	}
	return *o.LastRun
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetLastRunOk() (*RuleResponsePropertiesLastRun, bool) {
	if o == nil || IsNil(o.LastRun) {
		return nil, false
	}
	return o.LastRun, true
}

// HasLastRun returns a boolean if a field has been set.
func (o *RuleResponseProperties) HasLastRun() bool {
	if o != nil && !IsNil(o.LastRun) {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given RuleResponsePropertiesLastRun and assigns it to the LastRun field.
func (o *RuleResponseProperties) SetLastRun(v RuleResponsePropertiesLastRun) {
	o.LastRun = &v
}

// GetMutedAlertIds returns the MutedAlertIds field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *RuleResponseProperties) GetMutedAlertIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MutedAlertIds
}

// GetMutedAlertIdsOk returns a tuple with the MutedAlertIds field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseProperties) GetMutedAlertIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MutedAlertIds) {
		return nil, false
	}
	return o.MutedAlertIds, true
}

// SetMutedAlertIds sets field value
func (o *RuleResponseProperties) SetMutedAlertIds(v []string) {
	o.MutedAlertIds = v
}

// GetMuteAll returns the MuteAll field value
func (o *RuleResponseProperties) GetMuteAll() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MuteAll
}

// GetMuteAllOk returns a tuple with the MuteAll field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetMuteAllOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MuteAll, true
}

// SetMuteAll sets field value
func (o *RuleResponseProperties) SetMuteAll(v bool) {
	o.MuteAll = v
}

// GetName returns the Name field value
func (o *RuleResponseProperties) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RuleResponseProperties) SetName(v string) {
	o.Name = v
}

// GetNextRun returns the NextRun field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleResponseProperties) GetNextRun() time.Time {
	if o == nil || IsNil(o.NextRun.Get()) {
		var ret time.Time
		return ret
	}
	return *o.NextRun.Get()
}

// GetNextRunOk returns a tuple with the NextRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseProperties) GetNextRunOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextRun.Get(), o.NextRun.IsSet()
}

// HasNextRun returns a boolean if a field has been set.
func (o *RuleResponseProperties) HasNextRun() bool {
	if o != nil && o.NextRun.IsSet() {
		return true
	}

	return false
}

// SetNextRun gets a reference to the given NullableTime and assigns it to the NextRun field.
func (o *RuleResponseProperties) SetNextRun(v time.Time) {
	o.NextRun.Set(&v)
}

// SetNextRunNil sets the value for NextRun to be an explicit nil
func (o *RuleResponseProperties) SetNextRunNil() {
	o.NextRun.Set(nil)
}

// UnsetNextRun ensures that no value is present for NextRun, not even an explicit nil
func (o *RuleResponseProperties) UnsetNextRun() {
	o.NextRun.Unset()
}

// GetNotifyWhen returns the NotifyWhen field value if set, zero value otherwise.
func (o *RuleResponseProperties) GetNotifyWhen() NotifyWhen {
	if o == nil || IsNil(o.NotifyWhen) {
		var ret NotifyWhen
		return ret
	}
	return *o.NotifyWhen
}

// GetNotifyWhenOk returns a tuple with the NotifyWhen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetNotifyWhenOk() (*NotifyWhen, bool) {
	if o == nil || IsNil(o.NotifyWhen) {
		return nil, false
	}
	return o.NotifyWhen, true
}

// HasNotifyWhen returns a boolean if a field has been set.
func (o *RuleResponseProperties) HasNotifyWhen() bool {
	if o != nil && !IsNil(o.NotifyWhen) {
		return true
	}

	return false
}

// SetNotifyWhen gets a reference to the given NotifyWhen and assigns it to the NotifyWhen field.
func (o *RuleResponseProperties) SetNotifyWhen(v NotifyWhen) {
	o.NotifyWhen = &v
}

// GetParams returns the Params field value
func (o *RuleResponseProperties) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *RuleResponseProperties) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetRuleTypeId returns the RuleTypeId field value
func (o *RuleResponseProperties) GetRuleTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleTypeId
}

// GetRuleTypeIdOk returns a tuple with the RuleTypeId field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetRuleTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleTypeId, true
}

// SetRuleTypeId sets field value
func (o *RuleResponseProperties) SetRuleTypeId(v string) {
	o.RuleTypeId = v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *RuleResponseProperties) GetRunning() bool {
	if o == nil || IsNil(o.Running) {
		var ret bool
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetRunningOk() (*bool, bool) {
	if o == nil || IsNil(o.Running) {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *RuleResponseProperties) HasRunning() bool {
	if o != nil && !IsNil(o.Running) {
		return true
	}

	return false
}

// SetRunning gets a reference to the given bool and assigns it to the Running field.
func (o *RuleResponseProperties) SetRunning(v bool) {
	o.Running = &v
}

// GetSchedule returns the Schedule field value
func (o *RuleResponseProperties) GetSchedule() Schedule {
	if o == nil {
		var ret Schedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetScheduleOk() (*Schedule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *RuleResponseProperties) SetSchedule(v Schedule) {
	o.Schedule = v
}

// GetScheduledTaskId returns the ScheduledTaskId field value if set, zero value otherwise.
func (o *RuleResponseProperties) GetScheduledTaskId() string {
	if o == nil || IsNil(o.ScheduledTaskId) {
		var ret string
		return ret
	}
	return *o.ScheduledTaskId
}

// GetScheduledTaskIdOk returns a tuple with the ScheduledTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetScheduledTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledTaskId) {
		return nil, false
	}
	return o.ScheduledTaskId, true
}

// HasScheduledTaskId returns a boolean if a field has been set.
func (o *RuleResponseProperties) HasScheduledTaskId() bool {
	if o != nil && !IsNil(o.ScheduledTaskId) {
		return true
	}

	return false
}

// SetScheduledTaskId gets a reference to the given string and assigns it to the ScheduledTaskId field.
func (o *RuleResponseProperties) SetScheduledTaskId(v string) {
	o.ScheduledTaskId = &v
}

// GetTags returns the Tags field value
func (o *RuleResponseProperties) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *RuleResponseProperties) SetTags(v []string) {
	o.Tags = v
}

// GetThrottle returns the Throttle field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RuleResponseProperties) GetThrottle() string {
	if o == nil || o.Throttle.Get() == nil {
		var ret string
		return ret
	}

	return *o.Throttle.Get()
}

// GetThrottleOk returns a tuple with the Throttle field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseProperties) GetThrottleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Throttle.Get(), o.Throttle.IsSet()
}

// SetThrottle sets field value
func (o *RuleResponseProperties) SetThrottle(v string) {
	o.Throttle.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *RuleResponseProperties) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *RuleResponseProperties) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *RuleResponseProperties) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RuleResponseProperties) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy.Get() == nil {
		var ret string
		return ret
	}

	return *o.UpdatedBy.Get()
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseProperties) GetUpdatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedBy.Get(), o.UpdatedBy.IsSet()
}

// SetUpdatedBy sets field value
func (o *RuleResponseProperties) SetUpdatedBy(v string) {
	o.UpdatedBy.Set(&v)
}

func (o RuleResponseProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleResponseProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	toSerialize["api_key_owner"] = o.ApiKeyOwner.Get()
	toSerialize["consumer"] = o.Consumer
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy.Get()
	toSerialize["enabled"] = o.Enabled
	toSerialize["execution_status"] = o.ExecutionStatus
	toSerialize["id"] = o.Id
	if !IsNil(o.LastRun) {
		toSerialize["last_run"] = o.LastRun
	}
	if o.MutedAlertIds != nil {
		toSerialize["muted_alert_ids"] = o.MutedAlertIds
	}
	toSerialize["mute_all"] = o.MuteAll
	toSerialize["name"] = o.Name
	if o.NextRun.IsSet() {
		toSerialize["next_run"] = o.NextRun.Get()
	}
	if !IsNil(o.NotifyWhen) {
		toSerialize["notify_when"] = o.NotifyWhen
	}
	toSerialize["params"] = o.Params
	toSerialize["rule_type_id"] = o.RuleTypeId
	if !IsNil(o.Running) {
		toSerialize["running"] = o.Running
	}
	toSerialize["schedule"] = o.Schedule
	if !IsNil(o.ScheduledTaskId) {
		toSerialize["scheduled_task_id"] = o.ScheduledTaskId
	}
	toSerialize["tags"] = o.Tags
	toSerialize["throttle"] = o.Throttle.Get()
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["updated_by"] = o.UpdatedBy.Get()
	return toSerialize, nil
}

func (o *RuleResponseProperties) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actions",
		"api_key_owner",
		"consumer",
		"created_at",
		"created_by",
		"enabled",
		"execution_status",
		"id",
		"muted_alert_ids",
		"mute_all",
		"name",
		"params",
		"rule_type_id",
		"schedule",
		"tags",
		"throttle",
		"updated_at",
		"updated_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleResponseProperties := _RuleResponseProperties{}

	err = json.Unmarshal(bytes, &varRuleResponseProperties)

	if err != nil {
		return err
	}

	*o = RuleResponseProperties(varRuleResponseProperties)

	return err
}

type NullableRuleResponseProperties struct {
	value *RuleResponseProperties
	isSet bool
}

func (v NullableRuleResponseProperties) Get() *RuleResponseProperties {
	return v.value
}

func (v *NullableRuleResponseProperties) Set(val *RuleResponseProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleResponseProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleResponseProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleResponseProperties(val *RuleResponseProperties) *NullableRuleResponseProperties {
	return &NullableRuleResponseProperties{value: val, isSet: true}
}

func (v NullableRuleResponseProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleResponseProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
