/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the ActionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionsInner{}

// ActionsInner struct for ActionsInner
type ActionsInner struct {
	// The type of connector. This property appears in responses but cannot be set in requests.
	ConnectorTypeId *string                `json:"connector_type_id,omitempty"`
	Frequency       *ActionsInnerFrequency `json:"frequency,omitempty"`
	// The group name for the actions. If you don't need to group actions, set to `default`.
	Group *string `json:"group,omitempty"`
	// The identifier for the connector saved object.
	Id *string `json:"id,omitempty"`
	// The parameters for the action, which are sent to the connector. The `params` are handled as Mustache templates and passed a default set of context.
	Params map[string]interface{} `json:"params,omitempty"`
}

// NewActionsInner instantiates a new ActionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionsInner() *ActionsInner {
	this := ActionsInner{}
	return &this
}

// NewActionsInnerWithDefaults instantiates a new ActionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionsInnerWithDefaults() *ActionsInner {
	this := ActionsInner{}
	return &this
}

// GetConnectorTypeId returns the ConnectorTypeId field value if set, zero value otherwise.
func (o *ActionsInner) GetConnectorTypeId() string {
	if o == nil || IsNil(o.ConnectorTypeId) {
		var ret string
		return ret
	}
	return *o.ConnectorTypeId
}

// GetConnectorTypeIdOk returns a tuple with the ConnectorTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetConnectorTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorTypeId) {
		return nil, false
	}
	return o.ConnectorTypeId, true
}

// HasConnectorTypeId returns a boolean if a field has been set.
func (o *ActionsInner) HasConnectorTypeId() bool {
	if o != nil && !IsNil(o.ConnectorTypeId) {
		return true
	}

	return false
}

// SetConnectorTypeId gets a reference to the given string and assigns it to the ConnectorTypeId field.
func (o *ActionsInner) SetConnectorTypeId(v string) {
	o.ConnectorTypeId = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *ActionsInner) GetFrequency() ActionsInnerFrequency {
	if o == nil || IsNil(o.Frequency) {
		var ret ActionsInnerFrequency
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetFrequencyOk() (*ActionsInnerFrequency, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *ActionsInner) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given ActionsInnerFrequency and assigns it to the Frequency field.
func (o *ActionsInner) SetFrequency(v ActionsInnerFrequency) {
	o.Frequency = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ActionsInner) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ActionsInner) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *ActionsInner) SetGroup(v string) {
	o.Group = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActionsInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActionsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActionsInner) SetId(v string) {
	o.Id = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ActionsInner) GetParams() map[string]interface{} {
	if o == nil || IsNil(o.Params) {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ActionsInner) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *ActionsInner) SetParams(v map[string]interface{}) {
	o.Params = v
}

func (o ActionsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: connector_type_id is readOnly
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

type NullableActionsInner struct {
	value *ActionsInner
	isSet bool
}

func (v NullableActionsInner) Get() *ActionsInner {
	return v.value
}

func (v *NullableActionsInner) Set(val *ActionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableActionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableActionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionsInner(val *ActionsInner) *NullableActionsInner {
	return &NullableActionsInner{value: val, isSet: true}
}

func (v NullableActionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
