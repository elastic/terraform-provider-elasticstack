/*
Alerting

OpenAPI schema for alerting endpoints

API version: 0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerting

import (
	"encoding/json"
)

// checks if the ActionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionsInner{}

// ActionsInner An action that runs under defined conditions.
type ActionsInner struct {
	AlertsFilter *ActionsInnerAlertsFilter `json:"alerts_filter,omitempty"`
	// The type of connector. This property appears in responses but cannot be set in requests.
	ConnectorTypeId *string                `json:"connector_type_id,omitempty"`
	Frequency       *ActionsInnerFrequency `json:"frequency,omitempty"`
	// The group name, which affects when the action runs (for example, when the threshold is met or when the alert is recovered). Each rule type has a list of valid action group names. If you don't need to group actions, set to `default`.
	Group string `json:"group"`
	// The identifier for the connector saved object.
	Id string `json:"id"`
	// The parameters for the action, which are sent to the connector. The `params` are handled as Mustache templates and passed a default set of context.
	Params map[string]interface{} `json:"params"`
	// A universally unique identifier (UUID) for the action.
	Uuid *string `json:"uuid,omitempty"`
}

// NewActionsInner instantiates a new ActionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionsInner(group string, id string, params map[string]interface{}) *ActionsInner {
	this := ActionsInner{}
	this.Group = group
	this.Id = id
	this.Params = params
	return &this
}

// NewActionsInnerWithDefaults instantiates a new ActionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionsInnerWithDefaults() *ActionsInner {
	this := ActionsInner{}
	return &this
}

// GetAlertsFilter returns the AlertsFilter field value if set, zero value otherwise.
func (o *ActionsInner) GetAlertsFilter() ActionsInnerAlertsFilter {
	if o == nil || IsNil(o.AlertsFilter) {
		var ret ActionsInnerAlertsFilter
		return ret
	}
	return *o.AlertsFilter
}

// GetAlertsFilterOk returns a tuple with the AlertsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetAlertsFilterOk() (*ActionsInnerAlertsFilter, bool) {
	if o == nil || IsNil(o.AlertsFilter) {
		return nil, false
	}
	return o.AlertsFilter, true
}

// HasAlertsFilter returns a boolean if a field has been set.
func (o *ActionsInner) HasAlertsFilter() bool {
	if o != nil && !IsNil(o.AlertsFilter) {
		return true
	}

	return false
}

// SetAlertsFilter gets a reference to the given ActionsInnerAlertsFilter and assigns it to the AlertsFilter field.
func (o *ActionsInner) SetAlertsFilter(v ActionsInnerAlertsFilter) {
	o.AlertsFilter = &v
}

// GetConnectorTypeId returns the ConnectorTypeId field value if set, zero value otherwise.
func (o *ActionsInner) GetConnectorTypeId() string {
	if o == nil || IsNil(o.ConnectorTypeId) {
		var ret string
		return ret
	}
	return *o.ConnectorTypeId
}

// GetConnectorTypeIdOk returns a tuple with the ConnectorTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetConnectorTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorTypeId) {
		return nil, false
	}
	return o.ConnectorTypeId, true
}

// HasConnectorTypeId returns a boolean if a field has been set.
func (o *ActionsInner) HasConnectorTypeId() bool {
	if o != nil && !IsNil(o.ConnectorTypeId) {
		return true
	}

	return false
}

// SetConnectorTypeId gets a reference to the given string and assigns it to the ConnectorTypeId field.
func (o *ActionsInner) SetConnectorTypeId(v string) {
	o.ConnectorTypeId = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *ActionsInner) GetFrequency() ActionsInnerFrequency {
	if o == nil || IsNil(o.Frequency) {
		var ret ActionsInnerFrequency
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetFrequencyOk() (*ActionsInnerFrequency, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *ActionsInner) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given ActionsInnerFrequency and assigns it to the Frequency field.
func (o *ActionsInner) SetFrequency(v ActionsInnerFrequency) {
	o.Frequency = &v
}

// GetGroup returns the Group field value
func (o *ActionsInner) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *ActionsInner) SetGroup(v string) {
	o.Group = v
}

// GetId returns the Id field value
func (o *ActionsInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActionsInner) SetId(v string) {
	o.Id = v
}

// GetParams returns the Params field value
func (o *ActionsInner) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *ActionsInner) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ActionsInner) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionsInner) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ActionsInner) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ActionsInner) SetUuid(v string) {
	o.Uuid = &v
}

func (o ActionsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertsFilter) {
		toSerialize["alerts_filter"] = o.AlertsFilter
	}
	if !IsNil(o.ConnectorTypeId) {
		toSerialize["connector_type_id"] = o.ConnectorTypeId
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	toSerialize["group"] = o.Group
	toSerialize["id"] = o.Id
	toSerialize["params"] = o.Params
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableActionsInner struct {
	value *ActionsInner
	isSet bool
}

func (v NullableActionsInner) Get() *ActionsInner {
	return v.value
}

func (v *NullableActionsInner) Set(val *ActionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableActionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableActionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionsInner(val *ActionsInner) *NullableActionsInner {
	return &NullableActionsInner{value: val, isSet: true}
}

func (v NullableActionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
