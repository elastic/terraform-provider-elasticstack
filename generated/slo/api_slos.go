/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type SlosApi interface {

	/*
	CreateSlo Creates an SLO.

	You must have `all` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@return ApiCreateSloRequest
	*/
	CreateSlo(ctx context.Context, spaceId string) ApiCreateSloRequest

	// CreateSloExecute executes the request
	//  @return CreateSloResponse
	CreateSloExecute(r ApiCreateSloRequest) (*CreateSloResponse, *http.Response, error)

	/*
	DeleteSlo Deletes an SLO

	You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param sloId An identifier for the slo.
	@return ApiDeleteSloRequest
	*/
	DeleteSlo(ctx context.Context, spaceId string, sloId string) ApiDeleteSloRequest

	// DeleteSloExecute executes the request
	DeleteSloExecute(r ApiDeleteSloRequest) (*http.Response, error)

	/*
	DisableSlo Disables an SLO

	You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param sloId An identifier for the slo.
	@return ApiDisableSloRequest
	*/
	DisableSlo(ctx context.Context, spaceId string, sloId string) ApiDisableSloRequest

	// DisableSloExecute executes the request
	DisableSloExecute(r ApiDisableSloRequest) (*http.Response, error)

	/*
	EnableSlo Enables an SLO

	You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param sloId An identifier for the slo.
	@return ApiEnableSloRequest
	*/
	EnableSlo(ctx context.Context, spaceId string, sloId string) ApiEnableSloRequest

	// EnableSloExecute executes the request
	EnableSloExecute(r ApiEnableSloRequest) (*http.Response, error)

	/*
	FindSlos Retrieves a paginated list of SLOs

	You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@return ApiFindSlosRequest
	*/
	FindSlos(ctx context.Context, spaceId string) ApiFindSlosRequest

	// FindSlosExecute executes the request
	//  @return FindSloResponse
	FindSlosExecute(r ApiFindSlosRequest) (*FindSloResponse, *http.Response, error)

	/*
	GetSlo Retrieves a SLO

	You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param sloId An identifier for the slo.
	@return ApiGetSloRequest
	*/
	GetSlo(ctx context.Context, spaceId string, sloId string) ApiGetSloRequest

	// GetSloExecute executes the request
	//  @return SloResponse
	GetSloExecute(r ApiGetSloRequest) (*SloResponse, *http.Response, error)

	/*
	HistoricalSummary Retrieves the historical summary for a list of SLOs

	You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@return ApiHistoricalSummaryRequest
	*/
	HistoricalSummary(ctx context.Context, spaceId string) ApiHistoricalSummaryRequest

	// HistoricalSummaryExecute executes the request
	//  @return map[string][]HistoricalSummaryResponseInner
	HistoricalSummaryExecute(r ApiHistoricalSummaryRequest) (*map[string][]HistoricalSummaryResponseInner, *http.Response, error)

	/*
	UpdateSlo Updates an SLO

	You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param sloId An identifier for the slo.
	@return ApiUpdateSloRequest
	*/
	UpdateSlo(ctx context.Context, spaceId string, sloId string) ApiUpdateSloRequest

	// UpdateSloExecute executes the request
	//  @return SloResponse
	UpdateSloExecute(r ApiUpdateSloRequest) (*SloResponse, *http.Response, error)
}

// SlosApiService SlosApi service
type SlosApiService service

type ApiCreateSloRequest struct {
	ctx context.Context
	ApiService SlosApi
	kbnXsrf *string
	spaceId string
	createSloRequest *CreateSloRequest
}

// Cross-site request forgery protection
func (r ApiCreateSloRequest) KbnXsrf(kbnXsrf string) ApiCreateSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiCreateSloRequest) CreateSloRequest(createSloRequest CreateSloRequest) ApiCreateSloRequest {
	r.createSloRequest = &createSloRequest
	return r
}

func (r ApiCreateSloRequest) Execute() (*CreateSloResponse, *http.Response, error) {
	return r.ApiService.CreateSloExecute(r)
}

/*
CreateSlo Creates an SLO.

You must have `all` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
 @return ApiCreateSloRequest
*/
func (a *SlosApiService) CreateSlo(ctx context.Context, spaceId string) ApiCreateSloRequest {
	return ApiCreateSloRequest{
		ApiService: a,
		ctx: ctx,
		spaceId: spaceId,
	}
}

// Execute executes the request
//  @return CreateSloResponse
func (a *SlosApiService) CreateSloExecute(r ApiCreateSloRequest) (*CreateSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SlosApiService.CreateSlo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/slos"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.createSloRequest == nil {
		return localVarReturnValue, nil, reportError("createSloRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	// body params
	localVarPostBody = r.createSloRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSloRequest struct {
	ctx context.Context
	ApiService SlosApi
	kbnXsrf *string
	spaceId string
	sloId string
}

// Cross-site request forgery protection
func (r ApiDeleteSloRequest) KbnXsrf(kbnXsrf string) ApiDeleteSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiDeleteSloRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSloExecute(r)
}

/*
DeleteSlo Deletes an SLO

You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
 @param sloId An identifier for the slo.
 @return ApiDeleteSloRequest
*/
func (a *SlosApiService) DeleteSlo(ctx context.Context, spaceId string, sloId string) ApiDeleteSloRequest {
	return ApiDeleteSloRequest{
		ApiService: a,
		ctx: ctx,
		spaceId: spaceId,
		sloId: sloId,
	}
}

// Execute executes the request
func (a *SlosApiService) DeleteSloExecute(r ApiDeleteSloRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SlosApiService.DeleteSlo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/slos/{sloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sloId"+"}", url.PathEscape(parameterValueToString(r.sloId, "sloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDisableSloRequest struct {
	ctx context.Context
	ApiService SlosApi
	kbnXsrf *string
	spaceId string
	sloId string
}

// Cross-site request forgery protection
func (r ApiDisableSloRequest) KbnXsrf(kbnXsrf string) ApiDisableSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiDisableSloRequest) Execute() (*http.Response, error) {
	return r.ApiService.DisableSloExecute(r)
}

/*
DisableSlo Disables an SLO

You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
 @param sloId An identifier for the slo.
 @return ApiDisableSloRequest
*/
func (a *SlosApiService) DisableSlo(ctx context.Context, spaceId string, sloId string) ApiDisableSloRequest {
	return ApiDisableSloRequest{
		ApiService: a,
		ctx: ctx,
		spaceId: spaceId,
		sloId: sloId,
	}
}

// Execute executes the request
func (a *SlosApiService) DisableSloExecute(r ApiDisableSloRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SlosApiService.DisableSlo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/slos/{sloId}/disable"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sloId"+"}", url.PathEscape(parameterValueToString(r.sloId, "sloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnableSloRequest struct {
	ctx context.Context
	ApiService SlosApi
	kbnXsrf *string
	spaceId string
	sloId string
}

// Cross-site request forgery protection
func (r ApiEnableSloRequest) KbnXsrf(kbnXsrf string) ApiEnableSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiEnableSloRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnableSloExecute(r)
}

/*
EnableSlo Enables an SLO

You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
 @param sloId An identifier for the slo.
 @return ApiEnableSloRequest
*/
func (a *SlosApiService) EnableSlo(ctx context.Context, spaceId string, sloId string) ApiEnableSloRequest {
	return ApiEnableSloRequest{
		ApiService: a,
		ctx: ctx,
		spaceId: spaceId,
		sloId: sloId,
	}
}

// Execute executes the request
func (a *SlosApiService) EnableSloExecute(r ApiEnableSloRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SlosApiService.EnableSlo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/slos/{sloId}/enable"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sloId"+"}", url.PathEscape(parameterValueToString(r.sloId, "sloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFindSlosRequest struct {
	ctx context.Context
	ApiService SlosApi
	kbnXsrf *string
	spaceId string
	name *string
	indicatorTypes *[]string
	page *int32
	perPage *int32
	sortBy *string
	sortDirection *string
}

// Cross-site request forgery protection
func (r ApiFindSlosRequest) KbnXsrf(kbnXsrf string) ApiFindSlosRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

// Filter by name
func (r ApiFindSlosRequest) Name(name string) ApiFindSlosRequest {
	r.name = &name
	return r
}

// Filter by indicator type
func (r ApiFindSlosRequest) IndicatorTypes(indicatorTypes []string) ApiFindSlosRequest {
	r.indicatorTypes = &indicatorTypes
	return r
}

// The page number to return
func (r ApiFindSlosRequest) Page(page int32) ApiFindSlosRequest {
	r.page = &page
	return r
}

// The number of SLOs to return per page
func (r ApiFindSlosRequest) PerPage(perPage int32) ApiFindSlosRequest {
	r.perPage = &perPage
	return r
}

// Sort by field
func (r ApiFindSlosRequest) SortBy(sortBy string) ApiFindSlosRequest {
	r.sortBy = &sortBy
	return r
}

// Sort order
func (r ApiFindSlosRequest) SortDirection(sortDirection string) ApiFindSlosRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFindSlosRequest) Execute() (*FindSloResponse, *http.Response, error) {
	return r.ApiService.FindSlosExecute(r)
}

/*
FindSlos Retrieves a paginated list of SLOs

You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
 @return ApiFindSlosRequest
*/
func (a *SlosApiService) FindSlos(ctx context.Context, spaceId string) ApiFindSlosRequest {
	return ApiFindSlosRequest{
		ApiService: a,
		ctx: ctx,
		spaceId: spaceId,
	}
}

// Execute executes the request
//  @return FindSloResponse
func (a *SlosApiService) FindSlosExecute(r ApiFindSlosRequest) (*FindSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FindSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SlosApiService.FindSlos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/slos"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.indicatorTypes != nil {
		t := *r.indicatorTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "indicatorTypes", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "indicatorTypes", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "perPage", r.perPage, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSloRequest struct {
	ctx context.Context
	ApiService SlosApi
	kbnXsrf *string
	spaceId string
	sloId string
}

// Cross-site request forgery protection
func (r ApiGetSloRequest) KbnXsrf(kbnXsrf string) ApiGetSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiGetSloRequest) Execute() (*SloResponse, *http.Response, error) {
	return r.ApiService.GetSloExecute(r)
}

/*
GetSlo Retrieves a SLO

You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
 @param sloId An identifier for the slo.
 @return ApiGetSloRequest
*/
func (a *SlosApiService) GetSlo(ctx context.Context, spaceId string, sloId string) ApiGetSloRequest {
	return ApiGetSloRequest{
		ApiService: a,
		ctx: ctx,
		spaceId: spaceId,
		sloId: sloId,
	}
}

// Execute executes the request
//  @return SloResponse
func (a *SlosApiService) GetSloExecute(r ApiGetSloRequest) (*SloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SlosApiService.GetSlo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/slos/{sloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sloId"+"}", url.PathEscape(parameterValueToString(r.sloId, "sloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHistoricalSummaryRequest struct {
	ctx context.Context
	ApiService SlosApi
	kbnXsrf *string
	spaceId string
	historicalSummaryRequest *HistoricalSummaryRequest
}

// Cross-site request forgery protection
func (r ApiHistoricalSummaryRequest) KbnXsrf(kbnXsrf string) ApiHistoricalSummaryRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiHistoricalSummaryRequest) HistoricalSummaryRequest(historicalSummaryRequest HistoricalSummaryRequest) ApiHistoricalSummaryRequest {
	r.historicalSummaryRequest = &historicalSummaryRequest
	return r
}

func (r ApiHistoricalSummaryRequest) Execute() (*map[string][]HistoricalSummaryResponseInner, *http.Response, error) {
	return r.ApiService.HistoricalSummaryExecute(r)
}

/*
HistoricalSummary Retrieves the historical summary for a list of SLOs

You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
 @return ApiHistoricalSummaryRequest
*/
func (a *SlosApiService) HistoricalSummary(ctx context.Context, spaceId string) ApiHistoricalSummaryRequest {
	return ApiHistoricalSummaryRequest{
		ApiService: a,
		ctx: ctx,
		spaceId: spaceId,
	}
}

// Execute executes the request
//  @return map[string][]HistoricalSummaryResponseInner
func (a *SlosApiService) HistoricalSummaryExecute(r ApiHistoricalSummaryRequest) (*map[string][]HistoricalSummaryResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *map[string][]HistoricalSummaryResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SlosApiService.HistoricalSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/internal/observability/slos/_historical_summary"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.historicalSummaryRequest == nil {
		return localVarReturnValue, nil, reportError("historicalSummaryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	// body params
	localVarPostBody = r.historicalSummaryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSloRequest struct {
	ctx context.Context
	ApiService SlosApi
	kbnXsrf *string
	spaceId string
	sloId string
	updateSloRequest *UpdateSloRequest
}

// Cross-site request forgery protection
func (r ApiUpdateSloRequest) KbnXsrf(kbnXsrf string) ApiUpdateSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiUpdateSloRequest) UpdateSloRequest(updateSloRequest UpdateSloRequest) ApiUpdateSloRequest {
	r.updateSloRequest = &updateSloRequest
	return r
}

func (r ApiUpdateSloRequest) Execute() (*SloResponse, *http.Response, error) {
	return r.ApiService.UpdateSloExecute(r)
}

/*
UpdateSlo Updates an SLO

You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
 @param sloId An identifier for the slo.
 @return ApiUpdateSloRequest
*/
func (a *SlosApiService) UpdateSlo(ctx context.Context, spaceId string, sloId string) ApiUpdateSloRequest {
	return ApiUpdateSloRequest{
		ApiService: a,
		ctx: ctx,
		spaceId: spaceId,
		sloId: sloId,
	}
}

// Execute executes the request
//  @return SloResponse
func (a *SlosApiService) UpdateSloExecute(r ApiUpdateSloRequest) (*SloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SlosApiService.UpdateSlo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/slos/{sloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sloId"+"}", url.PathEscape(parameterValueToString(r.sloId, "sloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.updateSloRequest == nil {
		return localVarReturnValue, nil, reportError("updateSloRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	// body params
	localVarPostBody = r.updateSloRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
