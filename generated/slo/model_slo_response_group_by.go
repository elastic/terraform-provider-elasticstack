/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"fmt"
)

// SloResponseGroupBy - optional group by field to use to generate an SLO per distinct value
type SloResponseGroupBy struct {
	ArrayOfString *[]string
	String        *string
}

// []stringAsSloResponseGroupBy is a convenience function that returns []string wrapped in SloResponseGroupBy
func ArrayOfStringAsSloResponseGroupBy(v *[]string) SloResponseGroupBy {
	return SloResponseGroupBy{
		ArrayOfString: v,
	}
}

// stringAsSloResponseGroupBy is a convenience function that returns string wrapped in SloResponseGroupBy
func StringAsSloResponseGroupBy(v *string) SloResponseGroupBy {
	return SloResponseGroupBy{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloResponseGroupBy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfString
	err = json.Unmarshal(data, &dst.ArrayOfString)
	if err == nil {
		jsonArraystring, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArraystring) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.String)
		if string(jsonstring) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfString = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloResponseGroupBy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloResponseGroupBy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloResponseGroupBy) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloResponseGroupBy) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableSloResponseGroupBy struct {
	value *SloResponseGroupBy
	isSet bool
}

func (v NullableSloResponseGroupBy) Get() *SloResponseGroupBy {
	return v.value
}

func (v *NullableSloResponseGroupBy) Set(val *SloResponseGroupBy) {
	v.value = val
	v.isSet = true
}

func (v NullableSloResponseGroupBy) IsSet() bool {
	return v.isSet
}

func (v *NullableSloResponseGroupBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloResponseGroupBy(val *SloResponseGroupBy) *NullableSloResponseGroupBy {
	return &NullableSloResponseGroupBy{value: val, isSet: true}
}

func (v NullableSloResponseGroupBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloResponseGroupBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
