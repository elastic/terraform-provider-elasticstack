/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"fmt"
)

// FindSloDefinitionsResponse - A paginated response of SLO definitions matching the query.
type FindSloDefinitionsResponse struct {
	FindSloDefinitionsResponseOneOf  *FindSloDefinitionsResponseOneOf
	FindSloDefinitionsResponseOneOf1 *FindSloDefinitionsResponseOneOf1
}

// FindSloDefinitionsResponseOneOfAsFindSloDefinitionsResponse is a convenience function that returns FindSloDefinitionsResponseOneOf wrapped in FindSloDefinitionsResponse
func FindSloDefinitionsResponseOneOfAsFindSloDefinitionsResponse(v *FindSloDefinitionsResponseOneOf) FindSloDefinitionsResponse {
	return FindSloDefinitionsResponse{
		FindSloDefinitionsResponseOneOf: v,
	}
}

// FindSloDefinitionsResponseOneOf1AsFindSloDefinitionsResponse is a convenience function that returns FindSloDefinitionsResponseOneOf1 wrapped in FindSloDefinitionsResponse
func FindSloDefinitionsResponseOneOf1AsFindSloDefinitionsResponse(v *FindSloDefinitionsResponseOneOf1) FindSloDefinitionsResponse {
	return FindSloDefinitionsResponse{
		FindSloDefinitionsResponseOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FindSloDefinitionsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FindSloDefinitionsResponseOneOf
	err = json.Unmarshal(data, &dst.FindSloDefinitionsResponseOneOf)
	if err == nil {
		jsonFindSloDefinitionsResponseOneOf, _ := json.Marshal(dst.FindSloDefinitionsResponseOneOf)
		if string(jsonFindSloDefinitionsResponseOneOf) == "{}" { // empty struct
			dst.FindSloDefinitionsResponseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.FindSloDefinitionsResponseOneOf = nil
	}

	// try to unmarshal data into FindSloDefinitionsResponseOneOf1
	err = json.Unmarshal(data, &dst.FindSloDefinitionsResponseOneOf1)
	if err == nil {
		jsonFindSloDefinitionsResponseOneOf1, _ := json.Marshal(dst.FindSloDefinitionsResponseOneOf1)
		if string(jsonFindSloDefinitionsResponseOneOf1) == "{}" { // empty struct
			dst.FindSloDefinitionsResponseOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.FindSloDefinitionsResponseOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FindSloDefinitionsResponseOneOf = nil
		dst.FindSloDefinitionsResponseOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FindSloDefinitionsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FindSloDefinitionsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FindSloDefinitionsResponse) MarshalJSON() ([]byte, error) {
	if src.FindSloDefinitionsResponseOneOf != nil {
		return json.Marshal(&src.FindSloDefinitionsResponseOneOf)
	}

	if src.FindSloDefinitionsResponseOneOf1 != nil {
		return json.Marshal(&src.FindSloDefinitionsResponseOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FindSloDefinitionsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FindSloDefinitionsResponseOneOf != nil {
		return obj.FindSloDefinitionsResponseOneOf
	}

	if obj.FindSloDefinitionsResponseOneOf1 != nil {
		return obj.FindSloDefinitionsResponseOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableFindSloDefinitionsResponse struct {
	value *FindSloDefinitionsResponse
	isSet bool
}

func (v NullableFindSloDefinitionsResponse) Get() *FindSloDefinitionsResponse {
	return v.value
}

func (v *NullableFindSloDefinitionsResponse) Set(val *FindSloDefinitionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFindSloDefinitionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFindSloDefinitionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindSloDefinitionsResponse(val *FindSloDefinitionsResponse) *NullableFindSloDefinitionsResponse {
	return &NullableFindSloDefinitionsResponse{value: val, isSet: true}
}

func (v NullableFindSloDefinitionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindSloDefinitionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
