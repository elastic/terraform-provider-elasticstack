/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the IndicatorPropertiesHistogramParamsGood type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndicatorPropertiesHistogramParamsGood{}

// IndicatorPropertiesHistogramParamsGood An object defining the \"good\" events
type IndicatorPropertiesHistogramParamsGood struct {
	// The field use to aggregate the good events.
	Field string `json:"field"`
	// The type of aggregation to use.
	Aggregation string `json:"aggregation"`
	// The filter for good events.
	Filter *string `json:"filter,omitempty"`
	// The starting value of the range. Only required for \"range\" aggregations.
	From *float64 `json:"from,omitempty"`
	// The ending value of the range. Only required for \"range\" aggregations.
	To *float64 `json:"to,omitempty"`
}

// NewIndicatorPropertiesHistogramParamsGood instantiates a new IndicatorPropertiesHistogramParamsGood object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicatorPropertiesHistogramParamsGood(field string, aggregation string) *IndicatorPropertiesHistogramParamsGood {
	this := IndicatorPropertiesHistogramParamsGood{}
	this.Field = field
	this.Aggregation = aggregation
	return &this
}

// NewIndicatorPropertiesHistogramParamsGoodWithDefaults instantiates a new IndicatorPropertiesHistogramParamsGood object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorPropertiesHistogramParamsGoodWithDefaults() *IndicatorPropertiesHistogramParamsGood {
	this := IndicatorPropertiesHistogramParamsGood{}
	return &this
}

// GetField returns the Field field value
func (o *IndicatorPropertiesHistogramParamsGood) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesHistogramParamsGood) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *IndicatorPropertiesHistogramParamsGood) SetField(v string) {
	o.Field = v
}

// GetAggregation returns the Aggregation field value
func (o *IndicatorPropertiesHistogramParamsGood) GetAggregation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesHistogramParamsGood) GetAggregationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *IndicatorPropertiesHistogramParamsGood) SetAggregation(v string) {
	o.Aggregation = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *IndicatorPropertiesHistogramParamsGood) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesHistogramParamsGood) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *IndicatorPropertiesHistogramParamsGood) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *IndicatorPropertiesHistogramParamsGood) SetFilter(v string) {
	o.Filter = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *IndicatorPropertiesHistogramParamsGood) GetFrom() float64 {
	if o == nil || IsNil(o.From) {
		var ret float64
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesHistogramParamsGood) GetFromOk() (*float64, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *IndicatorPropertiesHistogramParamsGood) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given float64 and assigns it to the From field.
func (o *IndicatorPropertiesHistogramParamsGood) SetFrom(v float64) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *IndicatorPropertiesHistogramParamsGood) GetTo() float64 {
	if o == nil || IsNil(o.To) {
		var ret float64
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesHistogramParamsGood) GetToOk() (*float64, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *IndicatorPropertiesHistogramParamsGood) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given float64 and assigns it to the To field.
func (o *IndicatorPropertiesHistogramParamsGood) SetTo(v float64) {
	o.To = &v
}

func (o IndicatorPropertiesHistogramParamsGood) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndicatorPropertiesHistogramParamsGood) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["aggregation"] = o.Aggregation
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableIndicatorPropertiesHistogramParamsGood struct {
	value *IndicatorPropertiesHistogramParamsGood
	isSet bool
}

func (v NullableIndicatorPropertiesHistogramParamsGood) Get() *IndicatorPropertiesHistogramParamsGood {
	return v.value
}

func (v *NullableIndicatorPropertiesHistogramParamsGood) Set(val *IndicatorPropertiesHistogramParamsGood) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorPropertiesHistogramParamsGood) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorPropertiesHistogramParamsGood) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorPropertiesHistogramParamsGood(val *IndicatorPropertiesHistogramParamsGood) *NullableIndicatorPropertiesHistogramParamsGood {
	return &NullableIndicatorPropertiesHistogramParamsGood{value: val, isSet: true}
}

func (v NullableIndicatorPropertiesHistogramParamsGood) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorPropertiesHistogramParamsGood) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
