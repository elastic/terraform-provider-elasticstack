/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the KqlWithFiltersOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KqlWithFiltersOneOf{}

// KqlWithFiltersOneOf struct for KqlWithFiltersOneOf
type KqlWithFiltersOneOf struct {
	KqlQuery *string  `json:"kqlQuery,omitempty"`
	Filters  []Filter `json:"filters,omitempty"`
}

// NewKqlWithFiltersOneOf instantiates a new KqlWithFiltersOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKqlWithFiltersOneOf() *KqlWithFiltersOneOf {
	this := KqlWithFiltersOneOf{}
	return &this
}

// NewKqlWithFiltersOneOfWithDefaults instantiates a new KqlWithFiltersOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKqlWithFiltersOneOfWithDefaults() *KqlWithFiltersOneOf {
	this := KqlWithFiltersOneOf{}
	return &this
}

// GetKqlQuery returns the KqlQuery field value if set, zero value otherwise.
func (o *KqlWithFiltersOneOf) GetKqlQuery() string {
	if o == nil || IsNil(o.KqlQuery) {
		var ret string
		return ret
	}
	return *o.KqlQuery
}

// GetKqlQueryOk returns a tuple with the KqlQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KqlWithFiltersOneOf) GetKqlQueryOk() (*string, bool) {
	if o == nil || IsNil(o.KqlQuery) {
		return nil, false
	}
	return o.KqlQuery, true
}

// HasKqlQuery returns a boolean if a field has been set.
func (o *KqlWithFiltersOneOf) HasKqlQuery() bool {
	if o != nil && !IsNil(o.KqlQuery) {
		return true
	}

	return false
}

// SetKqlQuery gets a reference to the given string and assigns it to the KqlQuery field.
func (o *KqlWithFiltersOneOf) SetKqlQuery(v string) {
	o.KqlQuery = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *KqlWithFiltersOneOf) GetFilters() []Filter {
	if o == nil || IsNil(o.Filters) {
		var ret []Filter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KqlWithFiltersOneOf) GetFiltersOk() ([]Filter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *KqlWithFiltersOneOf) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []Filter and assigns it to the Filters field.
func (o *KqlWithFiltersOneOf) SetFilters(v []Filter) {
	o.Filters = v
}

func (o KqlWithFiltersOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KqlWithFiltersOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KqlQuery) {
		toSerialize["kqlQuery"] = o.KqlQuery
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableKqlWithFiltersOneOf struct {
	value *KqlWithFiltersOneOf
	isSet bool
}

func (v NullableKqlWithFiltersOneOf) Get() *KqlWithFiltersOneOf {
	return v.value
}

func (v *NullableKqlWithFiltersOneOf) Set(val *KqlWithFiltersOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableKqlWithFiltersOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableKqlWithFiltersOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKqlWithFiltersOneOf(val *KqlWithFiltersOneOf) *NullableKqlWithFiltersOneOf {
	return &NullableKqlWithFiltersOneOf{value: val, isSet: true}
}

func (v NullableKqlWithFiltersOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKqlWithFiltersOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
