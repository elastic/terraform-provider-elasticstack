/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SloWithSummaryResponseIndicator - struct for SloWithSummaryResponseIndicator
type SloWithSummaryResponseIndicator struct {
	IndicatorPropertiesApmAvailability *IndicatorPropertiesApmAvailability
	IndicatorPropertiesApmLatency *IndicatorPropertiesApmLatency
	IndicatorPropertiesCustomKql *IndicatorPropertiesCustomKql
	IndicatorPropertiesCustomMetric *IndicatorPropertiesCustomMetric
	IndicatorPropertiesHistogram *IndicatorPropertiesHistogram
	IndicatorPropertiesTimesliceMetric *IndicatorPropertiesTimesliceMetric
}

// IndicatorPropertiesApmAvailabilityAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesApmAvailability wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesApmAvailabilityAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesApmAvailability) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesApmAvailability: v,
	}
}

// IndicatorPropertiesApmLatencyAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesApmLatency wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesApmLatencyAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesApmLatency) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesApmLatency: v,
	}
}

// IndicatorPropertiesCustomKqlAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesCustomKql wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesCustomKqlAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesCustomKql) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesCustomKql: v,
	}
}

// IndicatorPropertiesCustomMetricAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesCustomMetric wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesCustomMetricAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesCustomMetric) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesCustomMetric: v,
	}
}

// IndicatorPropertiesHistogramAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesHistogram wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesHistogramAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesHistogram) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesHistogram: v,
	}
}

// IndicatorPropertiesTimesliceMetricAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesTimesliceMetric wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesTimesliceMetricAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesTimesliceMetric) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesTimesliceMetric: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloWithSummaryResponseIndicator) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IndicatorPropertiesApmAvailability
	err = newStrictDecoder(data).Decode(&dst.IndicatorPropertiesApmAvailability)
	if err == nil {
		jsonIndicatorPropertiesApmAvailability, _ := json.Marshal(dst.IndicatorPropertiesApmAvailability)
		if string(jsonIndicatorPropertiesApmAvailability) == "{}" { // empty struct
			dst.IndicatorPropertiesApmAvailability = nil
		} else {
			if err = validator.Validate(dst.IndicatorPropertiesApmAvailability); err != nil {
				dst.IndicatorPropertiesApmAvailability = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndicatorPropertiesApmAvailability = nil
	}

	// try to unmarshal data into IndicatorPropertiesApmLatency
	err = newStrictDecoder(data).Decode(&dst.IndicatorPropertiesApmLatency)
	if err == nil {
		jsonIndicatorPropertiesApmLatency, _ := json.Marshal(dst.IndicatorPropertiesApmLatency)
		if string(jsonIndicatorPropertiesApmLatency) == "{}" { // empty struct
			dst.IndicatorPropertiesApmLatency = nil
		} else {
			if err = validator.Validate(dst.IndicatorPropertiesApmLatency); err != nil {
				dst.IndicatorPropertiesApmLatency = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndicatorPropertiesApmLatency = nil
	}

	// try to unmarshal data into IndicatorPropertiesCustomKql
	err = newStrictDecoder(data).Decode(&dst.IndicatorPropertiesCustomKql)
	if err == nil {
		jsonIndicatorPropertiesCustomKql, _ := json.Marshal(dst.IndicatorPropertiesCustomKql)
		if string(jsonIndicatorPropertiesCustomKql) == "{}" { // empty struct
			dst.IndicatorPropertiesCustomKql = nil
		} else {
			if err = validator.Validate(dst.IndicatorPropertiesCustomKql); err != nil {
				dst.IndicatorPropertiesCustomKql = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndicatorPropertiesCustomKql = nil
	}

	// try to unmarshal data into IndicatorPropertiesCustomMetric
	err = newStrictDecoder(data).Decode(&dst.IndicatorPropertiesCustomMetric)
	if err == nil {
		jsonIndicatorPropertiesCustomMetric, _ := json.Marshal(dst.IndicatorPropertiesCustomMetric)
		if string(jsonIndicatorPropertiesCustomMetric) == "{}" { // empty struct
			dst.IndicatorPropertiesCustomMetric = nil
		} else {
			if err = validator.Validate(dst.IndicatorPropertiesCustomMetric); err != nil {
				dst.IndicatorPropertiesCustomMetric = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndicatorPropertiesCustomMetric = nil
	}

	// try to unmarshal data into IndicatorPropertiesHistogram
	err = newStrictDecoder(data).Decode(&dst.IndicatorPropertiesHistogram)
	if err == nil {
		jsonIndicatorPropertiesHistogram, _ := json.Marshal(dst.IndicatorPropertiesHistogram)
		if string(jsonIndicatorPropertiesHistogram) == "{}" { // empty struct
			dst.IndicatorPropertiesHistogram = nil
		} else {
			if err = validator.Validate(dst.IndicatorPropertiesHistogram); err != nil {
				dst.IndicatorPropertiesHistogram = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndicatorPropertiesHistogram = nil
	}

	// try to unmarshal data into IndicatorPropertiesTimesliceMetric
	err = newStrictDecoder(data).Decode(&dst.IndicatorPropertiesTimesliceMetric)
	if err == nil {
		jsonIndicatorPropertiesTimesliceMetric, _ := json.Marshal(dst.IndicatorPropertiesTimesliceMetric)
		if string(jsonIndicatorPropertiesTimesliceMetric) == "{}" { // empty struct
			dst.IndicatorPropertiesTimesliceMetric = nil
		} else {
			if err = validator.Validate(dst.IndicatorPropertiesTimesliceMetric); err != nil {
				dst.IndicatorPropertiesTimesliceMetric = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndicatorPropertiesTimesliceMetric = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IndicatorPropertiesApmAvailability = nil
		dst.IndicatorPropertiesApmLatency = nil
		dst.IndicatorPropertiesCustomKql = nil
		dst.IndicatorPropertiesCustomMetric = nil
		dst.IndicatorPropertiesHistogram = nil
		dst.IndicatorPropertiesTimesliceMetric = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SloWithSummaryResponseIndicator)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SloWithSummaryResponseIndicator)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloWithSummaryResponseIndicator) MarshalJSON() ([]byte, error) {
	if src.IndicatorPropertiesApmAvailability != nil {
		return json.Marshal(&src.IndicatorPropertiesApmAvailability)
	}

	if src.IndicatorPropertiesApmLatency != nil {
		return json.Marshal(&src.IndicatorPropertiesApmLatency)
	}

	if src.IndicatorPropertiesCustomKql != nil {
		return json.Marshal(&src.IndicatorPropertiesCustomKql)
	}

	if src.IndicatorPropertiesCustomMetric != nil {
		return json.Marshal(&src.IndicatorPropertiesCustomMetric)
	}

	if src.IndicatorPropertiesHistogram != nil {
		return json.Marshal(&src.IndicatorPropertiesHistogram)
	}

	if src.IndicatorPropertiesTimesliceMetric != nil {
		return json.Marshal(&src.IndicatorPropertiesTimesliceMetric)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloWithSummaryResponseIndicator) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IndicatorPropertiesApmAvailability != nil {
		return obj.IndicatorPropertiesApmAvailability
	}

	if obj.IndicatorPropertiesApmLatency != nil {
		return obj.IndicatorPropertiesApmLatency
	}

	if obj.IndicatorPropertiesCustomKql != nil {
		return obj.IndicatorPropertiesCustomKql
	}

	if obj.IndicatorPropertiesCustomMetric != nil {
		return obj.IndicatorPropertiesCustomMetric
	}

	if obj.IndicatorPropertiesHistogram != nil {
		return obj.IndicatorPropertiesHistogram
	}

	if obj.IndicatorPropertiesTimesliceMetric != nil {
		return obj.IndicatorPropertiesTimesliceMetric
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SloWithSummaryResponseIndicator) GetActualInstanceValue() (interface{}) {
	if obj.IndicatorPropertiesApmAvailability != nil {
		return *obj.IndicatorPropertiesApmAvailability
	}

	if obj.IndicatorPropertiesApmLatency != nil {
		return *obj.IndicatorPropertiesApmLatency
	}

	if obj.IndicatorPropertiesCustomKql != nil {
		return *obj.IndicatorPropertiesCustomKql
	}

	if obj.IndicatorPropertiesCustomMetric != nil {
		return *obj.IndicatorPropertiesCustomMetric
	}

	if obj.IndicatorPropertiesHistogram != nil {
		return *obj.IndicatorPropertiesHistogram
	}

	if obj.IndicatorPropertiesTimesliceMetric != nil {
		return *obj.IndicatorPropertiesTimesliceMetric
	}

	// all schemas are nil
	return nil
}

type NullableSloWithSummaryResponseIndicator struct {
	value *SloWithSummaryResponseIndicator
	isSet bool
}

func (v NullableSloWithSummaryResponseIndicator) Get() *SloWithSummaryResponseIndicator {
	return v.value
}

func (v *NullableSloWithSummaryResponseIndicator) Set(val *SloWithSummaryResponseIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableSloWithSummaryResponseIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableSloWithSummaryResponseIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloWithSummaryResponseIndicator(val *SloWithSummaryResponseIndicator) *NullableSloWithSummaryResponseIndicator {
	return &NullableSloWithSummaryResponseIndicator{value: val, isSet: true}
}

func (v NullableSloWithSummaryResponseIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloWithSummaryResponseIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


