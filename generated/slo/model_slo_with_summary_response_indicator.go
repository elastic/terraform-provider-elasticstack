/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"fmt"
)

// SloWithSummaryResponseIndicator - struct for SloWithSummaryResponseIndicator
type SloWithSummaryResponseIndicator struct {
	IndicatorPropertiesApmAvailability *IndicatorPropertiesApmAvailability
	IndicatorPropertiesApmLatency      *IndicatorPropertiesApmLatency
	IndicatorPropertiesCustomKql       *IndicatorPropertiesCustomKql
	IndicatorPropertiesCustomMetric    *IndicatorPropertiesCustomMetric
	IndicatorPropertiesHistogram       *IndicatorPropertiesHistogram
	IndicatorPropertiesTimesliceMetric *IndicatorPropertiesTimesliceMetric
}

// IndicatorPropertiesApmAvailabilityAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesApmAvailability wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesApmAvailabilityAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesApmAvailability) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesApmAvailability: v,
	}
}

// IndicatorPropertiesApmLatencyAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesApmLatency wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesApmLatencyAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesApmLatency) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesApmLatency: v,
	}
}

// IndicatorPropertiesCustomKqlAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesCustomKql wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesCustomKqlAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesCustomKql) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesCustomKql: v,
	}
}

// IndicatorPropertiesCustomMetricAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesCustomMetric wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesCustomMetricAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesCustomMetric) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesCustomMetric: v,
	}
}

// IndicatorPropertiesHistogramAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesHistogram wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesHistogramAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesHistogram) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesHistogram: v,
	}
}

// IndicatorPropertiesTimesliceMetricAsSloWithSummaryResponseIndicator is a convenience function that returns IndicatorPropertiesTimesliceMetric wrapped in SloWithSummaryResponseIndicator
func IndicatorPropertiesTimesliceMetricAsSloWithSummaryResponseIndicator(v *IndicatorPropertiesTimesliceMetric) SloWithSummaryResponseIndicator {
	return SloWithSummaryResponseIndicator{
		IndicatorPropertiesTimesliceMetric: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SloWithSummaryResponseIndicator) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'indicator_properties_apm_availability'
	if jsonDict["type"] == "indicator_properties_apm_availability" {
		// try to unmarshal JSON data into IndicatorPropertiesApmAvailability
		err = json.Unmarshal(data, &dst.IndicatorPropertiesApmAvailability)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesApmAvailability, return on the first match
		} else {
			dst.IndicatorPropertiesApmAvailability = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesApmAvailability: %s", err.Error())
		}
	}

	// check if the discriminator value is 'indicator_properties_apm_latency'
	if jsonDict["type"] == "indicator_properties_apm_latency" {
		// try to unmarshal JSON data into IndicatorPropertiesApmLatency
		err = json.Unmarshal(data, &dst.IndicatorPropertiesApmLatency)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesApmLatency, return on the first match
		} else {
			dst.IndicatorPropertiesApmLatency = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesApmLatency: %s", err.Error())
		}
	}

	// check if the discriminator value is 'indicator_properties_custom_kql'
	if jsonDict["type"] == "indicator_properties_custom_kql" {
		// try to unmarshal JSON data into IndicatorPropertiesCustomKql
		err = json.Unmarshal(data, &dst.IndicatorPropertiesCustomKql)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesCustomKql, return on the first match
		} else {
			dst.IndicatorPropertiesCustomKql = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesCustomKql: %s", err.Error())
		}
	}

	// check if the discriminator value is 'indicator_properties_custom_metric'
	if jsonDict["type"] == "indicator_properties_custom_metric" {
		// try to unmarshal JSON data into IndicatorPropertiesCustomMetric
		err = json.Unmarshal(data, &dst.IndicatorPropertiesCustomMetric)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesCustomMetric, return on the first match
		} else {
			dst.IndicatorPropertiesCustomMetric = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesCustomMetric: %s", err.Error())
		}
	}

	// check if the discriminator value is 'indicator_properties_histogram'
	if jsonDict["type"] == "indicator_properties_histogram" {
		// try to unmarshal JSON data into IndicatorPropertiesHistogram
		err = json.Unmarshal(data, &dst.IndicatorPropertiesHistogram)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesHistogram, return on the first match
		} else {
			dst.IndicatorPropertiesHistogram = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesHistogram: %s", err.Error())
		}
	}

	// check if the discriminator value is 'indicator_properties_timeslice_metric'
	if jsonDict["type"] == "indicator_properties_timeslice_metric" {
		// try to unmarshal JSON data into IndicatorPropertiesTimesliceMetric
		err = json.Unmarshal(data, &dst.IndicatorPropertiesTimesliceMetric)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesTimesliceMetric, return on the first match
		} else {
			dst.IndicatorPropertiesTimesliceMetric = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesTimesliceMetric: %s", err.Error())
		}
	}

	// check if the discriminator value is 'sli.apm.transactionDuration'
	if jsonDict["type"] == "sli.apm.transactionDuration" {
		// try to unmarshal JSON data into IndicatorPropertiesApmLatency
		err = json.Unmarshal(data, &dst.IndicatorPropertiesApmLatency)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesApmLatency, return on the first match
		} else {
			dst.IndicatorPropertiesApmLatency = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesApmLatency: %s", err.Error())
		}
	}

	// check if the discriminator value is 'sli.apm.transactionErrorRate'
	if jsonDict["type"] == "sli.apm.transactionErrorRate" {
		// try to unmarshal JSON data into IndicatorPropertiesApmAvailability
		err = json.Unmarshal(data, &dst.IndicatorPropertiesApmAvailability)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesApmAvailability, return on the first match
		} else {
			dst.IndicatorPropertiesApmAvailability = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesApmAvailability: %s", err.Error())
		}
	}

	// check if the discriminator value is 'sli.histogram.custom'
	if jsonDict["type"] == "sli.histogram.custom" {
		// try to unmarshal JSON data into IndicatorPropertiesHistogram
		err = json.Unmarshal(data, &dst.IndicatorPropertiesHistogram)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesHistogram, return on the first match
		} else {
			dst.IndicatorPropertiesHistogram = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesHistogram: %s", err.Error())
		}
	}

	// check if the discriminator value is 'sli.kql.custom'
	if jsonDict["type"] == "sli.kql.custom" {
		// try to unmarshal JSON data into IndicatorPropertiesCustomKql
		err = json.Unmarshal(data, &dst.IndicatorPropertiesCustomKql)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesCustomKql, return on the first match
		} else {
			dst.IndicatorPropertiesCustomKql = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesCustomKql: %s", err.Error())
		}
	}

	// check if the discriminator value is 'sli.metric.custom'
	if jsonDict["type"] == "sli.metric.custom" {
		// try to unmarshal JSON data into IndicatorPropertiesCustomMetric
		err = json.Unmarshal(data, &dst.IndicatorPropertiesCustomMetric)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesCustomMetric, return on the first match
		} else {
			dst.IndicatorPropertiesCustomMetric = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesCustomMetric: %s", err.Error())
		}
	}

	// check if the discriminator value is 'sli.metric.timeslice'
	if jsonDict["type"] == "sli.metric.timeslice" {
		// try to unmarshal JSON data into IndicatorPropertiesTimesliceMetric
		err = json.Unmarshal(data, &dst.IndicatorPropertiesTimesliceMetric)
		if err == nil {
			return nil // data stored in dst.IndicatorPropertiesTimesliceMetric, return on the first match
		} else {
			dst.IndicatorPropertiesTimesliceMetric = nil
			return fmt.Errorf("failed to unmarshal SloWithSummaryResponseIndicator as IndicatorPropertiesTimesliceMetric: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SloWithSummaryResponseIndicator) MarshalJSON() ([]byte, error) {
	if src.IndicatorPropertiesApmAvailability != nil {
		return json.Marshal(&src.IndicatorPropertiesApmAvailability)
	}

	if src.IndicatorPropertiesApmLatency != nil {
		return json.Marshal(&src.IndicatorPropertiesApmLatency)
	}

	if src.IndicatorPropertiesCustomKql != nil {
		return json.Marshal(&src.IndicatorPropertiesCustomKql)
	}

	if src.IndicatorPropertiesCustomMetric != nil {
		return json.Marshal(&src.IndicatorPropertiesCustomMetric)
	}

	if src.IndicatorPropertiesHistogram != nil {
		return json.Marshal(&src.IndicatorPropertiesHistogram)
	}

	if src.IndicatorPropertiesTimesliceMetric != nil {
		return json.Marshal(&src.IndicatorPropertiesTimesliceMetric)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SloWithSummaryResponseIndicator) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IndicatorPropertiesApmAvailability != nil {
		return obj.IndicatorPropertiesApmAvailability
	}

	if obj.IndicatorPropertiesApmLatency != nil {
		return obj.IndicatorPropertiesApmLatency
	}

	if obj.IndicatorPropertiesCustomKql != nil {
		return obj.IndicatorPropertiesCustomKql
	}

	if obj.IndicatorPropertiesCustomMetric != nil {
		return obj.IndicatorPropertiesCustomMetric
	}

	if obj.IndicatorPropertiesHistogram != nil {
		return obj.IndicatorPropertiesHistogram
	}

	if obj.IndicatorPropertiesTimesliceMetric != nil {
		return obj.IndicatorPropertiesTimesliceMetric
	}

	// all schemas are nil
	return nil
}

type NullableSloWithSummaryResponseIndicator struct {
	value *SloWithSummaryResponseIndicator
	isSet bool
}

func (v NullableSloWithSummaryResponseIndicator) Get() *SloWithSummaryResponseIndicator {
	return v.value
}

func (v *NullableSloWithSummaryResponseIndicator) Set(val *SloWithSummaryResponseIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableSloWithSummaryResponseIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableSloWithSummaryResponseIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloWithSummaryResponseIndicator(val *SloWithSummaryResponseIndicator) *NullableSloWithSummaryResponseIndicator {
	return &NullableSloWithSummaryResponseIndicator{value: val, isSet: true}
}

func (v NullableSloWithSummaryResponseIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloWithSummaryResponseIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
