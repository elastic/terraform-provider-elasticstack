/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the Summary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Summary{}

// Summary struct for Summary
type Summary struct {
	Status *string `json:"status,omitempty"`
	SliValue *float32 `json:"sliValue,omitempty"`
	ErrorBudget *ErrorBudget `json:"errorBudget,omitempty"`
}

// NewSummary instantiates a new Summary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummary() *Summary {
	this := Summary{}
	return &this
}

// NewSummaryWithDefaults instantiates a new Summary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryWithDefaults() *Summary {
	this := Summary{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Summary) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Summary) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Summary) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Summary) SetStatus(v string) {
	o.Status = &v
}

// GetSliValue returns the SliValue field value if set, zero value otherwise.
func (o *Summary) GetSliValue() float32 {
	if o == nil || IsNil(o.SliValue) {
		var ret float32
		return ret
	}
	return *o.SliValue
}

// GetSliValueOk returns a tuple with the SliValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Summary) GetSliValueOk() (*float32, bool) {
	if o == nil || IsNil(o.SliValue) {
		return nil, false
	}
	return o.SliValue, true
}

// HasSliValue returns a boolean if a field has been set.
func (o *Summary) HasSliValue() bool {
	if o != nil && !IsNil(o.SliValue) {
		return true
	}

	return false
}

// SetSliValue gets a reference to the given float32 and assigns it to the SliValue field.
func (o *Summary) SetSliValue(v float32) {
	o.SliValue = &v
}

// GetErrorBudget returns the ErrorBudget field value if set, zero value otherwise.
func (o *Summary) GetErrorBudget() ErrorBudget {
	if o == nil || IsNil(o.ErrorBudget) {
		var ret ErrorBudget
		return ret
	}
	return *o.ErrorBudget
}

// GetErrorBudgetOk returns a tuple with the ErrorBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Summary) GetErrorBudgetOk() (*ErrorBudget, bool) {
	if o == nil || IsNil(o.ErrorBudget) {
		return nil, false
	}
	return o.ErrorBudget, true
}

// HasErrorBudget returns a boolean if a field has been set.
func (o *Summary) HasErrorBudget() bool {
	if o != nil && !IsNil(o.ErrorBudget) {
		return true
	}

	return false
}

// SetErrorBudget gets a reference to the given ErrorBudget and assigns it to the ErrorBudget field.
func (o *Summary) SetErrorBudget(v ErrorBudget) {
	o.ErrorBudget = &v
}

func (o Summary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Summary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SliValue) {
		toSerialize["sliValue"] = o.SliValue
	}
	if !IsNil(o.ErrorBudget) {
		toSerialize["errorBudget"] = o.ErrorBudget
	}
	return toSerialize, nil
}

type NullableSummary struct {
	value *Summary
	isSet bool
}

func (v NullableSummary) Get() *Summary {
	return v.value
}

func (v *NullableSummary) Set(val *Summary) {
	v.value = val
	v.isSet = true
}

func (v NullableSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummary(val *Summary) *NullableSummary {
	return &NullableSummary{value: val, isSet: true}
}

func (v NullableSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


