/*
SLOs

Testing SloAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SloAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SloAPIService BulkDeleteOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		resp, httpRes, err := apiClient.SloAPI.BulkDeleteOp(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService BulkDeleteStatusOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var taskId string

		resp, httpRes, err := apiClient.SloAPI.BulkDeleteStatusOp(context.Background(), spaceId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService CreateSloOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		resp, httpRes, err := apiClient.SloAPI.CreateSloOp(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService DeleteRollupDataOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		resp, httpRes, err := apiClient.SloAPI.DeleteRollupDataOp(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService DeleteSloInstancesOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		httpRes, err := apiClient.SloAPI.DeleteSloInstancesOp(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService DeleteSloOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		httpRes, err := apiClient.SloAPI.DeleteSloOp(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService DisableSloOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		httpRes, err := apiClient.SloAPI.DisableSloOp(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService EnableSloOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		httpRes, err := apiClient.SloAPI.EnableSloOp(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService FindSlosOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		resp, httpRes, err := apiClient.SloAPI.FindSlosOp(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService GetDefinitionsOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		resp, httpRes, err := apiClient.SloAPI.GetDefinitionsOp(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService GetSloOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		resp, httpRes, err := apiClient.SloAPI.GetSloOp(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService ResetSloOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		resp, httpRes, err := apiClient.SloAPI.ResetSloOp(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SloAPIService UpdateSloOp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		resp, httpRes, err := apiClient.SloAPI.UpdateSloOp(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
