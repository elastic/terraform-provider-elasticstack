/*
SLOs

Testing SlosApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package slo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/elastic/terraform-provider-elasticstack/slo"
)

func Test_slo_SlosApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SlosApiService CreateSlo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		resp, httpRes, err := apiClient.SlosApi.CreateSlo(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlosApiService DeleteSlo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		httpRes, err := apiClient.SlosApi.DeleteSlo(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlosApiService DisableSlo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		httpRes, err := apiClient.SlosApi.DisableSlo(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlosApiService EnableSlo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		httpRes, err := apiClient.SlosApi.EnableSlo(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlosApiService FindSlos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		resp, httpRes, err := apiClient.SlosApi.FindSlos(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlosApiService GetSlo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		resp, httpRes, err := apiClient.SlosApi.GetSlo(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlosApiService HistoricalSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string

		resp, httpRes, err := apiClient.SlosApi.HistoricalSummary(context.Background(), spaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlosApiService UpdateSlo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spaceId string
		var sloId string

		resp, httpRes, err := apiClient.SlosApi.UpdateSlo(context.Background(), spaceId, sloId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
