/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"fmt"
)

// SummaryStatus the model 'SummaryStatus'
type SummaryStatus string

// List of summary_status
const (
	NO_DATA   SummaryStatus = "NO_DATA"
	HEALTHY   SummaryStatus = "HEALTHY"
	DEGRADING SummaryStatus = "DEGRADING"
	VIOLATED  SummaryStatus = "VIOLATED"
)

// All allowed values of SummaryStatus enum
var AllowedSummaryStatusEnumValues = []SummaryStatus{
	"NO_DATA",
	"HEALTHY",
	"DEGRADING",
	"VIOLATED",
}

func (v *SummaryStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SummaryStatus(value)
	for _, existing := range AllowedSummaryStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SummaryStatus", value)
}

// NewSummaryStatusFromValue returns a pointer to a valid SummaryStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSummaryStatusFromValue(v string) (*SummaryStatus, error) {
	ev := SummaryStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SummaryStatus: valid values are %v", v, AllowedSummaryStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SummaryStatus) IsValid() bool {
	for _, existing := range AllowedSummaryStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to summary_status value
func (v SummaryStatus) Ptr() *SummaryStatus {
	return &v
}

type NullableSummaryStatus struct {
	value *SummaryStatus
	isSet bool
}

func (v NullableSummaryStatus) Get() *SummaryStatus {
	return v.value
}

func (v *NullableSummaryStatus) Set(val *SummaryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryStatus(val *SummaryStatus) *NullableSummaryStatus {
	return &NullableSummaryStatus{value: val, isSet: true}
}

func (v NullableSummaryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
