/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorBudget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorBudget{}

// ErrorBudget struct for ErrorBudget
type ErrorBudget struct {
	// The initial error budget, as 1 - objective
	Initial float32 `json:"initial"`
	// The error budget consummed, as a percentage of the initial value.
	Consumed float32 `json:"consumed"`
	// The error budget remaining, as a percentage of the initial value.
	Remaining float32 `json:"remaining"`
	// Only for SLO defined with occurrences budgeting method and calendar aligned time window.
	IsEstimated bool `json:"isEstimated"`
}

type _ErrorBudget ErrorBudget

// NewErrorBudget instantiates a new ErrorBudget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorBudget(initial float32, consumed float32, remaining float32, isEstimated bool) *ErrorBudget {
	this := ErrorBudget{}
	this.Initial = initial
	this.Consumed = consumed
	this.Remaining = remaining
	this.IsEstimated = isEstimated
	return &this
}

// NewErrorBudgetWithDefaults instantiates a new ErrorBudget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorBudgetWithDefaults() *ErrorBudget {
	this := ErrorBudget{}
	return &this
}

// GetInitial returns the Initial field value
func (o *ErrorBudget) GetInitial() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Initial
}

// GetInitialOk returns a tuple with the Initial field value
// and a boolean to check if the value has been set.
func (o *ErrorBudget) GetInitialOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initial, true
}

// SetInitial sets field value
func (o *ErrorBudget) SetInitial(v float32) {
	o.Initial = v
}

// GetConsumed returns the Consumed field value
func (o *ErrorBudget) GetConsumed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Consumed
}

// GetConsumedOk returns a tuple with the Consumed field value
// and a boolean to check if the value has been set.
func (o *ErrorBudget) GetConsumedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consumed, true
}

// SetConsumed sets field value
func (o *ErrorBudget) SetConsumed(v float32) {
	o.Consumed = v
}

// GetRemaining returns the Remaining field value
func (o *ErrorBudget) GetRemaining() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field value
// and a boolean to check if the value has been set.
func (o *ErrorBudget) GetRemainingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remaining, true
}

// SetRemaining sets field value
func (o *ErrorBudget) SetRemaining(v float32) {
	o.Remaining = v
}

// GetIsEstimated returns the IsEstimated field value
func (o *ErrorBudget) GetIsEstimated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEstimated
}

// GetIsEstimatedOk returns a tuple with the IsEstimated field value
// and a boolean to check if the value has been set.
func (o *ErrorBudget) GetIsEstimatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEstimated, true
}

// SetIsEstimated sets field value
func (o *ErrorBudget) SetIsEstimated(v bool) {
	o.IsEstimated = v
}

func (o ErrorBudget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorBudget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["initial"] = o.Initial
	toSerialize["consumed"] = o.Consumed
	toSerialize["remaining"] = o.Remaining
	toSerialize["isEstimated"] = o.IsEstimated
	return toSerialize, nil
}

func (o *ErrorBudget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"initial",
		"consumed",
		"remaining",
		"isEstimated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorBudget := _ErrorBudget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorBudget)

	if err != nil {
		return err
	}

	*o = ErrorBudget(varErrorBudget)

	return err
}

type NullableErrorBudget struct {
	value *ErrorBudget
	isSet bool
}

func (v NullableErrorBudget) Get() *ErrorBudget {
	return v.value
}

func (v *NullableErrorBudget) Set(val *ErrorBudget) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorBudget) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorBudget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorBudget(val *ErrorBudget) *NullableErrorBudget {
	return &NullableErrorBudget{value: val, isSet: true}
}

func (v NullableErrorBudget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorBudget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


