/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the IndicatorPropertiesCustomKqlParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndicatorPropertiesCustomKqlParams{}

// IndicatorPropertiesCustomKqlParams An object containing the indicator parameters.
type IndicatorPropertiesCustomKqlParams struct {
	// The index or index pattern to use
	Index string `json:"index"`
	// the KQL query to filter the documents with.
	Filter *string `json:"filter,omitempty"`
	// the KQL query used to define the good events.
	Good *string `json:"good,omitempty"`
	// the KQL query used to define all events.
	Total *string `json:"total,omitempty"`
	// The timestamp field used in the source indice. If not specified, @timestamp will be used. 
	TimestampField string `json:"timestampField"`
}

// NewIndicatorPropertiesCustomKqlParams instantiates a new IndicatorPropertiesCustomKqlParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicatorPropertiesCustomKqlParams(index string, timestampField string) *IndicatorPropertiesCustomKqlParams {
	this := IndicatorPropertiesCustomKqlParams{}
	this.Index = index
	this.TimestampField = timestampField
	return &this
}

// NewIndicatorPropertiesCustomKqlParamsWithDefaults instantiates a new IndicatorPropertiesCustomKqlParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorPropertiesCustomKqlParamsWithDefaults() *IndicatorPropertiesCustomKqlParams {
	this := IndicatorPropertiesCustomKqlParams{}
	return &this
}

// GetIndex returns the Index field value
func (o *IndicatorPropertiesCustomKqlParams) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesCustomKqlParams) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *IndicatorPropertiesCustomKqlParams) SetIndex(v string) {
	o.Index = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *IndicatorPropertiesCustomKqlParams) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesCustomKqlParams) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *IndicatorPropertiesCustomKqlParams) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *IndicatorPropertiesCustomKqlParams) SetFilter(v string) {
	o.Filter = &v
}

// GetGood returns the Good field value if set, zero value otherwise.
func (o *IndicatorPropertiesCustomKqlParams) GetGood() string {
	if o == nil || IsNil(o.Good) {
		var ret string
		return ret
	}
	return *o.Good
}

// GetGoodOk returns a tuple with the Good field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesCustomKqlParams) GetGoodOk() (*string, bool) {
	if o == nil || IsNil(o.Good) {
		return nil, false
	}
	return o.Good, true
}

// HasGood returns a boolean if a field has been set.
func (o *IndicatorPropertiesCustomKqlParams) HasGood() bool {
	if o != nil && !IsNil(o.Good) {
		return true
	}

	return false
}

// SetGood gets a reference to the given string and assigns it to the Good field.
func (o *IndicatorPropertiesCustomKqlParams) SetGood(v string) {
	o.Good = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *IndicatorPropertiesCustomKqlParams) GetTotal() string {
	if o == nil || IsNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesCustomKqlParams) GetTotalOk() (*string, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *IndicatorPropertiesCustomKqlParams) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *IndicatorPropertiesCustomKqlParams) SetTotal(v string) {
	o.Total = &v
}

// GetTimestampField returns the TimestampField field value
func (o *IndicatorPropertiesCustomKqlParams) GetTimestampField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimestampField
}

// GetTimestampFieldOk returns a tuple with the TimestampField field value
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesCustomKqlParams) GetTimestampFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimestampField, true
}

// SetTimestampField sets field value
func (o *IndicatorPropertiesCustomKqlParams) SetTimestampField(v string) {
	o.TimestampField = v
}

func (o IndicatorPropertiesCustomKqlParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndicatorPropertiesCustomKqlParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Good) {
		toSerialize["good"] = o.Good
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	toSerialize["timestampField"] = o.TimestampField
	return toSerialize, nil
}

type NullableIndicatorPropertiesCustomKqlParams struct {
	value *IndicatorPropertiesCustomKqlParams
	isSet bool
}

func (v NullableIndicatorPropertiesCustomKqlParams) Get() *IndicatorPropertiesCustomKqlParams {
	return v.value
}

func (v *NullableIndicatorPropertiesCustomKqlParams) Set(val *IndicatorPropertiesCustomKqlParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorPropertiesCustomKqlParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorPropertiesCustomKqlParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorPropertiesCustomKqlParams(val *IndicatorPropertiesCustomKqlParams) *NullableIndicatorPropertiesCustomKqlParams {
	return &NullableIndicatorPropertiesCustomKqlParams{value: val, isSet: true}
}

func (v NullableIndicatorPropertiesCustomKqlParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorPropertiesCustomKqlParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


