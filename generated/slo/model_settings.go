/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the Settings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settings{}

// Settings Defines properties for settings.
type Settings struct {
	// The synch delay to apply to the transform. Default 1m
	SyncDelay *string `json:"syncDelay,omitempty"`
	// Configure how often the transform runs, default 1m
	Frequency *string `json:"frequency,omitempty"`
}

// NewSettings instantiates a new Settings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettings() *Settings {
	this := Settings{}
	return &this
}

// NewSettingsWithDefaults instantiates a new Settings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsWithDefaults() *Settings {
	this := Settings{}
	return &this
}

// GetSyncDelay returns the SyncDelay field value if set, zero value otherwise.
func (o *Settings) GetSyncDelay() string {
	if o == nil || IsNil(o.SyncDelay) {
		var ret string
		return ret
	}
	return *o.SyncDelay
}

// GetSyncDelayOk returns a tuple with the SyncDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetSyncDelayOk() (*string, bool) {
	if o == nil || IsNil(o.SyncDelay) {
		return nil, false
	}
	return o.SyncDelay, true
}

// HasSyncDelay returns a boolean if a field has been set.
func (o *Settings) HasSyncDelay() bool {
	if o != nil && !IsNil(o.SyncDelay) {
		return true
	}

	return false
}

// SetSyncDelay gets a reference to the given string and assigns it to the SyncDelay field.
func (o *Settings) SetSyncDelay(v string) {
	o.SyncDelay = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *Settings) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *Settings) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *Settings) SetFrequency(v string) {
	o.Frequency = &v
}

func (o Settings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SyncDelay) {
		toSerialize["syncDelay"] = o.SyncDelay
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	return toSerialize, nil
}

type NullableSettings struct {
	value *Settings
	isSet bool
}

func (v NullableSettings) Get() *Settings {
	return v.value
}

func (v *NullableSettings) Set(val *Settings) {
	v.value = val
	v.isSet = true
}

func (v NullableSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettings(val *Settings) *NullableSettings {
	return &NullableSettings{value: val, isSet: true}
}

func (v NullableSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


