/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
)

// checks if the Settings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settings{}

// Settings Defines properties for SLO settings.
type Settings struct {
	// The date field that is used to identify new documents in the source. It is strongly recommended to use a field that contains the ingest timestamp. If you use a different field, you might need to set the delay such that it accounts for data transmission delays. When unspecified, we use the indicator timestamp field.
	SyncField *string `json:"syncField,omitempty"`
	// The time delay in minutes between the current time and the latest source data time. Increasing the value will delay any alerting. The default value is 1 minute. The minimum value is 1m and the maximum is 359m. It should always be greater then source index refresh interval.
	SyncDelay *string `json:"syncDelay,omitempty"`
	// The interval between checks for changes in the source data. The minimum value is 1m and the maximum is 59m. The default value is 1 minute.
	Frequency *string `json:"frequency,omitempty"`
	// Start aggregating data from the time the SLO is created, instead of backfilling data from the beginning of the time window.
	PreventInitialBackfill *bool `json:"preventInitialBackfill,omitempty"`
}

// NewSettings instantiates a new Settings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettings() *Settings {
	this := Settings{}
	var syncDelay string = "1m"
	this.SyncDelay = &syncDelay
	var frequency string = "1m"
	this.Frequency = &frequency
	var preventInitialBackfill bool = false
	this.PreventInitialBackfill = &preventInitialBackfill
	return &this
}

// NewSettingsWithDefaults instantiates a new Settings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsWithDefaults() *Settings {
	this := Settings{}
	var syncDelay string = "1m"
	this.SyncDelay = &syncDelay
	var frequency string = "1m"
	this.Frequency = &frequency
	var preventInitialBackfill bool = false
	this.PreventInitialBackfill = &preventInitialBackfill
	return &this
}

// GetSyncField returns the SyncField field value if set, zero value otherwise.
func (o *Settings) GetSyncField() string {
	if o == nil || IsNil(o.SyncField) {
		var ret string
		return ret
	}
	return *o.SyncField
}

// GetSyncFieldOk returns a tuple with the SyncField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetSyncFieldOk() (*string, bool) {
	if o == nil || IsNil(o.SyncField) {
		return nil, false
	}
	return o.SyncField, true
}

// HasSyncField returns a boolean if a field has been set.
func (o *Settings) HasSyncField() bool {
	if o != nil && !IsNil(o.SyncField) {
		return true
	}

	return false
}

// SetSyncField gets a reference to the given string and assigns it to the SyncField field.
func (o *Settings) SetSyncField(v string) {
	o.SyncField = &v
}

// GetSyncDelay returns the SyncDelay field value if set, zero value otherwise.
func (o *Settings) GetSyncDelay() string {
	if o == nil || IsNil(o.SyncDelay) {
		var ret string
		return ret
	}
	return *o.SyncDelay
}

// GetSyncDelayOk returns a tuple with the SyncDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetSyncDelayOk() (*string, bool) {
	if o == nil || IsNil(o.SyncDelay) {
		return nil, false
	}
	return o.SyncDelay, true
}

// HasSyncDelay returns a boolean if a field has been set.
func (o *Settings) HasSyncDelay() bool {
	if o != nil && !IsNil(o.SyncDelay) {
		return true
	}

	return false
}

// SetSyncDelay gets a reference to the given string and assigns it to the SyncDelay field.
func (o *Settings) SetSyncDelay(v string) {
	o.SyncDelay = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *Settings) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *Settings) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *Settings) SetFrequency(v string) {
	o.Frequency = &v
}

// GetPreventInitialBackfill returns the PreventInitialBackfill field value if set, zero value otherwise.
func (o *Settings) GetPreventInitialBackfill() bool {
	if o == nil || IsNil(o.PreventInitialBackfill) {
		var ret bool
		return ret
	}
	return *o.PreventInitialBackfill
}

// GetPreventInitialBackfillOk returns a tuple with the PreventInitialBackfill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPreventInitialBackfillOk() (*bool, bool) {
	if o == nil || IsNil(o.PreventInitialBackfill) {
		return nil, false
	}
	return o.PreventInitialBackfill, true
}

// HasPreventInitialBackfill returns a boolean if a field has been set.
func (o *Settings) HasPreventInitialBackfill() bool {
	if o != nil && !IsNil(o.PreventInitialBackfill) {
		return true
	}

	return false
}

// SetPreventInitialBackfill gets a reference to the given bool and assigns it to the PreventInitialBackfill field.
func (o *Settings) SetPreventInitialBackfill(v bool) {
	o.PreventInitialBackfill = &v
}

func (o Settings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SyncField) {
		toSerialize["syncField"] = o.SyncField
	}
	if !IsNil(o.SyncDelay) {
		toSerialize["syncDelay"] = o.SyncDelay
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.PreventInitialBackfill) {
		toSerialize["preventInitialBackfill"] = o.PreventInitialBackfill
	}
	return toSerialize, nil
}

type NullableSettings struct {
	value *Settings
	isSet bool
}

func (v NullableSettings) Get() *Settings {
	return v.value
}

func (v *NullableSettings) Set(val *Settings) {
	v.value = val
	v.isSet = true
}

func (v NullableSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettings(val *Settings) *NullableSettings {
	return &NullableSettings{value: val, isSet: true}
}

func (v NullableSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
