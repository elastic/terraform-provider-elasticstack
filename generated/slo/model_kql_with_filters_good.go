/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"fmt"
)

// KqlWithFiltersGood - The KQL query used to define the good events.
type KqlWithFiltersGood struct {
	KqlWithFiltersOneOf *KqlWithFiltersOneOf
	String              *string
}

// KqlWithFiltersOneOfAsKqlWithFiltersGood is a convenience function that returns KqlWithFiltersOneOf wrapped in KqlWithFiltersGood
func KqlWithFiltersOneOfAsKqlWithFiltersGood(v *KqlWithFiltersOneOf) KqlWithFiltersGood {
	return KqlWithFiltersGood{
		KqlWithFiltersOneOf: v,
	}
}

// stringAsKqlWithFiltersGood is a convenience function that returns string wrapped in KqlWithFiltersGood
func StringAsKqlWithFiltersGood(v *string) KqlWithFiltersGood {
	return KqlWithFiltersGood{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *KqlWithFiltersGood) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into KqlWithFiltersOneOf
	err = json.Unmarshal(data, &dst.KqlWithFiltersOneOf)
	if err == nil {
		jsonKqlWithFiltersOneOf, _ := json.Marshal(dst.KqlWithFiltersOneOf)
		if string(jsonKqlWithFiltersOneOf) == "{}" { // empty struct
			dst.KqlWithFiltersOneOf = nil
		} else {
			match++
		}
	} else {
		dst.KqlWithFiltersOneOf = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.String)
		if string(jsonstring) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.KqlWithFiltersOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(KqlWithFiltersGood)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(KqlWithFiltersGood)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src KqlWithFiltersGood) MarshalJSON() ([]byte, error) {
	if src.KqlWithFiltersOneOf != nil {
		return json.Marshal(&src.KqlWithFiltersOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *KqlWithFiltersGood) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.KqlWithFiltersOneOf != nil {
		return obj.KqlWithFiltersOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableKqlWithFiltersGood struct {
	value *KqlWithFiltersGood
	isSet bool
}

func (v NullableKqlWithFiltersGood) Get() *KqlWithFiltersGood {
	return v.value
}

func (v *NullableKqlWithFiltersGood) Set(val *KqlWithFiltersGood) {
	v.value = val
	v.isSet = true
}

func (v NullableKqlWithFiltersGood) IsSet() bool {
	return v.isSet
}

func (v *NullableKqlWithFiltersGood) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKqlWithFiltersGood(val *KqlWithFiltersGood) *NullableKqlWithFiltersGood {
	return &NullableKqlWithFiltersGood{value: val, isSet: true}
}

func (v NullableKqlWithFiltersGood) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKqlWithFiltersGood) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
