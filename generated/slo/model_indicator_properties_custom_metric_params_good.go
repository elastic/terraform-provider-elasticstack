/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IndicatorPropertiesCustomMetricParamsGood type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndicatorPropertiesCustomMetricParamsGood{}

// IndicatorPropertiesCustomMetricParamsGood An object defining the \"good\" metrics and equation 
type IndicatorPropertiesCustomMetricParamsGood struct {
	// List of metrics with their name, aggregation type, and field.
	Metrics []IndicatorPropertiesCustomMetricParamsGoodMetricsInner `json:"metrics"`
	// The equation to calculate the \"good\" metric.
	Equation string `json:"equation"`
}

type _IndicatorPropertiesCustomMetricParamsGood IndicatorPropertiesCustomMetricParamsGood

// NewIndicatorPropertiesCustomMetricParamsGood instantiates a new IndicatorPropertiesCustomMetricParamsGood object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicatorPropertiesCustomMetricParamsGood(metrics []IndicatorPropertiesCustomMetricParamsGoodMetricsInner, equation string) *IndicatorPropertiesCustomMetricParamsGood {
	this := IndicatorPropertiesCustomMetricParamsGood{}
	this.Metrics = metrics
	this.Equation = equation
	return &this
}

// NewIndicatorPropertiesCustomMetricParamsGoodWithDefaults instantiates a new IndicatorPropertiesCustomMetricParamsGood object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorPropertiesCustomMetricParamsGoodWithDefaults() *IndicatorPropertiesCustomMetricParamsGood {
	this := IndicatorPropertiesCustomMetricParamsGood{}
	return &this
}

// GetMetrics returns the Metrics field value
func (o *IndicatorPropertiesCustomMetricParamsGood) GetMetrics() []IndicatorPropertiesCustomMetricParamsGoodMetricsInner {
	if o == nil {
		var ret []IndicatorPropertiesCustomMetricParamsGoodMetricsInner
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesCustomMetricParamsGood) GetMetricsOk() ([]IndicatorPropertiesCustomMetricParamsGoodMetricsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metrics, true
}

// SetMetrics sets field value
func (o *IndicatorPropertiesCustomMetricParamsGood) SetMetrics(v []IndicatorPropertiesCustomMetricParamsGoodMetricsInner) {
	o.Metrics = v
}

// GetEquation returns the Equation field value
func (o *IndicatorPropertiesCustomMetricParamsGood) GetEquation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Equation
}

// GetEquationOk returns a tuple with the Equation field value
// and a boolean to check if the value has been set.
func (o *IndicatorPropertiesCustomMetricParamsGood) GetEquationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Equation, true
}

// SetEquation sets field value
func (o *IndicatorPropertiesCustomMetricParamsGood) SetEquation(v string) {
	o.Equation = v
}

func (o IndicatorPropertiesCustomMetricParamsGood) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndicatorPropertiesCustomMetricParamsGood) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metrics"] = o.Metrics
	toSerialize["equation"] = o.Equation
	return toSerialize, nil
}

func (o *IndicatorPropertiesCustomMetricParamsGood) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metrics",
		"equation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIndicatorPropertiesCustomMetricParamsGood := _IndicatorPropertiesCustomMetricParamsGood{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIndicatorPropertiesCustomMetricParamsGood)

	if err != nil {
		return err
	}

	*o = IndicatorPropertiesCustomMetricParamsGood(varIndicatorPropertiesCustomMetricParamsGood)

	return err
}

type NullableIndicatorPropertiesCustomMetricParamsGood struct {
	value *IndicatorPropertiesCustomMetricParamsGood
	isSet bool
}

func (v NullableIndicatorPropertiesCustomMetricParamsGood) Get() *IndicatorPropertiesCustomMetricParamsGood {
	return v.value
}

func (v *NullableIndicatorPropertiesCustomMetricParamsGood) Set(val *IndicatorPropertiesCustomMetricParamsGood) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorPropertiesCustomMetricParamsGood) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorPropertiesCustomMetricParamsGood) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorPropertiesCustomMetricParamsGood(val *IndicatorPropertiesCustomMetricParamsGood) *NullableIndicatorPropertiesCustomMetricParamsGood {
	return &NullableIndicatorPropertiesCustomMetricParamsGood{value: val, isSet: true}
}

func (v NullableIndicatorPropertiesCustomMetricParamsGood) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorPropertiesCustomMetricParamsGood) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


