/*
Data views

OpenAPI schema for data view endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_views

import (
	"encoding/json"
)

// checks if the CreateDataViewRequestObjectDataView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDataViewRequestObjectDataView{}

// CreateDataViewRequestObjectDataView The data view object.
type CreateDataViewRequestObjectDataView struct {
	// Allows the data view saved object to exist before the data is available.
	AllowNoIndex *bool `json:"allowNoIndex,omitempty"`
	// A map of field attributes by field name.
	FieldAttrs map[string]interface{} `json:"fieldAttrs,omitempty"`
	// A map of field formats by field name.
	FieldFormats map[string]interface{} `json:"fieldFormats,omitempty"`
	Fields       map[string]interface{} `json:"fields,omitempty"`
	Id           *string                `json:"id,omitempty"`
	// The data view name.
	Name *string `json:"name,omitempty"`
	// An array of space identifiers for sharing the data view between multiple spaces.
	Namespaces []string `json:"namespaces,omitempty"`
	// A map of runtime field definitions by field name.
	RuntimeFieldMap map[string]interface{} `json:"runtimeFieldMap,omitempty"`
	// The array of field names you want to filter out in Discover.
	SourceFilters []SourcefiltersInner `json:"sourceFilters,omitempty"`
	// The timestamp field name, which you use for time-based data views.
	TimeFieldName *string `json:"timeFieldName,omitempty"`
	// Comma-separated list of data streams, indices, and aliases that you want to search. Supports wildcards (`*`).
	Title string `json:"title"`
	// When set to `rollup`, identifies the rollup data views.
	Type *string `json:"type,omitempty"`
	// When you use rollup indices, contains the field list for the rollup data view API endpoints.
	TypeMeta map[string]interface{} `json:"typeMeta,omitempty"`
	Version  *string                `json:"version,omitempty"`
}

// NewCreateDataViewRequestObjectDataView instantiates a new CreateDataViewRequestObjectDataView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDataViewRequestObjectDataView(title string) *CreateDataViewRequestObjectDataView {
	this := CreateDataViewRequestObjectDataView{}
	this.Title = title
	return &this
}

// NewCreateDataViewRequestObjectDataViewWithDefaults instantiates a new CreateDataViewRequestObjectDataView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDataViewRequestObjectDataViewWithDefaults() *CreateDataViewRequestObjectDataView {
	this := CreateDataViewRequestObjectDataView{}
	return &this
}

// GetAllowNoIndex returns the AllowNoIndex field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetAllowNoIndex() bool {
	if o == nil || IsNil(o.AllowNoIndex) {
		var ret bool
		return ret
	}
	return *o.AllowNoIndex
}

// GetAllowNoIndexOk returns a tuple with the AllowNoIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetAllowNoIndexOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowNoIndex) {
		return nil, false
	}
	return o.AllowNoIndex, true
}

// HasAllowNoIndex returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasAllowNoIndex() bool {
	if o != nil && !IsNil(o.AllowNoIndex) {
		return true
	}

	return false
}

// SetAllowNoIndex gets a reference to the given bool and assigns it to the AllowNoIndex field.
func (o *CreateDataViewRequestObjectDataView) SetAllowNoIndex(v bool) {
	o.AllowNoIndex = &v
}

// GetFieldAttrs returns the FieldAttrs field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetFieldAttrs() map[string]interface{} {
	if o == nil || IsNil(o.FieldAttrs) {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldAttrs
}

// GetFieldAttrsOk returns a tuple with the FieldAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetFieldAttrsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FieldAttrs) {
		return map[string]interface{}{}, false
	}
	return o.FieldAttrs, true
}

// HasFieldAttrs returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasFieldAttrs() bool {
	if o != nil && !IsNil(o.FieldAttrs) {
		return true
	}

	return false
}

// SetFieldAttrs gets a reference to the given map[string]interface{} and assigns it to the FieldAttrs field.
func (o *CreateDataViewRequestObjectDataView) SetFieldAttrs(v map[string]interface{}) {
	o.FieldAttrs = v
}

// GetFieldFormats returns the FieldFormats field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetFieldFormats() map[string]interface{} {
	if o == nil || IsNil(o.FieldFormats) {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldFormats
}

// GetFieldFormatsOk returns a tuple with the FieldFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetFieldFormatsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FieldFormats) {
		return map[string]interface{}{}, false
	}
	return o.FieldFormats, true
}

// HasFieldFormats returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasFieldFormats() bool {
	if o != nil && !IsNil(o.FieldFormats) {
		return true
	}

	return false
}

// SetFieldFormats gets a reference to the given map[string]interface{} and assigns it to the FieldFormats field.
func (o *CreateDataViewRequestObjectDataView) SetFieldFormats(v map[string]interface{}) {
	o.FieldFormats = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetFields() map[string]interface{} {
	if o == nil || IsNil(o.Fields) {
		var ret map[string]interface{}
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fields) {
		return map[string]interface{}{}, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]interface{} and assigns it to the Fields field.
func (o *CreateDataViewRequestObjectDataView) SetFields(v map[string]interface{}) {
	o.Fields = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CreateDataViewRequestObjectDataView) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateDataViewRequestObjectDataView) SetName(v string) {
	o.Name = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetNamespaces() []string {
	if o == nil || IsNil(o.Namespaces) {
		var ret []string
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []string and assigns it to the Namespaces field.
func (o *CreateDataViewRequestObjectDataView) SetNamespaces(v []string) {
	o.Namespaces = v
}

// GetRuntimeFieldMap returns the RuntimeFieldMap field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetRuntimeFieldMap() map[string]interface{} {
	if o == nil || IsNil(o.RuntimeFieldMap) {
		var ret map[string]interface{}
		return ret
	}
	return o.RuntimeFieldMap
}

// GetRuntimeFieldMapOk returns a tuple with the RuntimeFieldMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetRuntimeFieldMapOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RuntimeFieldMap) {
		return map[string]interface{}{}, false
	}
	return o.RuntimeFieldMap, true
}

// HasRuntimeFieldMap returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasRuntimeFieldMap() bool {
	if o != nil && !IsNil(o.RuntimeFieldMap) {
		return true
	}

	return false
}

// SetRuntimeFieldMap gets a reference to the given map[string]interface{} and assigns it to the RuntimeFieldMap field.
func (o *CreateDataViewRequestObjectDataView) SetRuntimeFieldMap(v map[string]interface{}) {
	o.RuntimeFieldMap = v
}

// GetSourceFilters returns the SourceFilters field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetSourceFilters() []SourcefiltersInner {
	if o == nil || IsNil(o.SourceFilters) {
		var ret []SourcefiltersInner
		return ret
	}
	return o.SourceFilters
}

// GetSourceFiltersOk returns a tuple with the SourceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetSourceFiltersOk() ([]SourcefiltersInner, bool) {
	if o == nil || IsNil(o.SourceFilters) {
		return nil, false
	}
	return o.SourceFilters, true
}

// HasSourceFilters returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasSourceFilters() bool {
	if o != nil && !IsNil(o.SourceFilters) {
		return true
	}

	return false
}

// SetSourceFilters gets a reference to the given []SourcefiltersInner and assigns it to the SourceFilters field.
func (o *CreateDataViewRequestObjectDataView) SetSourceFilters(v []SourcefiltersInner) {
	o.SourceFilters = v
}

// GetTimeFieldName returns the TimeFieldName field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetTimeFieldName() string {
	if o == nil || IsNil(o.TimeFieldName) {
		var ret string
		return ret
	}
	return *o.TimeFieldName
}

// GetTimeFieldNameOk returns a tuple with the TimeFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetTimeFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.TimeFieldName) {
		return nil, false
	}
	return o.TimeFieldName, true
}

// HasTimeFieldName returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasTimeFieldName() bool {
	if o != nil && !IsNil(o.TimeFieldName) {
		return true
	}

	return false
}

// SetTimeFieldName gets a reference to the given string and assigns it to the TimeFieldName field.
func (o *CreateDataViewRequestObjectDataView) SetTimeFieldName(v string) {
	o.TimeFieldName = &v
}

// GetTitle returns the Title field value
func (o *CreateDataViewRequestObjectDataView) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CreateDataViewRequestObjectDataView) SetTitle(v string) {
	o.Title = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreateDataViewRequestObjectDataView) SetType(v string) {
	o.Type = &v
}

// GetTypeMeta returns the TypeMeta field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetTypeMeta() map[string]interface{} {
	if o == nil || IsNil(o.TypeMeta) {
		var ret map[string]interface{}
		return ret
	}
	return o.TypeMeta
}

// GetTypeMetaOk returns a tuple with the TypeMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetTypeMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TypeMeta) {
		return map[string]interface{}{}, false
	}
	return o.TypeMeta, true
}

// HasTypeMeta returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasTypeMeta() bool {
	if o != nil && !IsNil(o.TypeMeta) {
		return true
	}

	return false
}

// SetTypeMeta gets a reference to the given map[string]interface{} and assigns it to the TypeMeta field.
func (o *CreateDataViewRequestObjectDataView) SetTypeMeta(v map[string]interface{}) {
	o.TypeMeta = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CreateDataViewRequestObjectDataView) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObjectDataView) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CreateDataViewRequestObjectDataView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CreateDataViewRequestObjectDataView) SetVersion(v string) {
	o.Version = &v
}

func (o CreateDataViewRequestObjectDataView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDataViewRequestObjectDataView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowNoIndex) {
		toSerialize["allowNoIndex"] = o.AllowNoIndex
	}
	if !IsNil(o.FieldAttrs) {
		toSerialize["fieldAttrs"] = o.FieldAttrs
	}
	if !IsNil(o.FieldFormats) {
		toSerialize["fieldFormats"] = o.FieldFormats
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	if !IsNil(o.RuntimeFieldMap) {
		toSerialize["runtimeFieldMap"] = o.RuntimeFieldMap
	}
	if !IsNil(o.SourceFilters) {
		toSerialize["sourceFilters"] = o.SourceFilters
	}
	if !IsNil(o.TimeFieldName) {
		toSerialize["timeFieldName"] = o.TimeFieldName
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeMeta) {
		toSerialize["typeMeta"] = o.TypeMeta
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableCreateDataViewRequestObjectDataView struct {
	value *CreateDataViewRequestObjectDataView
	isSet bool
}

func (v NullableCreateDataViewRequestObjectDataView) Get() *CreateDataViewRequestObjectDataView {
	return v.value
}

func (v *NullableCreateDataViewRequestObjectDataView) Set(val *CreateDataViewRequestObjectDataView) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataViewRequestObjectDataView) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataViewRequestObjectDataView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataViewRequestObjectDataView(val *CreateDataViewRequestObjectDataView) *NullableCreateDataViewRequestObjectDataView {
	return &NullableCreateDataViewRequestObjectDataView{value: val, isSet: true}
}

func (v NullableCreateDataViewRequestObjectDataView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataViewRequestObjectDataView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
