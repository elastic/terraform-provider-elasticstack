/*
Data views

OpenAPI schema for data view endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_views

import (
	"encoding/json"
)

// checks if the UpdateDataViewRequestObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDataViewRequestObject{}

// UpdateDataViewRequestObject struct for UpdateDataViewRequestObject
type UpdateDataViewRequestObject struct {
	DataView UpdateDataViewRequestObjectDataView `json:"data_view"`
	// Reloads the data view fields after the data view is updated.
	RefreshFields *bool `json:"refresh_fields,omitempty"`
}

// NewUpdateDataViewRequestObject instantiates a new UpdateDataViewRequestObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDataViewRequestObject(dataView UpdateDataViewRequestObjectDataView) *UpdateDataViewRequestObject {
	this := UpdateDataViewRequestObject{}
	this.DataView = dataView
	var refreshFields bool = false
	this.RefreshFields = &refreshFields
	return &this
}

// NewUpdateDataViewRequestObjectWithDefaults instantiates a new UpdateDataViewRequestObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDataViewRequestObjectWithDefaults() *UpdateDataViewRequestObject {
	this := UpdateDataViewRequestObject{}
	var refreshFields bool = false
	this.RefreshFields = &refreshFields
	return &this
}

// GetDataView returns the DataView field value
func (o *UpdateDataViewRequestObject) GetDataView() UpdateDataViewRequestObjectDataView {
	if o == nil {
		var ret UpdateDataViewRequestObjectDataView
		return ret
	}

	return o.DataView
}

// GetDataViewOk returns a tuple with the DataView field value
// and a boolean to check if the value has been set.
func (o *UpdateDataViewRequestObject) GetDataViewOk() (*UpdateDataViewRequestObjectDataView, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataView, true
}

// SetDataView sets field value
func (o *UpdateDataViewRequestObject) SetDataView(v UpdateDataViewRequestObjectDataView) {
	o.DataView = v
}

// GetRefreshFields returns the RefreshFields field value if set, zero value otherwise.
func (o *UpdateDataViewRequestObject) GetRefreshFields() bool {
	if o == nil || IsNil(o.RefreshFields) {
		var ret bool
		return ret
	}
	return *o.RefreshFields
}

// GetRefreshFieldsOk returns a tuple with the RefreshFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataViewRequestObject) GetRefreshFieldsOk() (*bool, bool) {
	if o == nil || IsNil(o.RefreshFields) {
		return nil, false
	}
	return o.RefreshFields, true
}

// HasRefreshFields returns a boolean if a field has been set.
func (o *UpdateDataViewRequestObject) HasRefreshFields() bool {
	if o != nil && !IsNil(o.RefreshFields) {
		return true
	}

	return false
}

// SetRefreshFields gets a reference to the given bool and assigns it to the RefreshFields field.
func (o *UpdateDataViewRequestObject) SetRefreshFields(v bool) {
	o.RefreshFields = &v
}

func (o UpdateDataViewRequestObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDataViewRequestObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_view"] = o.DataView
	if !IsNil(o.RefreshFields) {
		toSerialize["refresh_fields"] = o.RefreshFields
	}
	return toSerialize, nil
}

type NullableUpdateDataViewRequestObject struct {
	value *UpdateDataViewRequestObject
	isSet bool
}

func (v NullableUpdateDataViewRequestObject) Get() *UpdateDataViewRequestObject {
	return v.value
}

func (v *NullableUpdateDataViewRequestObject) Set(val *UpdateDataViewRequestObject) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDataViewRequestObject) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDataViewRequestObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDataViewRequestObject(val *UpdateDataViewRequestObject) *NullableUpdateDataViewRequestObject {
	return &NullableUpdateDataViewRequestObject{value: val, isSet: true}
}

func (v NullableUpdateDataViewRequestObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDataViewRequestObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
