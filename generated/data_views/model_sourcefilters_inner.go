/*
Data views

OpenAPI schema for data view endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_views

import (
	"encoding/json"
)

// checks if the SourcefiltersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourcefiltersInner{}

// SourcefiltersInner struct for SourcefiltersInner
type SourcefiltersInner struct {
	Value string `json:"value"`
}

// NewSourcefiltersInner instantiates a new SourcefiltersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcefiltersInner(value string) *SourcefiltersInner {
	this := SourcefiltersInner{}
	this.Value = value
	return &this
}

// NewSourcefiltersInnerWithDefaults instantiates a new SourcefiltersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcefiltersInnerWithDefaults() *SourcefiltersInner {
	this := SourcefiltersInner{}
	return &this
}

// GetValue returns the Value field value
func (o *SourcefiltersInner) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SourcefiltersInner) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SourcefiltersInner) SetValue(v string) {
	o.Value = v
}

func (o SourcefiltersInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourcefiltersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableSourcefiltersInner struct {
	value *SourcefiltersInner
	isSet bool
}

func (v NullableSourcefiltersInner) Get() *SourcefiltersInner {
	return v.value
}

func (v *NullableSourcefiltersInner) Set(val *SourcefiltersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcefiltersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcefiltersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcefiltersInner(val *SourcefiltersInner) *NullableSourcefiltersInner {
	return &NullableSourcefiltersInner{value: val, isSet: true}
}

func (v NullableSourcefiltersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcefiltersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
