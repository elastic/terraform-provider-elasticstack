/*
Data views

OpenAPI schema for data view endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_views

import (
	"encoding/json"
)

// checks if the DataViewResponseObjectDataView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataViewResponseObjectDataView{}

// DataViewResponseObjectDataView struct for DataViewResponseObjectDataView
type DataViewResponseObjectDataView struct {
	// Allows the data view saved object to exist before the data is available.
	AllowNoIndex interface{} `json:"allowNoIndex,omitempty"`
	// A map of field attributes by field name.
	FieldAttrs interface{} `json:"fieldAttrs,omitempty"`
	// A map of field formats by field name.
	FieldFormats interface{} `json:"fieldFormats,omitempty"`
	Fields       interface{} `json:"fields,omitempty"`
	Id           interface{} `json:"id,omitempty"`
	// The data view name.
	Name interface{} `json:"name,omitempty"`
	// An array of space identifiers for sharing the data view between multiple spaces.
	Namespaces interface{} `json:"namespaces,omitempty"`
	// A map of runtime field definitions by field name.
	RuntimeFieldMap interface{} `json:"runtimeFieldMap,omitempty"`
	// The array of field names you want to filter out in Discover.
	SourceFilters interface{} `json:"sourceFilters,omitempty"`
	// The timestamp field name, which you use for time-based data views.
	TimeFieldName interface{} `json:"timeFieldName,omitempty"`
	// Comma-separated list of data streams, indices, and aliases that you want to search. Supports wildcards (`*`).
	Title interface{} `json:"title,omitempty"`
	// When you use rollup indices, contains the field list for the rollup data view API endpoints.
	TypeMeta interface{} `json:"typeMeta,omitempty"`
	Version  interface{} `json:"version,omitempty"`
}

// NewDataViewResponseObjectDataView instantiates a new DataViewResponseObjectDataView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataViewResponseObjectDataView() *DataViewResponseObjectDataView {
	this := DataViewResponseObjectDataView{}
	return &this
}

// NewDataViewResponseObjectDataViewWithDefaults instantiates a new DataViewResponseObjectDataView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataViewResponseObjectDataViewWithDefaults() *DataViewResponseObjectDataView {
	this := DataViewResponseObjectDataView{}
	return &this
}

// GetAllowNoIndex returns the AllowNoIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetAllowNoIndex() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowNoIndex
}

// GetAllowNoIndexOk returns a tuple with the AllowNoIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetAllowNoIndexOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowNoIndex) {
		return nil, false
	}
	return &o.AllowNoIndex, true
}

// HasAllowNoIndex returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasAllowNoIndex() bool {
	if o != nil && IsNil(o.AllowNoIndex) {
		return true
	}

	return false
}

// SetAllowNoIndex gets a reference to the given interface{} and assigns it to the AllowNoIndex field.
func (o *DataViewResponseObjectDataView) SetAllowNoIndex(v interface{}) {
	o.AllowNoIndex = v
}

// GetFieldAttrs returns the FieldAttrs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetFieldAttrs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FieldAttrs
}

// GetFieldAttrsOk returns a tuple with the FieldAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetFieldAttrsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FieldAttrs) {
		return nil, false
	}
	return &o.FieldAttrs, true
}

// HasFieldAttrs returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasFieldAttrs() bool {
	if o != nil && IsNil(o.FieldAttrs) {
		return true
	}

	return false
}

// SetFieldAttrs gets a reference to the given interface{} and assigns it to the FieldAttrs field.
func (o *DataViewResponseObjectDataView) SetFieldAttrs(v interface{}) {
	o.FieldAttrs = v
}

// GetFieldFormats returns the FieldFormats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetFieldFormats() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FieldFormats
}

// GetFieldFormatsOk returns a tuple with the FieldFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetFieldFormatsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FieldFormats) {
		return nil, false
	}
	return &o.FieldFormats, true
}

// HasFieldFormats returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasFieldFormats() bool {
	if o != nil && IsNil(o.FieldFormats) {
		return true
	}

	return false
}

// SetFieldFormats gets a reference to the given interface{} and assigns it to the FieldFormats field.
func (o *DataViewResponseObjectDataView) SetFieldFormats(v interface{}) {
	o.FieldFormats = v
}

// GetFields returns the Fields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetFields() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetFieldsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return &o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasFields() bool {
	if o != nil && IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given interface{} and assigns it to the Fields field.
func (o *DataViewResponseObjectDataView) SetFields(v interface{}) {
	o.Fields = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasId() bool {
	if o != nil && IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *DataViewResponseObjectDataView) SetId(v interface{}) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasName() bool {
	if o != nil && IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *DataViewResponseObjectDataView) SetName(v interface{}) {
	o.Name = v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetNamespaces() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetNamespacesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return &o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasNamespaces() bool {
	if o != nil && IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given interface{} and assigns it to the Namespaces field.
func (o *DataViewResponseObjectDataView) SetNamespaces(v interface{}) {
	o.Namespaces = v
}

// GetRuntimeFieldMap returns the RuntimeFieldMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetRuntimeFieldMap() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RuntimeFieldMap
}

// GetRuntimeFieldMapOk returns a tuple with the RuntimeFieldMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetRuntimeFieldMapOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RuntimeFieldMap) {
		return nil, false
	}
	return &o.RuntimeFieldMap, true
}

// HasRuntimeFieldMap returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasRuntimeFieldMap() bool {
	if o != nil && IsNil(o.RuntimeFieldMap) {
		return true
	}

	return false
}

// SetRuntimeFieldMap gets a reference to the given interface{} and assigns it to the RuntimeFieldMap field.
func (o *DataViewResponseObjectDataView) SetRuntimeFieldMap(v interface{}) {
	o.RuntimeFieldMap = v
}

// GetSourceFilters returns the SourceFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetSourceFilters() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SourceFilters
}

// GetSourceFiltersOk returns a tuple with the SourceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetSourceFiltersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SourceFilters) {
		return nil, false
	}
	return &o.SourceFilters, true
}

// HasSourceFilters returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasSourceFilters() bool {
	if o != nil && IsNil(o.SourceFilters) {
		return true
	}

	return false
}

// SetSourceFilters gets a reference to the given interface{} and assigns it to the SourceFilters field.
func (o *DataViewResponseObjectDataView) SetSourceFilters(v interface{}) {
	o.SourceFilters = v
}

// GetTimeFieldName returns the TimeFieldName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetTimeFieldName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TimeFieldName
}

// GetTimeFieldNameOk returns a tuple with the TimeFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetTimeFieldNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TimeFieldName) {
		return nil, false
	}
	return &o.TimeFieldName, true
}

// HasTimeFieldName returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasTimeFieldName() bool {
	if o != nil && IsNil(o.TimeFieldName) {
		return true
	}

	return false
}

// SetTimeFieldName gets a reference to the given interface{} and assigns it to the TimeFieldName field.
func (o *DataViewResponseObjectDataView) SetTimeFieldName(v interface{}) {
	o.TimeFieldName = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return &o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasTitle() bool {
	if o != nil && IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given interface{} and assigns it to the Title field.
func (o *DataViewResponseObjectDataView) SetTitle(v interface{}) {
	o.Title = v
}

// GetTypeMeta returns the TypeMeta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetTypeMeta() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TypeMeta
}

// GetTypeMetaOk returns a tuple with the TypeMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetTypeMetaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TypeMeta) {
		return nil, false
	}
	return &o.TypeMeta, true
}

// HasTypeMeta returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasTypeMeta() bool {
	if o != nil && IsNil(o.TypeMeta) {
		return true
	}

	return false
}

// SetTypeMeta gets a reference to the given interface{} and assigns it to the TypeMeta field.
func (o *DataViewResponseObjectDataView) SetTypeMeta(v interface{}) {
	o.TypeMeta = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataViewResponseObjectDataView) GetVersion() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataViewResponseObjectDataView) GetVersionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return &o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DataViewResponseObjectDataView) HasVersion() bool {
	if o != nil && IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given interface{} and assigns it to the Version field.
func (o *DataViewResponseObjectDataView) SetVersion(v interface{}) {
	o.Version = v
}

func (o DataViewResponseObjectDataView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataViewResponseObjectDataView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowNoIndex != nil {
		toSerialize["allowNoIndex"] = o.AllowNoIndex
	}
	if o.FieldAttrs != nil {
		toSerialize["fieldAttrs"] = o.FieldAttrs
	}
	if o.FieldFormats != nil {
		toSerialize["fieldFormats"] = o.FieldFormats
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespaces != nil {
		toSerialize["namespaces"] = o.Namespaces
	}
	if o.RuntimeFieldMap != nil {
		toSerialize["runtimeFieldMap"] = o.RuntimeFieldMap
	}
	if o.SourceFilters != nil {
		toSerialize["sourceFilters"] = o.SourceFilters
	}
	if o.TimeFieldName != nil {
		toSerialize["timeFieldName"] = o.TimeFieldName
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.TypeMeta != nil {
		toSerialize["typeMeta"] = o.TypeMeta
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableDataViewResponseObjectDataView struct {
	value *DataViewResponseObjectDataView
	isSet bool
}

func (v NullableDataViewResponseObjectDataView) Get() *DataViewResponseObjectDataView {
	return v.value
}

func (v *NullableDataViewResponseObjectDataView) Set(val *DataViewResponseObjectDataView) {
	v.value = val
	v.isSet = true
}

func (v NullableDataViewResponseObjectDataView) IsSet() bool {
	return v.isSet
}

func (v *NullableDataViewResponseObjectDataView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataViewResponseObjectDataView(val *DataViewResponseObjectDataView) *NullableDataViewResponseObjectDataView {
	return &NullableDataViewResponseObjectDataView{value: val, isSet: true}
}

func (v NullableDataViewResponseObjectDataView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataViewResponseObjectDataView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
