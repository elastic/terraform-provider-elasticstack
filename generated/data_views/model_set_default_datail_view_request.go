/*
Data views

OpenAPI schema for data view endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_views

import (
	"encoding/json"
)

// checks if the SetDefaultDatailViewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetDefaultDatailViewRequest{}

// SetDefaultDatailViewRequest struct for SetDefaultDatailViewRequest
type SetDefaultDatailViewRequest struct {
	// The data view identifier. NOTE: The API does not validate whether it is a valid identifier. Use `null` to unset the default data view.
	DataViewId interface{} `json:"data_view_id"`
	// Update an existing default data view identifier.
	Force *bool `json:"force,omitempty"`
}

// NewSetDefaultDatailViewRequest instantiates a new SetDefaultDatailViewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetDefaultDatailViewRequest(dataViewId interface{}) *SetDefaultDatailViewRequest {
	this := SetDefaultDatailViewRequest{}
	this.DataViewId = dataViewId
	var force bool = false
	this.Force = &force
	return &this
}

// NewSetDefaultDatailViewRequestWithDefaults instantiates a new SetDefaultDatailViewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetDefaultDatailViewRequestWithDefaults() *SetDefaultDatailViewRequest {
	this := SetDefaultDatailViewRequest{}
	var force bool = false
	this.Force = &force
	return &this
}

// GetDataViewId returns the DataViewId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SetDefaultDatailViewRequest) GetDataViewId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DataViewId
}

// GetDataViewIdOk returns a tuple with the DataViewId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetDefaultDatailViewRequest) GetDataViewIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DataViewId) {
		return nil, false
	}
	return &o.DataViewId, true
}

// SetDataViewId sets field value
func (o *SetDefaultDatailViewRequest) SetDataViewId(v interface{}) {
	o.DataViewId = v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *SetDefaultDatailViewRequest) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDefaultDatailViewRequest) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *SetDefaultDatailViewRequest) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *SetDefaultDatailViewRequest) SetForce(v bool) {
	o.Force = &v
}

func (o SetDefaultDatailViewRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetDefaultDatailViewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DataViewId != nil {
		toSerialize["data_view_id"] = o.DataViewId
	}
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	return toSerialize, nil
}

type NullableSetDefaultDatailViewRequest struct {
	value *SetDefaultDatailViewRequest
	isSet bool
}

func (v NullableSetDefaultDatailViewRequest) Get() *SetDefaultDatailViewRequest {
	return v.value
}

func (v *NullableSetDefaultDatailViewRequest) Set(val *SetDefaultDatailViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetDefaultDatailViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetDefaultDatailViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetDefaultDatailViewRequest(val *SetDefaultDatailViewRequest) *NullableSetDefaultDatailViewRequest {
	return &NullableSetDefaultDatailViewRequest{value: val, isSet: true}
}

func (v NullableSetDefaultDatailViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetDefaultDatailViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
