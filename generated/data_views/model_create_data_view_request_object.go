/*
Data views

OpenAPI schema for data view endpoints

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data_views

import (
	"encoding/json"
)

// checks if the CreateDataViewRequestObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDataViewRequestObject{}

// CreateDataViewRequestObject struct for CreateDataViewRequestObject
type CreateDataViewRequestObject struct {
	DataView CreateDataViewRequestObjectDataView `json:"data_view"`
	// Override an existing data view if a data view with the provided title already exists.
	Override *bool `json:"override,omitempty"`
}

// NewCreateDataViewRequestObject instantiates a new CreateDataViewRequestObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDataViewRequestObject(dataView CreateDataViewRequestObjectDataView) *CreateDataViewRequestObject {
	this := CreateDataViewRequestObject{}
	this.DataView = dataView
	var override bool = false
	this.Override = &override
	return &this
}

// NewCreateDataViewRequestObjectWithDefaults instantiates a new CreateDataViewRequestObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDataViewRequestObjectWithDefaults() *CreateDataViewRequestObject {
	this := CreateDataViewRequestObject{}
	var override bool = false
	this.Override = &override
	return &this
}

// GetDataView returns the DataView field value
func (o *CreateDataViewRequestObject) GetDataView() CreateDataViewRequestObjectDataView {
	if o == nil {
		var ret CreateDataViewRequestObjectDataView
		return ret
	}

	return o.DataView
}

// GetDataViewOk returns a tuple with the DataView field value
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObject) GetDataViewOk() (*CreateDataViewRequestObjectDataView, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataView, true
}

// SetDataView sets field value
func (o *CreateDataViewRequestObject) SetDataView(v CreateDataViewRequestObjectDataView) {
	o.DataView = v
}

// GetOverride returns the Override field value if set, zero value otherwise.
func (o *CreateDataViewRequestObject) GetOverride() bool {
	if o == nil || IsNil(o.Override) {
		var ret bool
		return ret
	}
	return *o.Override
}

// GetOverrideOk returns a tuple with the Override field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataViewRequestObject) GetOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.Override) {
		return nil, false
	}
	return o.Override, true
}

// HasOverride returns a boolean if a field has been set.
func (o *CreateDataViewRequestObject) HasOverride() bool {
	if o != nil && !IsNil(o.Override) {
		return true
	}

	return false
}

// SetOverride gets a reference to the given bool and assigns it to the Override field.
func (o *CreateDataViewRequestObject) SetOverride(v bool) {
	o.Override = &v
}

func (o CreateDataViewRequestObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDataViewRequestObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_view"] = o.DataView
	if !IsNil(o.Override) {
		toSerialize["override"] = o.Override
	}
	return toSerialize, nil
}

type NullableCreateDataViewRequestObject struct {
	value *CreateDataViewRequestObject
	isSet bool
}

func (v NullableCreateDataViewRequestObject) Get() *CreateDataViewRequestObject {
	return v.value
}

func (v *NullableCreateDataViewRequestObject) Set(val *CreateDataViewRequestObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataViewRequestObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataViewRequestObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataViewRequestObject(val *CreateDataViewRequestObject) *NullableCreateDataViewRequestObject {
	return &NullableCreateDataViewRequestObject{value: val, isSet: true}
}

func (v NullableCreateDataViewRequestObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataViewRequestObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
