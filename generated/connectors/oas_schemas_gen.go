// Code generated by ogen, DO NOT EDIT.

package connectors

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// The properties vary depending on the action type.
// Ref: #/components/schemas/action_response_properties
type ActionResponseProperties struct {
	ActionTypeId OptString                       `json:"actionTypeId"`
	Config       *ActionResponsePropertiesConfig `json:"config"`
	ID           OptString                       `json:"id"`
	// Indicates whether the action type is deprecated.
	IsDeprecated OptBool `json:"isDeprecated"`
	// Indicates whether secrets are missing for the action.
	IsMissingSecrets OptBool `json:"isMissingSecrets"`
	// Indicates whether it is a preconfigured action.
	IsPreconfigured OptBool   `json:"isPreconfigured"`
	Name            OptString `json:"name"`
}

// GetActionTypeId returns the value of ActionTypeId.
func (s *ActionResponseProperties) GetActionTypeId() OptString {
	return s.ActionTypeId
}

// GetConfig returns the value of Config.
func (s *ActionResponseProperties) GetConfig() *ActionResponsePropertiesConfig {
	return s.Config
}

// GetID returns the value of ID.
func (s *ActionResponseProperties) GetID() OptString {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ActionResponseProperties) GetIsDeprecated() OptBool {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ActionResponseProperties) GetIsMissingSecrets() OptBool {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ActionResponseProperties) GetIsPreconfigured() OptBool {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ActionResponseProperties) GetName() OptString {
	return s.Name
}

// SetActionTypeId sets the value of ActionTypeId.
func (s *ActionResponseProperties) SetActionTypeId(val OptString) {
	s.ActionTypeId = val
}

// SetConfig sets the value of Config.
func (s *ActionResponseProperties) SetConfig(val *ActionResponsePropertiesConfig) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ActionResponseProperties) SetID(val OptString) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ActionResponseProperties) SetIsDeprecated(val OptBool) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ActionResponseProperties) SetIsMissingSecrets(val OptBool) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ActionResponseProperties) SetIsPreconfigured(val OptBool) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ActionResponseProperties) SetName(val OptString) {
	s.Name = val
}

func (*ActionResponseProperties) legacyCreateConnectorRes() {}
func (*ActionResponseProperties) legacyGetConnectorRes()    {}
func (*ActionResponseProperties) legacyUpdateConnectorRes() {}

type ActionResponsePropertiesConfig struct{}

type ApiKeyAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyAuth) SetAPIKey(val string) {
	s.APIKey = val
}

type BasicAuth struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// Defines properties for connectors when type is `.cases-webhook`.
// Ref: #/components/schemas/config_properties_cases_webhook
type ConfigPropertiesCasesWebhook struct {
	// A JSON payload sent to the create comment URL to create a case comment. You can use variables to
	// add Kibana Cases data to the payload. The required variable is `case.comment`. Due to Mustache
	// template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON
	// is not validated when you create the connector. The JSON is validated once the Mustache variables
	// have been placed when the REST method runs. Manually ensure that the JSON is valid, disregarding
	// the Mustache variables, so the later validation will pass.
	CreateCommentJson OptString `json:"createCommentJson"`
	// The REST API HTTP request method to create a case comment in the third-party system. Valid values
	// are `patch`, `post`, and `put`.
	CreateCommentMethod OptConfigPropertiesCasesWebhookCreateCommentMethod `json:"createCommentMethod"`
	// The REST API URL to create a case comment by ID in the third-party system. You can use a variable
	// to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts
	// setting`, add the hostname to the allowed hosts.
	CreateCommentUrl OptString `json:"createCommentUrl"`
	// A JSON payload sent to the create case URL to create a case. You can use variables to add case
	// data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache
	// template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`),
	// the JSON is not validated when you create the connector. The JSON is validated after the Mustache
	// variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid
	// future validation errors; disregard Mustache variables during your review.
	CreateIncidentJson string `json:"createIncidentJson"`
	// The REST API HTTP request method to create a case in the third-party system. Valid values are
	// `patch`, `post`, and `put`.
	CreateIncidentMethod OptConfigPropertiesCasesWebhookCreateIncidentMethod `json:"createIncidentMethod"`
	// The JSON key in the create case response that contains the external case ID.
	CreateIncidentResponseKey string `json:"createIncidentResponseKey"`
	// The REST API URL to create a case in the third-party system. If you are using the `xpack.actions.
	// allowedHosts` setting, add the hostname to the allowed hosts.
	CreateIncidentUrl string `json:"createIncidentUrl"`
	// The JSON key in get case response that contains the external case title.
	GetIncidentResponseExternalTitleKey string `json:"getIncidentResponseExternalTitleKey"`
	// The REST API URL to get the case by ID from the third-party system. If you are using the `xpack.
	// actions.allowedHosts` setting, add the hostname to the allowed hosts. You can use a variable to
	// add the external system ID to the URL. Due to Mustache template variables (the text enclosed in
	// triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the
	// connector. The JSON is validated after the Mustache variables have been placed when REST method
	// runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later
	// validation will pass.
	GetIncidentUrl string `json:"getIncidentUrl"`
	// If true, a username and password for login type authentication must be provided.
	HasAuth OptBool `json:"hasAuth"`
	// A set of key-value pairs sent as headers with the request URLs for the create case, update case,
	// get case, and create comment methods.
	Headers OptString `json:"headers"`
	// The JSON payload sent to the update case URL to update the case. You can use variables to add
	// Kibana Cases data to the payload. Required variables are `case.title` and `case.description`. Due
	// to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.
	// title}}}`), the JSON is not validated when you create the connector. The JSON is validated after
	// the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is
	// valid to avoid future validation errors; disregard Mustache variables during your review.
	UpdateIncidentJson string `json:"updateIncidentJson"`
	// The REST API HTTP request method to update the case in the third-party system. Valid values are
	// `patch`, `post`, and `put`.
	UpdateIncidentMethod OptConfigPropertiesCasesWebhookUpdateIncidentMethod `json:"updateIncidentMethod"`
	// The REST API URL to update the case by ID in the third-party system. You can use a variable to add
	// the external system ID to the URL. If you are using the `xpack.actions.allowedHosts` setting, add
	// the hostname to the allowed hosts.
	UpdateIncidentUrl string `json:"updateIncidentUrl"`
	// The URL to view the case in the external system. You can use variables to add the external system
	// ID or external system title to the URL.
	ViewIncidentUrl string `json:"viewIncidentUrl"`
}

// GetCreateCommentJson returns the value of CreateCommentJson.
func (s *ConfigPropertiesCasesWebhook) GetCreateCommentJson() OptString {
	return s.CreateCommentJson
}

// GetCreateCommentMethod returns the value of CreateCommentMethod.
func (s *ConfigPropertiesCasesWebhook) GetCreateCommentMethod() OptConfigPropertiesCasesWebhookCreateCommentMethod {
	return s.CreateCommentMethod
}

// GetCreateCommentUrl returns the value of CreateCommentUrl.
func (s *ConfigPropertiesCasesWebhook) GetCreateCommentUrl() OptString {
	return s.CreateCommentUrl
}

// GetCreateIncidentJson returns the value of CreateIncidentJson.
func (s *ConfigPropertiesCasesWebhook) GetCreateIncidentJson() string {
	return s.CreateIncidentJson
}

// GetCreateIncidentMethod returns the value of CreateIncidentMethod.
func (s *ConfigPropertiesCasesWebhook) GetCreateIncidentMethod() OptConfigPropertiesCasesWebhookCreateIncidentMethod {
	return s.CreateIncidentMethod
}

// GetCreateIncidentResponseKey returns the value of CreateIncidentResponseKey.
func (s *ConfigPropertiesCasesWebhook) GetCreateIncidentResponseKey() string {
	return s.CreateIncidentResponseKey
}

// GetCreateIncidentUrl returns the value of CreateIncidentUrl.
func (s *ConfigPropertiesCasesWebhook) GetCreateIncidentUrl() string {
	return s.CreateIncidentUrl
}

// GetGetIncidentResponseExternalTitleKey returns the value of GetIncidentResponseExternalTitleKey.
func (s *ConfigPropertiesCasesWebhook) GetGetIncidentResponseExternalTitleKey() string {
	return s.GetIncidentResponseExternalTitleKey
}

// GetGetIncidentUrl returns the value of GetIncidentUrl.
func (s *ConfigPropertiesCasesWebhook) GetGetIncidentUrl() string {
	return s.GetIncidentUrl
}

// GetHasAuth returns the value of HasAuth.
func (s *ConfigPropertiesCasesWebhook) GetHasAuth() OptBool {
	return s.HasAuth
}

// GetHeaders returns the value of Headers.
func (s *ConfigPropertiesCasesWebhook) GetHeaders() OptString {
	return s.Headers
}

// GetUpdateIncidentJson returns the value of UpdateIncidentJson.
func (s *ConfigPropertiesCasesWebhook) GetUpdateIncidentJson() string {
	return s.UpdateIncidentJson
}

// GetUpdateIncidentMethod returns the value of UpdateIncidentMethod.
func (s *ConfigPropertiesCasesWebhook) GetUpdateIncidentMethod() OptConfigPropertiesCasesWebhookUpdateIncidentMethod {
	return s.UpdateIncidentMethod
}

// GetUpdateIncidentUrl returns the value of UpdateIncidentUrl.
func (s *ConfigPropertiesCasesWebhook) GetUpdateIncidentUrl() string {
	return s.UpdateIncidentUrl
}

// GetViewIncidentUrl returns the value of ViewIncidentUrl.
func (s *ConfigPropertiesCasesWebhook) GetViewIncidentUrl() string {
	return s.ViewIncidentUrl
}

// SetCreateCommentJson sets the value of CreateCommentJson.
func (s *ConfigPropertiesCasesWebhook) SetCreateCommentJson(val OptString) {
	s.CreateCommentJson = val
}

// SetCreateCommentMethod sets the value of CreateCommentMethod.
func (s *ConfigPropertiesCasesWebhook) SetCreateCommentMethod(val OptConfigPropertiesCasesWebhookCreateCommentMethod) {
	s.CreateCommentMethod = val
}

// SetCreateCommentUrl sets the value of CreateCommentUrl.
func (s *ConfigPropertiesCasesWebhook) SetCreateCommentUrl(val OptString) {
	s.CreateCommentUrl = val
}

// SetCreateIncidentJson sets the value of CreateIncidentJson.
func (s *ConfigPropertiesCasesWebhook) SetCreateIncidentJson(val string) {
	s.CreateIncidentJson = val
}

// SetCreateIncidentMethod sets the value of CreateIncidentMethod.
func (s *ConfigPropertiesCasesWebhook) SetCreateIncidentMethod(val OptConfigPropertiesCasesWebhookCreateIncidentMethod) {
	s.CreateIncidentMethod = val
}

// SetCreateIncidentResponseKey sets the value of CreateIncidentResponseKey.
func (s *ConfigPropertiesCasesWebhook) SetCreateIncidentResponseKey(val string) {
	s.CreateIncidentResponseKey = val
}

// SetCreateIncidentUrl sets the value of CreateIncidentUrl.
func (s *ConfigPropertiesCasesWebhook) SetCreateIncidentUrl(val string) {
	s.CreateIncidentUrl = val
}

// SetGetIncidentResponseExternalTitleKey sets the value of GetIncidentResponseExternalTitleKey.
func (s *ConfigPropertiesCasesWebhook) SetGetIncidentResponseExternalTitleKey(val string) {
	s.GetIncidentResponseExternalTitleKey = val
}

// SetGetIncidentUrl sets the value of GetIncidentUrl.
func (s *ConfigPropertiesCasesWebhook) SetGetIncidentUrl(val string) {
	s.GetIncidentUrl = val
}

// SetHasAuth sets the value of HasAuth.
func (s *ConfigPropertiesCasesWebhook) SetHasAuth(val OptBool) {
	s.HasAuth = val
}

// SetHeaders sets the value of Headers.
func (s *ConfigPropertiesCasesWebhook) SetHeaders(val OptString) {
	s.Headers = val
}

// SetUpdateIncidentJson sets the value of UpdateIncidentJson.
func (s *ConfigPropertiesCasesWebhook) SetUpdateIncidentJson(val string) {
	s.UpdateIncidentJson = val
}

// SetUpdateIncidentMethod sets the value of UpdateIncidentMethod.
func (s *ConfigPropertiesCasesWebhook) SetUpdateIncidentMethod(val OptConfigPropertiesCasesWebhookUpdateIncidentMethod) {
	s.UpdateIncidentMethod = val
}

// SetUpdateIncidentUrl sets the value of UpdateIncidentUrl.
func (s *ConfigPropertiesCasesWebhook) SetUpdateIncidentUrl(val string) {
	s.UpdateIncidentUrl = val
}

// SetViewIncidentUrl sets the value of ViewIncidentUrl.
func (s *ConfigPropertiesCasesWebhook) SetViewIncidentUrl(val string) {
	s.ViewIncidentUrl = val
}

// The REST API HTTP request method to create a case comment in the third-party system. Valid values
// are `patch`, `post`, and `put`.
type ConfigPropertiesCasesWebhookCreateCommentMethod string

const (
	ConfigPropertiesCasesWebhookCreateCommentMethodPatch ConfigPropertiesCasesWebhookCreateCommentMethod = "patch"
	ConfigPropertiesCasesWebhookCreateCommentMethodPost  ConfigPropertiesCasesWebhookCreateCommentMethod = "post"
	ConfigPropertiesCasesWebhookCreateCommentMethodPut   ConfigPropertiesCasesWebhookCreateCommentMethod = "put"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConfigPropertiesCasesWebhookCreateCommentMethod) MarshalText() ([]byte, error) {
	switch s {
	case ConfigPropertiesCasesWebhookCreateCommentMethodPatch:
		return []byte(s), nil
	case ConfigPropertiesCasesWebhookCreateCommentMethodPost:
		return []byte(s), nil
	case ConfigPropertiesCasesWebhookCreateCommentMethodPut:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConfigPropertiesCasesWebhookCreateCommentMethod) UnmarshalText(data []byte) error {
	switch ConfigPropertiesCasesWebhookCreateCommentMethod(data) {
	case ConfigPropertiesCasesWebhookCreateCommentMethodPatch:
		*s = ConfigPropertiesCasesWebhookCreateCommentMethodPatch
		return nil
	case ConfigPropertiesCasesWebhookCreateCommentMethodPost:
		*s = ConfigPropertiesCasesWebhookCreateCommentMethodPost
		return nil
	case ConfigPropertiesCasesWebhookCreateCommentMethodPut:
		*s = ConfigPropertiesCasesWebhookCreateCommentMethodPut
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The REST API HTTP request method to create a case in the third-party system. Valid values are
// `patch`, `post`, and `put`.
type ConfigPropertiesCasesWebhookCreateIncidentMethod string

const (
	ConfigPropertiesCasesWebhookCreateIncidentMethodPatch ConfigPropertiesCasesWebhookCreateIncidentMethod = "patch"
	ConfigPropertiesCasesWebhookCreateIncidentMethodPost  ConfigPropertiesCasesWebhookCreateIncidentMethod = "post"
	ConfigPropertiesCasesWebhookCreateIncidentMethodPut   ConfigPropertiesCasesWebhookCreateIncidentMethod = "put"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConfigPropertiesCasesWebhookCreateIncidentMethod) MarshalText() ([]byte, error) {
	switch s {
	case ConfigPropertiesCasesWebhookCreateIncidentMethodPatch:
		return []byte(s), nil
	case ConfigPropertiesCasesWebhookCreateIncidentMethodPost:
		return []byte(s), nil
	case ConfigPropertiesCasesWebhookCreateIncidentMethodPut:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConfigPropertiesCasesWebhookCreateIncidentMethod) UnmarshalText(data []byte) error {
	switch ConfigPropertiesCasesWebhookCreateIncidentMethod(data) {
	case ConfigPropertiesCasesWebhookCreateIncidentMethodPatch:
		*s = ConfigPropertiesCasesWebhookCreateIncidentMethodPatch
		return nil
	case ConfigPropertiesCasesWebhookCreateIncidentMethodPost:
		*s = ConfigPropertiesCasesWebhookCreateIncidentMethodPost
		return nil
	case ConfigPropertiesCasesWebhookCreateIncidentMethodPut:
		*s = ConfigPropertiesCasesWebhookCreateIncidentMethodPut
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The REST API HTTP request method to update the case in the third-party system. Valid values are
// `patch`, `post`, and `put`.
type ConfigPropertiesCasesWebhookUpdateIncidentMethod string

const (
	ConfigPropertiesCasesWebhookUpdateIncidentMethodPatch ConfigPropertiesCasesWebhookUpdateIncidentMethod = "patch"
	ConfigPropertiesCasesWebhookUpdateIncidentMethodPost  ConfigPropertiesCasesWebhookUpdateIncidentMethod = "post"
	ConfigPropertiesCasesWebhookUpdateIncidentMethodPut   ConfigPropertiesCasesWebhookUpdateIncidentMethod = "put"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConfigPropertiesCasesWebhookUpdateIncidentMethod) MarshalText() ([]byte, error) {
	switch s {
	case ConfigPropertiesCasesWebhookUpdateIncidentMethodPatch:
		return []byte(s), nil
	case ConfigPropertiesCasesWebhookUpdateIncidentMethodPost:
		return []byte(s), nil
	case ConfigPropertiesCasesWebhookUpdateIncidentMethodPut:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConfigPropertiesCasesWebhookUpdateIncidentMethod) UnmarshalText(data []byte) error {
	switch ConfigPropertiesCasesWebhookUpdateIncidentMethod(data) {
	case ConfigPropertiesCasesWebhookUpdateIncidentMethodPatch:
		*s = ConfigPropertiesCasesWebhookUpdateIncidentMethodPatch
		return nil
	case ConfigPropertiesCasesWebhookUpdateIncidentMethodPost:
		*s = ConfigPropertiesCasesWebhookUpdateIncidentMethodPost
		return nil
	case ConfigPropertiesCasesWebhookUpdateIncidentMethodPut:
		*s = ConfigPropertiesCasesWebhookUpdateIncidentMethodPut
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines properties for connectors when type is `.email`.
// Ref: #/components/schemas/config_properties_email
type ConfigPropertiesEmail map[string]jx.Raw

func (s *ConfigPropertiesEmail) init() ConfigPropertiesEmail {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines properties for connectors when type is `.index`.
// Ref: #/components/schemas/config_properties_index
type ConfigPropertiesIndex struct {
	// Specifies a field that will contain the time the alert condition was detected.
	ExecutionTimeField OptNilString `json:"executionTimeField"`
	// The Elasticsearch index to be written to.
	Index string `json:"index"`
	// The refresh policy for the write request, which affects when changes are made visible to search.
	// Refer to the refresh setting for Elasticsearch document APIs.
	Refresh OptBool `json:"refresh"`
}

// GetExecutionTimeField returns the value of ExecutionTimeField.
func (s *ConfigPropertiesIndex) GetExecutionTimeField() OptNilString {
	return s.ExecutionTimeField
}

// GetIndex returns the value of Index.
func (s *ConfigPropertiesIndex) GetIndex() string {
	return s.Index
}

// GetRefresh returns the value of Refresh.
func (s *ConfigPropertiesIndex) GetRefresh() OptBool {
	return s.Refresh
}

// SetExecutionTimeField sets the value of ExecutionTimeField.
func (s *ConfigPropertiesIndex) SetExecutionTimeField(val OptNilString) {
	s.ExecutionTimeField = val
}

// SetIndex sets the value of Index.
func (s *ConfigPropertiesIndex) SetIndex(val string) {
	s.Index = val
}

// SetRefresh sets the value of Refresh.
func (s *ConfigPropertiesIndex) SetRefresh(val OptBool) {
	s.Refresh = val
}

// Defines properties for connectors when type is `.jira`.
// Ref: #/components/schemas/config_properties_jira
type ConfigPropertiesJira struct {
	// The Jira instance URL.
	ApiUrl string `json:"apiUrl"`
	// The Jira project key.
	ProjectKey string `json:"projectKey"`
}

// GetApiUrl returns the value of ApiUrl.
func (s *ConfigPropertiesJira) GetApiUrl() string {
	return s.ApiUrl
}

// GetProjectKey returns the value of ProjectKey.
func (s *ConfigPropertiesJira) GetProjectKey() string {
	return s.ProjectKey
}

// SetApiUrl sets the value of ApiUrl.
func (s *ConfigPropertiesJira) SetApiUrl(val string) {
	s.ApiUrl = val
}

// SetProjectKey sets the value of ProjectKey.
func (s *ConfigPropertiesJira) SetProjectKey(val string) {
	s.ProjectKey = val
}

// Defines properties for connectors when type is `.opsgenie`.
// Ref: #/components/schemas/config_properties_opsgenie
type ConfigPropertiesOpsgenie struct {
	// The Opsgenie URL. For example, `https://api.opsgenie.com` or `https://api.eu.opsgenie.com`. If you
	// are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.
	ApiUrl string `json:"apiUrl"`
}

// GetApiUrl returns the value of ApiUrl.
func (s *ConfigPropertiesOpsgenie) GetApiUrl() string {
	return s.ApiUrl
}

// SetApiUrl sets the value of ApiUrl.
func (s *ConfigPropertiesOpsgenie) SetApiUrl(val string) {
	s.ApiUrl = val
}

// Defines properties for connectors when type is `.pagerduty`.
// Ref: #/components/schemas/config_properties_pagerduty
type ConfigPropertiesPagerduty map[string]jx.Raw

func (s *ConfigPropertiesPagerduty) init() ConfigPropertiesPagerduty {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines properties for connectors when type is `.resilient`.
// Ref: #/components/schemas/config_properties_resilient
type ConfigPropertiesResilient struct {
	// The IBM Resilient instance URL.
	ApiUrl string `json:"apiUrl"`
	// The IBM Resilient organization ID.
	OrgId string `json:"orgId"`
}

// GetApiUrl returns the value of ApiUrl.
func (s *ConfigPropertiesResilient) GetApiUrl() string {
	return s.ApiUrl
}

// GetOrgId returns the value of OrgId.
func (s *ConfigPropertiesResilient) GetOrgId() string {
	return s.OrgId
}

// SetApiUrl sets the value of ApiUrl.
func (s *ConfigPropertiesResilient) SetApiUrl(val string) {
	s.ApiUrl = val
}

// SetOrgId sets the value of OrgId.
func (s *ConfigPropertiesResilient) SetOrgId(val string) {
	s.OrgId = val
}

// Defines properties for connectors when type is `.servicenow`.
// Ref: #/components/schemas/config_properties_servicenow
type ConfigPropertiesServicenow struct {
	// The ServiceNow instance URL.
	ApiUrl string `json:"apiUrl"`
	// The client ID assigned to your OAuth application. This property is required when `isOAuth` is
	// `true`.
	ClientId OptString `json:"clientId"`
	// The type of authentication to use. The default value is false, which means basic authentication is
	// used instead of open authorization (OAuth).
	IsOAuth OptBool `json:"isOAuth"`
	// The key identifier assigned to the JWT verifier map of your OAuth application. This property is
	// required when `isOAuth` is `true`.
	JwtKeyId OptString `json:"jwtKeyId"`
	// The identifier to use for OAuth authentication. This identifier should be the user field you
	// selected when you created an OAuth JWT API endpoint for external clients in your ServiceNow
	// instance. For example, if the selected user field is `Email`, the user identifier should be the
	// user's email address. This property is required when `isOAuth` is `true`.
	UserIdentifierValue OptString `json:"userIdentifierValue"`
	// Determines whether the connector uses the Table API or the Import Set API. This property is
	// supported only for ServiceNow ITSM and ServiceNow SecOps connectors.  NOTE: If this property is
	// set to `false`, the Elastic application should be installed in ServiceNow.
	UsesTableApi OptBool `json:"usesTableApi"`
}

// GetApiUrl returns the value of ApiUrl.
func (s *ConfigPropertiesServicenow) GetApiUrl() string {
	return s.ApiUrl
}

// GetClientId returns the value of ClientId.
func (s *ConfigPropertiesServicenow) GetClientId() OptString {
	return s.ClientId
}

// GetIsOAuth returns the value of IsOAuth.
func (s *ConfigPropertiesServicenow) GetIsOAuth() OptBool {
	return s.IsOAuth
}

// GetJwtKeyId returns the value of JwtKeyId.
func (s *ConfigPropertiesServicenow) GetJwtKeyId() OptString {
	return s.JwtKeyId
}

// GetUserIdentifierValue returns the value of UserIdentifierValue.
func (s *ConfigPropertiesServicenow) GetUserIdentifierValue() OptString {
	return s.UserIdentifierValue
}

// GetUsesTableApi returns the value of UsesTableApi.
func (s *ConfigPropertiesServicenow) GetUsesTableApi() OptBool {
	return s.UsesTableApi
}

// SetApiUrl sets the value of ApiUrl.
func (s *ConfigPropertiesServicenow) SetApiUrl(val string) {
	s.ApiUrl = val
}

// SetClientId sets the value of ClientId.
func (s *ConfigPropertiesServicenow) SetClientId(val OptString) {
	s.ClientId = val
}

// SetIsOAuth sets the value of IsOAuth.
func (s *ConfigPropertiesServicenow) SetIsOAuth(val OptBool) {
	s.IsOAuth = val
}

// SetJwtKeyId sets the value of JwtKeyId.
func (s *ConfigPropertiesServicenow) SetJwtKeyId(val OptString) {
	s.JwtKeyId = val
}

// SetUserIdentifierValue sets the value of UserIdentifierValue.
func (s *ConfigPropertiesServicenow) SetUserIdentifierValue(val OptString) {
	s.UserIdentifierValue = val
}

// SetUsesTableApi sets the value of UsesTableApi.
func (s *ConfigPropertiesServicenow) SetUsesTableApi(val OptBool) {
	s.UsesTableApi = val
}

// Defines properties for connectors when type is `.servicenow`.
// Ref: #/components/schemas/config_properties_servicenow_itom
type ConfigPropertiesServicenowItom struct {
	// The ServiceNow instance URL.
	ApiUrl string `json:"apiUrl"`
	// The client ID assigned to your OAuth application. This property is required when `isOAuth` is
	// `true`.
	ClientId OptString `json:"clientId"`
	// The type of authentication to use. The default value is false, which means basic authentication is
	// used instead of open authorization (OAuth).
	IsOAuth OptBool `json:"isOAuth"`
	// The key identifier assigned to the JWT verifier map of your OAuth application. This property is
	// required when `isOAuth` is `true`.
	JwtKeyId OptString `json:"jwtKeyId"`
	// The identifier to use for OAuth authentication. This identifier should be the user field you
	// selected when you created an OAuth JWT API endpoint for external clients in your ServiceNow
	// instance. For example, if the selected user field is `Email`, the user identifier should be the
	// user's email address. This property is required when `isOAuth` is `true`.
	UserIdentifierValue OptString `json:"userIdentifierValue"`
}

// GetApiUrl returns the value of ApiUrl.
func (s *ConfigPropertiesServicenowItom) GetApiUrl() string {
	return s.ApiUrl
}

// GetClientId returns the value of ClientId.
func (s *ConfigPropertiesServicenowItom) GetClientId() OptString {
	return s.ClientId
}

// GetIsOAuth returns the value of IsOAuth.
func (s *ConfigPropertiesServicenowItom) GetIsOAuth() OptBool {
	return s.IsOAuth
}

// GetJwtKeyId returns the value of JwtKeyId.
func (s *ConfigPropertiesServicenowItom) GetJwtKeyId() OptString {
	return s.JwtKeyId
}

// GetUserIdentifierValue returns the value of UserIdentifierValue.
func (s *ConfigPropertiesServicenowItom) GetUserIdentifierValue() OptString {
	return s.UserIdentifierValue
}

// SetApiUrl sets the value of ApiUrl.
func (s *ConfigPropertiesServicenowItom) SetApiUrl(val string) {
	s.ApiUrl = val
}

// SetClientId sets the value of ClientId.
func (s *ConfigPropertiesServicenowItom) SetClientId(val OptString) {
	s.ClientId = val
}

// SetIsOAuth sets the value of IsOAuth.
func (s *ConfigPropertiesServicenowItom) SetIsOAuth(val OptBool) {
	s.IsOAuth = val
}

// SetJwtKeyId sets the value of JwtKeyId.
func (s *ConfigPropertiesServicenowItom) SetJwtKeyId(val OptString) {
	s.JwtKeyId = val
}

// SetUserIdentifierValue sets the value of UserIdentifierValue.
func (s *ConfigPropertiesServicenowItom) SetUserIdentifierValue(val OptString) {
	s.UserIdentifierValue = val
}

// Defines properties for connectors when type is `.swimlane`.
// Ref: #/components/schemas/config_properties_swimlane
type ConfigPropertiesSwimlane struct {
	// The Swimlane instance URL.
	ApiUrl string `json:"apiUrl"`
	// The Swimlane application ID.
	AppId string `json:"appId"`
	// The type of connector. Valid values are `all`, `alerts`, and `cases`.
	ConnectorType ConfigPropertiesSwimlaneConnectorType `json:"connectorType"`
	// The field mapping.
	Mappings OptConfigPropertiesSwimlaneMappings `json:"mappings"`
}

// GetApiUrl returns the value of ApiUrl.
func (s *ConfigPropertiesSwimlane) GetApiUrl() string {
	return s.ApiUrl
}

// GetAppId returns the value of AppId.
func (s *ConfigPropertiesSwimlane) GetAppId() string {
	return s.AppId
}

// GetConnectorType returns the value of ConnectorType.
func (s *ConfigPropertiesSwimlane) GetConnectorType() ConfigPropertiesSwimlaneConnectorType {
	return s.ConnectorType
}

// GetMappings returns the value of Mappings.
func (s *ConfigPropertiesSwimlane) GetMappings() OptConfigPropertiesSwimlaneMappings {
	return s.Mappings
}

// SetApiUrl sets the value of ApiUrl.
func (s *ConfigPropertiesSwimlane) SetApiUrl(val string) {
	s.ApiUrl = val
}

// SetAppId sets the value of AppId.
func (s *ConfigPropertiesSwimlane) SetAppId(val string) {
	s.AppId = val
}

// SetConnectorType sets the value of ConnectorType.
func (s *ConfigPropertiesSwimlane) SetConnectorType(val ConfigPropertiesSwimlaneConnectorType) {
	s.ConnectorType = val
}

// SetMappings sets the value of Mappings.
func (s *ConfigPropertiesSwimlane) SetMappings(val OptConfigPropertiesSwimlaneMappings) {
	s.Mappings = val
}

// The type of connector. Valid values are `all`, `alerts`, and `cases`.
type ConfigPropertiesSwimlaneConnectorType string

const (
	ConfigPropertiesSwimlaneConnectorTypeAll    ConfigPropertiesSwimlaneConnectorType = "all"
	ConfigPropertiesSwimlaneConnectorTypeAlerts ConfigPropertiesSwimlaneConnectorType = "alerts"
	ConfigPropertiesSwimlaneConnectorTypeCases  ConfigPropertiesSwimlaneConnectorType = "cases"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConfigPropertiesSwimlaneConnectorType) MarshalText() ([]byte, error) {
	switch s {
	case ConfigPropertiesSwimlaneConnectorTypeAll:
		return []byte(s), nil
	case ConfigPropertiesSwimlaneConnectorTypeAlerts:
		return []byte(s), nil
	case ConfigPropertiesSwimlaneConnectorTypeCases:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConfigPropertiesSwimlaneConnectorType) UnmarshalText(data []byte) error {
	switch ConfigPropertiesSwimlaneConnectorType(data) {
	case ConfigPropertiesSwimlaneConnectorTypeAll:
		*s = ConfigPropertiesSwimlaneConnectorTypeAll
		return nil
	case ConfigPropertiesSwimlaneConnectorTypeAlerts:
		*s = ConfigPropertiesSwimlaneConnectorTypeAlerts
		return nil
	case ConfigPropertiesSwimlaneConnectorTypeCases:
		*s = ConfigPropertiesSwimlaneConnectorTypeCases
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The field mapping.
type ConfigPropertiesSwimlaneMappings struct {
	// Mapping for the alert ID.
	AlertIdConfig OptConfigPropertiesSwimlaneMappingsAlertIdConfig `json:"alertIdConfig"`
	// Mapping for the case ID.
	CaseIdConfig OptConfigPropertiesSwimlaneMappingsCaseIdConfig `json:"caseIdConfig"`
	// Mapping for the case name.
	CaseNameConfig OptConfigPropertiesSwimlaneMappingsCaseNameConfig `json:"caseNameConfig"`
	// Mapping for the case comments.
	CommentsConfig OptConfigPropertiesSwimlaneMappingsCommentsConfig `json:"commentsConfig"`
	// Mapping for the case description.
	DescriptionConfig OptConfigPropertiesSwimlaneMappingsDescriptionConfig `json:"descriptionConfig"`
	// Mapping for the name of the alert's rule.
	RuleNameConfig OptConfigPropertiesSwimlaneMappingsRuleNameConfig `json:"ruleNameConfig"`
	// Mapping for the severity.
	SeverityConfig OptConfigPropertiesSwimlaneMappingsSeverityConfig `json:"severityConfig"`
}

// GetAlertIdConfig returns the value of AlertIdConfig.
func (s *ConfigPropertiesSwimlaneMappings) GetAlertIdConfig() OptConfigPropertiesSwimlaneMappingsAlertIdConfig {
	return s.AlertIdConfig
}

// GetCaseIdConfig returns the value of CaseIdConfig.
func (s *ConfigPropertiesSwimlaneMappings) GetCaseIdConfig() OptConfigPropertiesSwimlaneMappingsCaseIdConfig {
	return s.CaseIdConfig
}

// GetCaseNameConfig returns the value of CaseNameConfig.
func (s *ConfigPropertiesSwimlaneMappings) GetCaseNameConfig() OptConfigPropertiesSwimlaneMappingsCaseNameConfig {
	return s.CaseNameConfig
}

// GetCommentsConfig returns the value of CommentsConfig.
func (s *ConfigPropertiesSwimlaneMappings) GetCommentsConfig() OptConfigPropertiesSwimlaneMappingsCommentsConfig {
	return s.CommentsConfig
}

// GetDescriptionConfig returns the value of DescriptionConfig.
func (s *ConfigPropertiesSwimlaneMappings) GetDescriptionConfig() OptConfigPropertiesSwimlaneMappingsDescriptionConfig {
	return s.DescriptionConfig
}

// GetRuleNameConfig returns the value of RuleNameConfig.
func (s *ConfigPropertiesSwimlaneMappings) GetRuleNameConfig() OptConfigPropertiesSwimlaneMappingsRuleNameConfig {
	return s.RuleNameConfig
}

// GetSeverityConfig returns the value of SeverityConfig.
func (s *ConfigPropertiesSwimlaneMappings) GetSeverityConfig() OptConfigPropertiesSwimlaneMappingsSeverityConfig {
	return s.SeverityConfig
}

// SetAlertIdConfig sets the value of AlertIdConfig.
func (s *ConfigPropertiesSwimlaneMappings) SetAlertIdConfig(val OptConfigPropertiesSwimlaneMappingsAlertIdConfig) {
	s.AlertIdConfig = val
}

// SetCaseIdConfig sets the value of CaseIdConfig.
func (s *ConfigPropertiesSwimlaneMappings) SetCaseIdConfig(val OptConfigPropertiesSwimlaneMappingsCaseIdConfig) {
	s.CaseIdConfig = val
}

// SetCaseNameConfig sets the value of CaseNameConfig.
func (s *ConfigPropertiesSwimlaneMappings) SetCaseNameConfig(val OptConfigPropertiesSwimlaneMappingsCaseNameConfig) {
	s.CaseNameConfig = val
}

// SetCommentsConfig sets the value of CommentsConfig.
func (s *ConfigPropertiesSwimlaneMappings) SetCommentsConfig(val OptConfigPropertiesSwimlaneMappingsCommentsConfig) {
	s.CommentsConfig = val
}

// SetDescriptionConfig sets the value of DescriptionConfig.
func (s *ConfigPropertiesSwimlaneMappings) SetDescriptionConfig(val OptConfigPropertiesSwimlaneMappingsDescriptionConfig) {
	s.DescriptionConfig = val
}

// SetRuleNameConfig sets the value of RuleNameConfig.
func (s *ConfigPropertiesSwimlaneMappings) SetRuleNameConfig(val OptConfigPropertiesSwimlaneMappingsRuleNameConfig) {
	s.RuleNameConfig = val
}

// SetSeverityConfig sets the value of SeverityConfig.
func (s *ConfigPropertiesSwimlaneMappings) SetSeverityConfig(val OptConfigPropertiesSwimlaneMappingsSeverityConfig) {
	s.SeverityConfig = val
}

// Mapping for the alert ID.
type ConfigPropertiesSwimlaneMappingsAlertIdConfig struct {
	// The type of field in Swimlane.
	FieldType string `json:"fieldType"`
	// The identifier for the field in Swimlane.
	ID string `json:"id"`
	// The key for the field in Swimlane.
	Key string `json:"key"`
	// The name of the field in Swimlane.
	Name string `json:"name"`
}

// GetFieldType returns the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsAlertIdConfig) GetFieldType() string {
	return s.FieldType
}

// GetID returns the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsAlertIdConfig) GetID() string {
	return s.ID
}

// GetKey returns the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsAlertIdConfig) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsAlertIdConfig) GetName() string {
	return s.Name
}

// SetFieldType sets the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsAlertIdConfig) SetFieldType(val string) {
	s.FieldType = val
}

// SetID sets the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsAlertIdConfig) SetID(val string) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsAlertIdConfig) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsAlertIdConfig) SetName(val string) {
	s.Name = val
}

// Mapping for the case ID.
type ConfigPropertiesSwimlaneMappingsCaseIdConfig struct {
	// The type of field in Swimlane.
	FieldType string `json:"fieldType"`
	// The identifier for the field in Swimlane.
	ID string `json:"id"`
	// The key for the field in Swimlane.
	Key string `json:"key"`
	// The name of the field in Swimlane.
	Name string `json:"name"`
}

// GetFieldType returns the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsCaseIdConfig) GetFieldType() string {
	return s.FieldType
}

// GetID returns the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsCaseIdConfig) GetID() string {
	return s.ID
}

// GetKey returns the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsCaseIdConfig) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsCaseIdConfig) GetName() string {
	return s.Name
}

// SetFieldType sets the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsCaseIdConfig) SetFieldType(val string) {
	s.FieldType = val
}

// SetID sets the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsCaseIdConfig) SetID(val string) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsCaseIdConfig) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsCaseIdConfig) SetName(val string) {
	s.Name = val
}

// Mapping for the case name.
type ConfigPropertiesSwimlaneMappingsCaseNameConfig struct {
	// The type of field in Swimlane.
	FieldType string `json:"fieldType"`
	// The identifier for the field in Swimlane.
	ID string `json:"id"`
	// The key for the field in Swimlane.
	Key string `json:"key"`
	// The name of the field in Swimlane.
	Name string `json:"name"`
}

// GetFieldType returns the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsCaseNameConfig) GetFieldType() string {
	return s.FieldType
}

// GetID returns the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsCaseNameConfig) GetID() string {
	return s.ID
}

// GetKey returns the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsCaseNameConfig) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsCaseNameConfig) GetName() string {
	return s.Name
}

// SetFieldType sets the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsCaseNameConfig) SetFieldType(val string) {
	s.FieldType = val
}

// SetID sets the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsCaseNameConfig) SetID(val string) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsCaseNameConfig) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsCaseNameConfig) SetName(val string) {
	s.Name = val
}

// Mapping for the case comments.
type ConfigPropertiesSwimlaneMappingsCommentsConfig struct {
	// The type of field in Swimlane.
	FieldType string `json:"fieldType"`
	// The identifier for the field in Swimlane.
	ID string `json:"id"`
	// The key for the field in Swimlane.
	Key string `json:"key"`
	// The name of the field in Swimlane.
	Name string `json:"name"`
}

// GetFieldType returns the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsCommentsConfig) GetFieldType() string {
	return s.FieldType
}

// GetID returns the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsCommentsConfig) GetID() string {
	return s.ID
}

// GetKey returns the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsCommentsConfig) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsCommentsConfig) GetName() string {
	return s.Name
}

// SetFieldType sets the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsCommentsConfig) SetFieldType(val string) {
	s.FieldType = val
}

// SetID sets the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsCommentsConfig) SetID(val string) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsCommentsConfig) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsCommentsConfig) SetName(val string) {
	s.Name = val
}

// Mapping for the case description.
type ConfigPropertiesSwimlaneMappingsDescriptionConfig struct {
	// The type of field in Swimlane.
	FieldType string `json:"fieldType"`
	// The identifier for the field in Swimlane.
	ID string `json:"id"`
	// The key for the field in Swimlane.
	Key string `json:"key"`
	// The name of the field in Swimlane.
	Name string `json:"name"`
}

// GetFieldType returns the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsDescriptionConfig) GetFieldType() string {
	return s.FieldType
}

// GetID returns the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsDescriptionConfig) GetID() string {
	return s.ID
}

// GetKey returns the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsDescriptionConfig) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsDescriptionConfig) GetName() string {
	return s.Name
}

// SetFieldType sets the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsDescriptionConfig) SetFieldType(val string) {
	s.FieldType = val
}

// SetID sets the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsDescriptionConfig) SetID(val string) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsDescriptionConfig) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsDescriptionConfig) SetName(val string) {
	s.Name = val
}

// Mapping for the name of the alert's rule.
type ConfigPropertiesSwimlaneMappingsRuleNameConfig struct {
	// The type of field in Swimlane.
	FieldType string `json:"fieldType"`
	// The identifier for the field in Swimlane.
	ID string `json:"id"`
	// The key for the field in Swimlane.
	Key string `json:"key"`
	// The name of the field in Swimlane.
	Name string `json:"name"`
}

// GetFieldType returns the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsRuleNameConfig) GetFieldType() string {
	return s.FieldType
}

// GetID returns the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsRuleNameConfig) GetID() string {
	return s.ID
}

// GetKey returns the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsRuleNameConfig) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsRuleNameConfig) GetName() string {
	return s.Name
}

// SetFieldType sets the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsRuleNameConfig) SetFieldType(val string) {
	s.FieldType = val
}

// SetID sets the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsRuleNameConfig) SetID(val string) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsRuleNameConfig) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsRuleNameConfig) SetName(val string) {
	s.Name = val
}

// Mapping for the severity.
type ConfigPropertiesSwimlaneMappingsSeverityConfig struct {
	// The type of field in Swimlane.
	FieldType string `json:"fieldType"`
	// The identifier for the field in Swimlane.
	ID string `json:"id"`
	// The key for the field in Swimlane.
	Key string `json:"key"`
	// The name of the field in Swimlane.
	Name string `json:"name"`
}

// GetFieldType returns the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsSeverityConfig) GetFieldType() string {
	return s.FieldType
}

// GetID returns the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsSeverityConfig) GetID() string {
	return s.ID
}

// GetKey returns the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsSeverityConfig) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsSeverityConfig) GetName() string {
	return s.Name
}

// SetFieldType sets the value of FieldType.
func (s *ConfigPropertiesSwimlaneMappingsSeverityConfig) SetFieldType(val string) {
	s.FieldType = val
}

// SetID sets the value of ID.
func (s *ConfigPropertiesSwimlaneMappingsSeverityConfig) SetID(val string) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *ConfigPropertiesSwimlaneMappingsSeverityConfig) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *ConfigPropertiesSwimlaneMappingsSeverityConfig) SetName(val string) {
	s.Name = val
}

// Defines properties for connectors when type is `.tines`.
// Ref: #/components/schemas/config_properties_tines
type ConfigPropertiesTines map[string]jx.Raw

func (s *ConfigPropertiesTines) init() ConfigPropertiesTines {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines properties for connectors when type is `.webhook`.
// Ref: #/components/schemas/config_properties_webhook
type ConfigPropertiesWebhook map[string]jx.Raw

func (s *ConfigPropertiesWebhook) init() ConfigPropertiesWebhook {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines properties for connectors when type is `.xmatters`.
// Ref: #/components/schemas/config_properties_xmatters
type ConfigPropertiesXmatters map[string]jx.Raw

func (s *ConfigPropertiesXmatters) init() ConfigPropertiesXmatters {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The properties vary depending on the connector type.
// Ref: #/components/schemas/connector_response_properties
// ConnectorResponseProperties represents sum type.
type ConnectorResponseProperties struct {
	Type                                      ConnectorResponsePropertiesType // switch on this field
	ConnectorResponsePropertiesCasesWebhook   ConnectorResponsePropertiesCasesWebhook
	ConnectorResponsePropertiesEmail          ConnectorResponsePropertiesEmail
	ConnectorResponsePropertiesIndex          ConnectorResponsePropertiesIndex
	ConnectorResponsePropertiesJira           ConnectorResponsePropertiesJira
	ConnectorResponsePropertiesOpsgenie       ConnectorResponsePropertiesOpsgenie
	ConnectorResponsePropertiesPagerduty      ConnectorResponsePropertiesPagerduty
	ConnectorResponsePropertiesResilient      ConnectorResponsePropertiesResilient
	ConnectorResponsePropertiesServerlog      ConnectorResponsePropertiesServerlog
	ConnectorResponsePropertiesServicenow     ConnectorResponsePropertiesServicenow
	ConnectorResponsePropertiesServicenowItom ConnectorResponsePropertiesServicenowItom
	ConnectorResponsePropertiesServicenowSir  ConnectorResponsePropertiesServicenowSir
	ConnectorResponsePropertiesSlack          ConnectorResponsePropertiesSlack
	ConnectorResponsePropertiesSwimlane       ConnectorResponsePropertiesSwimlane
	ConnectorResponsePropertiesTeams          ConnectorResponsePropertiesTeams
	ConnectorResponsePropertiesTines          ConnectorResponsePropertiesTines
	ConnectorResponsePropertiesWebhook        ConnectorResponsePropertiesWebhook
	ConnectorResponsePropertiesXmatters       ConnectorResponsePropertiesXmatters
}

// ConnectorResponsePropertiesType is oneOf type of ConnectorResponseProperties.
type ConnectorResponsePropertiesType string

// Possible values for ConnectorResponsePropertiesType.
const (
	ConnectorResponsePropertiesCasesWebhookConnectorResponseProperties   ConnectorResponsePropertiesType = "ConnectorResponsePropertiesCasesWebhook"
	ConnectorResponsePropertiesEmailConnectorResponseProperties          ConnectorResponsePropertiesType = "ConnectorResponsePropertiesEmail"
	ConnectorResponsePropertiesIndexConnectorResponseProperties          ConnectorResponsePropertiesType = "ConnectorResponsePropertiesIndex"
	ConnectorResponsePropertiesJiraConnectorResponseProperties           ConnectorResponsePropertiesType = "ConnectorResponsePropertiesJira"
	ConnectorResponsePropertiesOpsgenieConnectorResponseProperties       ConnectorResponsePropertiesType = "ConnectorResponsePropertiesOpsgenie"
	ConnectorResponsePropertiesPagerdutyConnectorResponseProperties      ConnectorResponsePropertiesType = "ConnectorResponsePropertiesPagerduty"
	ConnectorResponsePropertiesResilientConnectorResponseProperties      ConnectorResponsePropertiesType = "ConnectorResponsePropertiesResilient"
	ConnectorResponsePropertiesServerlogConnectorResponseProperties      ConnectorResponsePropertiesType = "ConnectorResponsePropertiesServerlog"
	ConnectorResponsePropertiesServicenowConnectorResponseProperties     ConnectorResponsePropertiesType = "ConnectorResponsePropertiesServicenow"
	ConnectorResponsePropertiesServicenowItomConnectorResponseProperties ConnectorResponsePropertiesType = "ConnectorResponsePropertiesServicenowItom"
	ConnectorResponsePropertiesServicenowSirConnectorResponseProperties  ConnectorResponsePropertiesType = "ConnectorResponsePropertiesServicenowSir"
	ConnectorResponsePropertiesSlackConnectorResponseProperties          ConnectorResponsePropertiesType = "ConnectorResponsePropertiesSlack"
	ConnectorResponsePropertiesSwimlaneConnectorResponseProperties       ConnectorResponsePropertiesType = "ConnectorResponsePropertiesSwimlane"
	ConnectorResponsePropertiesTeamsConnectorResponseProperties          ConnectorResponsePropertiesType = "ConnectorResponsePropertiesTeams"
	ConnectorResponsePropertiesTinesConnectorResponseProperties          ConnectorResponsePropertiesType = "ConnectorResponsePropertiesTines"
	ConnectorResponsePropertiesWebhookConnectorResponseProperties        ConnectorResponsePropertiesType = "ConnectorResponsePropertiesWebhook"
	ConnectorResponsePropertiesXmattersConnectorResponseProperties       ConnectorResponsePropertiesType = "ConnectorResponsePropertiesXmatters"
)

// IsConnectorResponsePropertiesCasesWebhook reports whether ConnectorResponseProperties is ConnectorResponsePropertiesCasesWebhook.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesCasesWebhook() bool {
	return s.Type == ConnectorResponsePropertiesCasesWebhookConnectorResponseProperties
}

// IsConnectorResponsePropertiesEmail reports whether ConnectorResponseProperties is ConnectorResponsePropertiesEmail.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesEmail() bool {
	return s.Type == ConnectorResponsePropertiesEmailConnectorResponseProperties
}

// IsConnectorResponsePropertiesIndex reports whether ConnectorResponseProperties is ConnectorResponsePropertiesIndex.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesIndex() bool {
	return s.Type == ConnectorResponsePropertiesIndexConnectorResponseProperties
}

// IsConnectorResponsePropertiesJira reports whether ConnectorResponseProperties is ConnectorResponsePropertiesJira.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesJira() bool {
	return s.Type == ConnectorResponsePropertiesJiraConnectorResponseProperties
}

// IsConnectorResponsePropertiesOpsgenie reports whether ConnectorResponseProperties is ConnectorResponsePropertiesOpsgenie.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesOpsgenie() bool {
	return s.Type == ConnectorResponsePropertiesOpsgenieConnectorResponseProperties
}

// IsConnectorResponsePropertiesPagerduty reports whether ConnectorResponseProperties is ConnectorResponsePropertiesPagerduty.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesPagerduty() bool {
	return s.Type == ConnectorResponsePropertiesPagerdutyConnectorResponseProperties
}

// IsConnectorResponsePropertiesResilient reports whether ConnectorResponseProperties is ConnectorResponsePropertiesResilient.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesResilient() bool {
	return s.Type == ConnectorResponsePropertiesResilientConnectorResponseProperties
}

// IsConnectorResponsePropertiesServerlog reports whether ConnectorResponseProperties is ConnectorResponsePropertiesServerlog.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesServerlog() bool {
	return s.Type == ConnectorResponsePropertiesServerlogConnectorResponseProperties
}

// IsConnectorResponsePropertiesServicenow reports whether ConnectorResponseProperties is ConnectorResponsePropertiesServicenow.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesServicenow() bool {
	return s.Type == ConnectorResponsePropertiesServicenowConnectorResponseProperties
}

// IsConnectorResponsePropertiesServicenowItom reports whether ConnectorResponseProperties is ConnectorResponsePropertiesServicenowItom.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesServicenowItom() bool {
	return s.Type == ConnectorResponsePropertiesServicenowItomConnectorResponseProperties
}

// IsConnectorResponsePropertiesServicenowSir reports whether ConnectorResponseProperties is ConnectorResponsePropertiesServicenowSir.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesServicenowSir() bool {
	return s.Type == ConnectorResponsePropertiesServicenowSirConnectorResponseProperties
}

// IsConnectorResponsePropertiesSlack reports whether ConnectorResponseProperties is ConnectorResponsePropertiesSlack.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesSlack() bool {
	return s.Type == ConnectorResponsePropertiesSlackConnectorResponseProperties
}

// IsConnectorResponsePropertiesSwimlane reports whether ConnectorResponseProperties is ConnectorResponsePropertiesSwimlane.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesSwimlane() bool {
	return s.Type == ConnectorResponsePropertiesSwimlaneConnectorResponseProperties
}

// IsConnectorResponsePropertiesTeams reports whether ConnectorResponseProperties is ConnectorResponsePropertiesTeams.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesTeams() bool {
	return s.Type == ConnectorResponsePropertiesTeamsConnectorResponseProperties
}

// IsConnectorResponsePropertiesTines reports whether ConnectorResponseProperties is ConnectorResponsePropertiesTines.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesTines() bool {
	return s.Type == ConnectorResponsePropertiesTinesConnectorResponseProperties
}

// IsConnectorResponsePropertiesWebhook reports whether ConnectorResponseProperties is ConnectorResponsePropertiesWebhook.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesWebhook() bool {
	return s.Type == ConnectorResponsePropertiesWebhookConnectorResponseProperties
}

// IsConnectorResponsePropertiesXmatters reports whether ConnectorResponseProperties is ConnectorResponsePropertiesXmatters.
func (s ConnectorResponseProperties) IsConnectorResponsePropertiesXmatters() bool {
	return s.Type == ConnectorResponsePropertiesXmattersConnectorResponseProperties
}

// SetConnectorResponsePropertiesCasesWebhook sets ConnectorResponseProperties to ConnectorResponsePropertiesCasesWebhook.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesCasesWebhook(v ConnectorResponsePropertiesCasesWebhook) {
	s.Type = ConnectorResponsePropertiesCasesWebhookConnectorResponseProperties
	s.ConnectorResponsePropertiesCasesWebhook = v
}

// GetConnectorResponsePropertiesCasesWebhook returns ConnectorResponsePropertiesCasesWebhook and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesCasesWebhook.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesCasesWebhook() (v ConnectorResponsePropertiesCasesWebhook, ok bool) {
	if !s.IsConnectorResponsePropertiesCasesWebhook() {
		return v, false
	}
	return s.ConnectorResponsePropertiesCasesWebhook, true
}

// NewConnectorResponsePropertiesCasesWebhookConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesCasesWebhook.
func NewConnectorResponsePropertiesCasesWebhookConnectorResponseProperties(v ConnectorResponsePropertiesCasesWebhook) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesCasesWebhook(v)
	return s
}

// SetConnectorResponsePropertiesEmail sets ConnectorResponseProperties to ConnectorResponsePropertiesEmail.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesEmail(v ConnectorResponsePropertiesEmail) {
	s.Type = ConnectorResponsePropertiesEmailConnectorResponseProperties
	s.ConnectorResponsePropertiesEmail = v
}

// GetConnectorResponsePropertiesEmail returns ConnectorResponsePropertiesEmail and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesEmail.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesEmail() (v ConnectorResponsePropertiesEmail, ok bool) {
	if !s.IsConnectorResponsePropertiesEmail() {
		return v, false
	}
	return s.ConnectorResponsePropertiesEmail, true
}

// NewConnectorResponsePropertiesEmailConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesEmail.
func NewConnectorResponsePropertiesEmailConnectorResponseProperties(v ConnectorResponsePropertiesEmail) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesEmail(v)
	return s
}

// SetConnectorResponsePropertiesIndex sets ConnectorResponseProperties to ConnectorResponsePropertiesIndex.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesIndex(v ConnectorResponsePropertiesIndex) {
	s.Type = ConnectorResponsePropertiesIndexConnectorResponseProperties
	s.ConnectorResponsePropertiesIndex = v
}

// GetConnectorResponsePropertiesIndex returns ConnectorResponsePropertiesIndex and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesIndex.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesIndex() (v ConnectorResponsePropertiesIndex, ok bool) {
	if !s.IsConnectorResponsePropertiesIndex() {
		return v, false
	}
	return s.ConnectorResponsePropertiesIndex, true
}

// NewConnectorResponsePropertiesIndexConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesIndex.
func NewConnectorResponsePropertiesIndexConnectorResponseProperties(v ConnectorResponsePropertiesIndex) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesIndex(v)
	return s
}

// SetConnectorResponsePropertiesJira sets ConnectorResponseProperties to ConnectorResponsePropertiesJira.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesJira(v ConnectorResponsePropertiesJira) {
	s.Type = ConnectorResponsePropertiesJiraConnectorResponseProperties
	s.ConnectorResponsePropertiesJira = v
}

// GetConnectorResponsePropertiesJira returns ConnectorResponsePropertiesJira and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesJira.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesJira() (v ConnectorResponsePropertiesJira, ok bool) {
	if !s.IsConnectorResponsePropertiesJira() {
		return v, false
	}
	return s.ConnectorResponsePropertiesJira, true
}

// NewConnectorResponsePropertiesJiraConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesJira.
func NewConnectorResponsePropertiesJiraConnectorResponseProperties(v ConnectorResponsePropertiesJira) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesJira(v)
	return s
}

// SetConnectorResponsePropertiesOpsgenie sets ConnectorResponseProperties to ConnectorResponsePropertiesOpsgenie.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesOpsgenie(v ConnectorResponsePropertiesOpsgenie) {
	s.Type = ConnectorResponsePropertiesOpsgenieConnectorResponseProperties
	s.ConnectorResponsePropertiesOpsgenie = v
}

// GetConnectorResponsePropertiesOpsgenie returns ConnectorResponsePropertiesOpsgenie and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesOpsgenie.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesOpsgenie() (v ConnectorResponsePropertiesOpsgenie, ok bool) {
	if !s.IsConnectorResponsePropertiesOpsgenie() {
		return v, false
	}
	return s.ConnectorResponsePropertiesOpsgenie, true
}

// NewConnectorResponsePropertiesOpsgenieConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesOpsgenie.
func NewConnectorResponsePropertiesOpsgenieConnectorResponseProperties(v ConnectorResponsePropertiesOpsgenie) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesOpsgenie(v)
	return s
}

// SetConnectorResponsePropertiesPagerduty sets ConnectorResponseProperties to ConnectorResponsePropertiesPagerduty.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesPagerduty(v ConnectorResponsePropertiesPagerduty) {
	s.Type = ConnectorResponsePropertiesPagerdutyConnectorResponseProperties
	s.ConnectorResponsePropertiesPagerduty = v
}

// GetConnectorResponsePropertiesPagerduty returns ConnectorResponsePropertiesPagerduty and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesPagerduty.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesPagerduty() (v ConnectorResponsePropertiesPagerduty, ok bool) {
	if !s.IsConnectorResponsePropertiesPagerduty() {
		return v, false
	}
	return s.ConnectorResponsePropertiesPagerduty, true
}

// NewConnectorResponsePropertiesPagerdutyConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesPagerduty.
func NewConnectorResponsePropertiesPagerdutyConnectorResponseProperties(v ConnectorResponsePropertiesPagerduty) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesPagerduty(v)
	return s
}

// SetConnectorResponsePropertiesResilient sets ConnectorResponseProperties to ConnectorResponsePropertiesResilient.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesResilient(v ConnectorResponsePropertiesResilient) {
	s.Type = ConnectorResponsePropertiesResilientConnectorResponseProperties
	s.ConnectorResponsePropertiesResilient = v
}

// GetConnectorResponsePropertiesResilient returns ConnectorResponsePropertiesResilient and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesResilient.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesResilient() (v ConnectorResponsePropertiesResilient, ok bool) {
	if !s.IsConnectorResponsePropertiesResilient() {
		return v, false
	}
	return s.ConnectorResponsePropertiesResilient, true
}

// NewConnectorResponsePropertiesResilientConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesResilient.
func NewConnectorResponsePropertiesResilientConnectorResponseProperties(v ConnectorResponsePropertiesResilient) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesResilient(v)
	return s
}

// SetConnectorResponsePropertiesServerlog sets ConnectorResponseProperties to ConnectorResponsePropertiesServerlog.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesServerlog(v ConnectorResponsePropertiesServerlog) {
	s.Type = ConnectorResponsePropertiesServerlogConnectorResponseProperties
	s.ConnectorResponsePropertiesServerlog = v
}

// GetConnectorResponsePropertiesServerlog returns ConnectorResponsePropertiesServerlog and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesServerlog.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesServerlog() (v ConnectorResponsePropertiesServerlog, ok bool) {
	if !s.IsConnectorResponsePropertiesServerlog() {
		return v, false
	}
	return s.ConnectorResponsePropertiesServerlog, true
}

// NewConnectorResponsePropertiesServerlogConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesServerlog.
func NewConnectorResponsePropertiesServerlogConnectorResponseProperties(v ConnectorResponsePropertiesServerlog) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesServerlog(v)
	return s
}

// SetConnectorResponsePropertiesServicenow sets ConnectorResponseProperties to ConnectorResponsePropertiesServicenow.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesServicenow(v ConnectorResponsePropertiesServicenow) {
	s.Type = ConnectorResponsePropertiesServicenowConnectorResponseProperties
	s.ConnectorResponsePropertiesServicenow = v
}

// GetConnectorResponsePropertiesServicenow returns ConnectorResponsePropertiesServicenow and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesServicenow.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesServicenow() (v ConnectorResponsePropertiesServicenow, ok bool) {
	if !s.IsConnectorResponsePropertiesServicenow() {
		return v, false
	}
	return s.ConnectorResponsePropertiesServicenow, true
}

// NewConnectorResponsePropertiesServicenowConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesServicenow.
func NewConnectorResponsePropertiesServicenowConnectorResponseProperties(v ConnectorResponsePropertiesServicenow) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesServicenow(v)
	return s
}

// SetConnectorResponsePropertiesServicenowItom sets ConnectorResponseProperties to ConnectorResponsePropertiesServicenowItom.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesServicenowItom(v ConnectorResponsePropertiesServicenowItom) {
	s.Type = ConnectorResponsePropertiesServicenowItomConnectorResponseProperties
	s.ConnectorResponsePropertiesServicenowItom = v
}

// GetConnectorResponsePropertiesServicenowItom returns ConnectorResponsePropertiesServicenowItom and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesServicenowItom.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesServicenowItom() (v ConnectorResponsePropertiesServicenowItom, ok bool) {
	if !s.IsConnectorResponsePropertiesServicenowItom() {
		return v, false
	}
	return s.ConnectorResponsePropertiesServicenowItom, true
}

// NewConnectorResponsePropertiesServicenowItomConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesServicenowItom.
func NewConnectorResponsePropertiesServicenowItomConnectorResponseProperties(v ConnectorResponsePropertiesServicenowItom) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesServicenowItom(v)
	return s
}

// SetConnectorResponsePropertiesServicenowSir sets ConnectorResponseProperties to ConnectorResponsePropertiesServicenowSir.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesServicenowSir(v ConnectorResponsePropertiesServicenowSir) {
	s.Type = ConnectorResponsePropertiesServicenowSirConnectorResponseProperties
	s.ConnectorResponsePropertiesServicenowSir = v
}

// GetConnectorResponsePropertiesServicenowSir returns ConnectorResponsePropertiesServicenowSir and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesServicenowSir.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesServicenowSir() (v ConnectorResponsePropertiesServicenowSir, ok bool) {
	if !s.IsConnectorResponsePropertiesServicenowSir() {
		return v, false
	}
	return s.ConnectorResponsePropertiesServicenowSir, true
}

// NewConnectorResponsePropertiesServicenowSirConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesServicenowSir.
func NewConnectorResponsePropertiesServicenowSirConnectorResponseProperties(v ConnectorResponsePropertiesServicenowSir) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesServicenowSir(v)
	return s
}

// SetConnectorResponsePropertiesSlack sets ConnectorResponseProperties to ConnectorResponsePropertiesSlack.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesSlack(v ConnectorResponsePropertiesSlack) {
	s.Type = ConnectorResponsePropertiesSlackConnectorResponseProperties
	s.ConnectorResponsePropertiesSlack = v
}

// GetConnectorResponsePropertiesSlack returns ConnectorResponsePropertiesSlack and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesSlack.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesSlack() (v ConnectorResponsePropertiesSlack, ok bool) {
	if !s.IsConnectorResponsePropertiesSlack() {
		return v, false
	}
	return s.ConnectorResponsePropertiesSlack, true
}

// NewConnectorResponsePropertiesSlackConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesSlack.
func NewConnectorResponsePropertiesSlackConnectorResponseProperties(v ConnectorResponsePropertiesSlack) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesSlack(v)
	return s
}

// SetConnectorResponsePropertiesSwimlane sets ConnectorResponseProperties to ConnectorResponsePropertiesSwimlane.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesSwimlane(v ConnectorResponsePropertiesSwimlane) {
	s.Type = ConnectorResponsePropertiesSwimlaneConnectorResponseProperties
	s.ConnectorResponsePropertiesSwimlane = v
}

// GetConnectorResponsePropertiesSwimlane returns ConnectorResponsePropertiesSwimlane and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesSwimlane.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesSwimlane() (v ConnectorResponsePropertiesSwimlane, ok bool) {
	if !s.IsConnectorResponsePropertiesSwimlane() {
		return v, false
	}
	return s.ConnectorResponsePropertiesSwimlane, true
}

// NewConnectorResponsePropertiesSwimlaneConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesSwimlane.
func NewConnectorResponsePropertiesSwimlaneConnectorResponseProperties(v ConnectorResponsePropertiesSwimlane) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesSwimlane(v)
	return s
}

// SetConnectorResponsePropertiesTeams sets ConnectorResponseProperties to ConnectorResponsePropertiesTeams.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesTeams(v ConnectorResponsePropertiesTeams) {
	s.Type = ConnectorResponsePropertiesTeamsConnectorResponseProperties
	s.ConnectorResponsePropertiesTeams = v
}

// GetConnectorResponsePropertiesTeams returns ConnectorResponsePropertiesTeams and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesTeams.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesTeams() (v ConnectorResponsePropertiesTeams, ok bool) {
	if !s.IsConnectorResponsePropertiesTeams() {
		return v, false
	}
	return s.ConnectorResponsePropertiesTeams, true
}

// NewConnectorResponsePropertiesTeamsConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesTeams.
func NewConnectorResponsePropertiesTeamsConnectorResponseProperties(v ConnectorResponsePropertiesTeams) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesTeams(v)
	return s
}

// SetConnectorResponsePropertiesTines sets ConnectorResponseProperties to ConnectorResponsePropertiesTines.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesTines(v ConnectorResponsePropertiesTines) {
	s.Type = ConnectorResponsePropertiesTinesConnectorResponseProperties
	s.ConnectorResponsePropertiesTines = v
}

// GetConnectorResponsePropertiesTines returns ConnectorResponsePropertiesTines and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesTines.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesTines() (v ConnectorResponsePropertiesTines, ok bool) {
	if !s.IsConnectorResponsePropertiesTines() {
		return v, false
	}
	return s.ConnectorResponsePropertiesTines, true
}

// NewConnectorResponsePropertiesTinesConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesTines.
func NewConnectorResponsePropertiesTinesConnectorResponseProperties(v ConnectorResponsePropertiesTines) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesTines(v)
	return s
}

// SetConnectorResponsePropertiesWebhook sets ConnectorResponseProperties to ConnectorResponsePropertiesWebhook.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesWebhook(v ConnectorResponsePropertiesWebhook) {
	s.Type = ConnectorResponsePropertiesWebhookConnectorResponseProperties
	s.ConnectorResponsePropertiesWebhook = v
}

// GetConnectorResponsePropertiesWebhook returns ConnectorResponsePropertiesWebhook and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesWebhook.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesWebhook() (v ConnectorResponsePropertiesWebhook, ok bool) {
	if !s.IsConnectorResponsePropertiesWebhook() {
		return v, false
	}
	return s.ConnectorResponsePropertiesWebhook, true
}

// NewConnectorResponsePropertiesWebhookConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesWebhook.
func NewConnectorResponsePropertiesWebhookConnectorResponseProperties(v ConnectorResponsePropertiesWebhook) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesWebhook(v)
	return s
}

// SetConnectorResponsePropertiesXmatters sets ConnectorResponseProperties to ConnectorResponsePropertiesXmatters.
func (s *ConnectorResponseProperties) SetConnectorResponsePropertiesXmatters(v ConnectorResponsePropertiesXmatters) {
	s.Type = ConnectorResponsePropertiesXmattersConnectorResponseProperties
	s.ConnectorResponsePropertiesXmatters = v
}

// GetConnectorResponsePropertiesXmatters returns ConnectorResponsePropertiesXmatters and true boolean if ConnectorResponseProperties is ConnectorResponsePropertiesXmatters.
func (s ConnectorResponseProperties) GetConnectorResponsePropertiesXmatters() (v ConnectorResponsePropertiesXmatters, ok bool) {
	if !s.IsConnectorResponsePropertiesXmatters() {
		return v, false
	}
	return s.ConnectorResponsePropertiesXmatters, true
}

// NewConnectorResponsePropertiesXmattersConnectorResponseProperties returns new ConnectorResponseProperties from ConnectorResponsePropertiesXmatters.
func NewConnectorResponsePropertiesXmattersConnectorResponseProperties(v ConnectorResponsePropertiesXmatters) ConnectorResponseProperties {
	var s ConnectorResponseProperties
	s.SetConnectorResponsePropertiesXmatters(v)
	return s
}

func (*ConnectorResponseProperties) createConnectorRes() {}
func (*ConnectorResponseProperties) getConnectorRes()    {}
func (*ConnectorResponseProperties) updateConnectorRes() {}

// Ref: #/components/schemas/connector_response_properties_cases_webhook
type ConnectorResponsePropertiesCasesWebhook struct {
	Config ConfigPropertiesCasesWebhook `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesCasesWebhook) GetConfig() ConfigPropertiesCasesWebhook {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesCasesWebhook) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesCasesWebhook) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesCasesWebhook) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesCasesWebhook) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesCasesWebhook) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesCasesWebhook) SetConfig(val ConfigPropertiesCasesWebhook) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesCasesWebhook) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesCasesWebhook) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesCasesWebhook) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesCasesWebhook) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesCasesWebhook) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesCasesWebhookConnectorTypeID string

const (
	ConnectorResponsePropertiesCasesWebhookConnectorTypeIDDotCasesMinusWebhook ConnectorResponsePropertiesCasesWebhookConnectorTypeID = ".cases-webhook"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesCasesWebhookConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesCasesWebhookConnectorTypeIDDotCasesMinusWebhook:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesCasesWebhookConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesCasesWebhookConnectorTypeID(data) {
	case ConnectorResponsePropertiesCasesWebhookConnectorTypeIDDotCasesMinusWebhook:
		*s = ConnectorResponsePropertiesCasesWebhookConnectorTypeIDDotCasesMinusWebhook
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_email
type ConnectorResponsePropertiesEmail struct {
	Config ConfigPropertiesEmail `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesEmail) GetConfig() ConfigPropertiesEmail {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesEmail) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesEmail) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesEmail) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesEmail) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesEmail) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesEmail) SetConfig(val ConfigPropertiesEmail) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesEmail) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesEmail) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesEmail) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesEmail) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesEmail) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesEmailConnectorTypeID string

const (
	ConnectorResponsePropertiesEmailConnectorTypeIDDotEmail ConnectorResponsePropertiesEmailConnectorTypeID = ".email"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesEmailConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesEmailConnectorTypeIDDotEmail:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesEmailConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesEmailConnectorTypeID(data) {
	case ConnectorResponsePropertiesEmailConnectorTypeIDDotEmail:
		*s = ConnectorResponsePropertiesEmailConnectorTypeIDDotEmail
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_index
type ConnectorResponsePropertiesIndex struct {
	Config ConfigPropertiesIndex `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesIndex) GetConfig() ConfigPropertiesIndex {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesIndex) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesIndex) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesIndex) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesIndex) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesIndex) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesIndex) SetConfig(val ConfigPropertiesIndex) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesIndex) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesIndex) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesIndex) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesIndex) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesIndex) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesIndexConnectorTypeID string

const (
	ConnectorResponsePropertiesIndexConnectorTypeIDDotIndex ConnectorResponsePropertiesIndexConnectorTypeID = ".index"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesIndexConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesIndexConnectorTypeIDDotIndex:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesIndexConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesIndexConnectorTypeID(data) {
	case ConnectorResponsePropertiesIndexConnectorTypeIDDotIndex:
		*s = ConnectorResponsePropertiesIndexConnectorTypeIDDotIndex
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_jira
type ConnectorResponsePropertiesJira struct {
	Config ConfigPropertiesJira `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesJira) GetConfig() ConfigPropertiesJira {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesJira) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesJira) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesJira) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesJira) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesJira) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesJira) SetConfig(val ConfigPropertiesJira) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesJira) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesJira) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesJira) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesJira) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesJira) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesJiraConnectorTypeID string

const (
	ConnectorResponsePropertiesJiraConnectorTypeIDDotJira ConnectorResponsePropertiesJiraConnectorTypeID = ".jira"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesJiraConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesJiraConnectorTypeIDDotJira:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesJiraConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesJiraConnectorTypeID(data) {
	case ConnectorResponsePropertiesJiraConnectorTypeIDDotJira:
		*s = ConnectorResponsePropertiesJiraConnectorTypeIDDotJira
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_opsgenie
type ConnectorResponsePropertiesOpsgenie struct {
	Config ConfigPropertiesOpsgenie `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesOpsgenie) GetConfig() ConfigPropertiesOpsgenie {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesOpsgenie) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesOpsgenie) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesOpsgenie) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesOpsgenie) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesOpsgenie) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesOpsgenie) SetConfig(val ConfigPropertiesOpsgenie) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesOpsgenie) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesOpsgenie) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesOpsgenie) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesOpsgenie) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesOpsgenie) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesOpsgenieConnectorTypeID string

const (
	ConnectorResponsePropertiesOpsgenieConnectorTypeIDDotOpsgenie ConnectorResponsePropertiesOpsgenieConnectorTypeID = ".opsgenie"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesOpsgenieConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesOpsgenieConnectorTypeIDDotOpsgenie:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesOpsgenieConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesOpsgenieConnectorTypeID(data) {
	case ConnectorResponsePropertiesOpsgenieConnectorTypeIDDotOpsgenie:
		*s = ConnectorResponsePropertiesOpsgenieConnectorTypeIDDotOpsgenie
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_pagerduty
type ConnectorResponsePropertiesPagerduty struct {
	Config ConfigPropertiesPagerduty `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesPagerduty) GetConfig() ConfigPropertiesPagerduty {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesPagerduty) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesPagerduty) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesPagerduty) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesPagerduty) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesPagerduty) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesPagerduty) SetConfig(val ConfigPropertiesPagerduty) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesPagerduty) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesPagerduty) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesPagerduty) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesPagerduty) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesPagerduty) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesPagerdutyConnectorTypeID string

const (
	ConnectorResponsePropertiesPagerdutyConnectorTypeIDDotPagerduty ConnectorResponsePropertiesPagerdutyConnectorTypeID = ".pagerduty"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesPagerdutyConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesPagerdutyConnectorTypeIDDotPagerduty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesPagerdutyConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesPagerdutyConnectorTypeID(data) {
	case ConnectorResponsePropertiesPagerdutyConnectorTypeIDDotPagerduty:
		*s = ConnectorResponsePropertiesPagerdutyConnectorTypeIDDotPagerduty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_resilient
type ConnectorResponsePropertiesResilient struct {
	Config ConfigPropertiesResilient `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesResilient) GetConfig() ConfigPropertiesResilient {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesResilient) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesResilient) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesResilient) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesResilient) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesResilient) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesResilient) SetConfig(val ConfigPropertiesResilient) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesResilient) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesResilient) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesResilient) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesResilient) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesResilient) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesResilientConnectorTypeID string

const (
	ConnectorResponsePropertiesResilientConnectorTypeIDDotResilient ConnectorResponsePropertiesResilientConnectorTypeID = ".resilient"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesResilientConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesResilientConnectorTypeIDDotResilient:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesResilientConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesResilientConnectorTypeID(data) {
	case ConnectorResponsePropertiesResilientConnectorTypeIDDotResilient:
		*s = ConnectorResponsePropertiesResilientConnectorTypeIDDotResilient
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_serverlog
type ConnectorResponsePropertiesServerlog struct {
	Config *ConnectorResponsePropertiesServerlogConfig `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesServerlog) GetConfig() *ConnectorResponsePropertiesServerlogConfig {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesServerlog) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesServerlog) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesServerlog) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesServerlog) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesServerlog) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesServerlog) SetConfig(val *ConnectorResponsePropertiesServerlogConfig) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesServerlog) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesServerlog) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesServerlog) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesServerlog) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesServerlog) SetName(val string) {
	s.Name = val
}

type ConnectorResponsePropertiesServerlogConfig struct{}

// The type of connector.
type ConnectorResponsePropertiesServerlogConnectorTypeID string

const (
	ConnectorResponsePropertiesServerlogConnectorTypeIDDotServerMinusLog ConnectorResponsePropertiesServerlogConnectorTypeID = ".server-log"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesServerlogConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesServerlogConnectorTypeIDDotServerMinusLog:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesServerlogConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesServerlogConnectorTypeID(data) {
	case ConnectorResponsePropertiesServerlogConnectorTypeIDDotServerMinusLog:
		*s = ConnectorResponsePropertiesServerlogConnectorTypeIDDotServerMinusLog
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_servicenow
type ConnectorResponsePropertiesServicenow struct {
	Config ConfigPropertiesServicenow `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesServicenow) GetConfig() ConfigPropertiesServicenow {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesServicenow) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesServicenow) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesServicenow) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesServicenow) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesServicenow) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesServicenow) SetConfig(val ConfigPropertiesServicenow) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesServicenow) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesServicenow) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesServicenow) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesServicenow) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesServicenow) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesServicenowConnectorTypeID string

const (
	ConnectorResponsePropertiesServicenowConnectorTypeIDDotServicenow ConnectorResponsePropertiesServicenowConnectorTypeID = ".servicenow"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesServicenowConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesServicenowConnectorTypeIDDotServicenow:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesServicenowConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesServicenowConnectorTypeID(data) {
	case ConnectorResponsePropertiesServicenowConnectorTypeIDDotServicenow:
		*s = ConnectorResponsePropertiesServicenowConnectorTypeIDDotServicenow
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_servicenow_itom
type ConnectorResponsePropertiesServicenowItom struct {
	Config ConfigPropertiesServicenowItom `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesServicenowItom) GetConfig() ConfigPropertiesServicenowItom {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesServicenowItom) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesServicenowItom) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesServicenowItom) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesServicenowItom) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesServicenowItom) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesServicenowItom) SetConfig(val ConfigPropertiesServicenowItom) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesServicenowItom) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesServicenowItom) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesServicenowItom) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesServicenowItom) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesServicenowItom) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesServicenowItomConnectorTypeID string

const (
	ConnectorResponsePropertiesServicenowItomConnectorTypeIDDotServicenowMinusItom ConnectorResponsePropertiesServicenowItomConnectorTypeID = ".servicenow-itom"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesServicenowItomConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesServicenowItomConnectorTypeIDDotServicenowMinusItom:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesServicenowItomConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesServicenowItomConnectorTypeID(data) {
	case ConnectorResponsePropertiesServicenowItomConnectorTypeIDDotServicenowMinusItom:
		*s = ConnectorResponsePropertiesServicenowItomConnectorTypeIDDotServicenowMinusItom
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_servicenow_sir
type ConnectorResponsePropertiesServicenowSir struct {
	Config ConfigPropertiesServicenow `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesServicenowSir) GetConfig() ConfigPropertiesServicenow {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesServicenowSir) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesServicenowSir) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesServicenowSir) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesServicenowSir) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesServicenowSir) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesServicenowSir) SetConfig(val ConfigPropertiesServicenow) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesServicenowSir) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesServicenowSir) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesServicenowSir) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesServicenowSir) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesServicenowSir) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesServicenowSirConnectorTypeID string

const (
	ConnectorResponsePropertiesServicenowSirConnectorTypeIDDotServicenowMinusSir ConnectorResponsePropertiesServicenowSirConnectorTypeID = ".servicenow-sir"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesServicenowSirConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesServicenowSirConnectorTypeIDDotServicenowMinusSir:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesServicenowSirConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesServicenowSirConnectorTypeID(data) {
	case ConnectorResponsePropertiesServicenowSirConnectorTypeIDDotServicenowMinusSir:
		*s = ConnectorResponsePropertiesServicenowSirConnectorTypeIDDotServicenowMinusSir
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_slack
type ConnectorResponsePropertiesSlack struct {
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesSlack) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesSlack) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesSlack) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesSlack) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesSlack) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesSlack) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesSlack) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesSlack) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesSlack) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesSlack) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesSlackConnectorTypeID string

const (
	ConnectorResponsePropertiesSlackConnectorTypeIDDotSlack ConnectorResponsePropertiesSlackConnectorTypeID = ".slack"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesSlackConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesSlackConnectorTypeIDDotSlack:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesSlackConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesSlackConnectorTypeID(data) {
	case ConnectorResponsePropertiesSlackConnectorTypeIDDotSlack:
		*s = ConnectorResponsePropertiesSlackConnectorTypeIDDotSlack
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_swimlane
type ConnectorResponsePropertiesSwimlane struct {
	Config ConfigPropertiesSwimlane `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesSwimlane) GetConfig() ConfigPropertiesSwimlane {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesSwimlane) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesSwimlane) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesSwimlane) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesSwimlane) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesSwimlane) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesSwimlane) SetConfig(val ConfigPropertiesSwimlane) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesSwimlane) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesSwimlane) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesSwimlane) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesSwimlane) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesSwimlane) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesSwimlaneConnectorTypeID string

const (
	ConnectorResponsePropertiesSwimlaneConnectorTypeIDDotSwimlane ConnectorResponsePropertiesSwimlaneConnectorTypeID = ".swimlane"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesSwimlaneConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesSwimlaneConnectorTypeIDDotSwimlane:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesSwimlaneConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesSwimlaneConnectorTypeID(data) {
	case ConnectorResponsePropertiesSwimlaneConnectorTypeIDDotSwimlane:
		*s = ConnectorResponsePropertiesSwimlaneConnectorTypeIDDotSwimlane
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_teams
type ConnectorResponsePropertiesTeams struct {
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesTeams) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesTeams) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesTeams) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesTeams) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesTeams) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesTeams) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesTeams) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesTeams) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesTeams) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesTeams) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesTeamsConnectorTypeID string

const (
	ConnectorResponsePropertiesTeamsConnectorTypeIDDotTeams ConnectorResponsePropertiesTeamsConnectorTypeID = ".teams"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesTeamsConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesTeamsConnectorTypeIDDotTeams:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesTeamsConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesTeamsConnectorTypeID(data) {
	case ConnectorResponsePropertiesTeamsConnectorTypeIDDotTeams:
		*s = ConnectorResponsePropertiesTeamsConnectorTypeIDDotTeams
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_tines
type ConnectorResponsePropertiesTines struct {
	Config ConfigPropertiesTines `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesTines) GetConfig() ConfigPropertiesTines {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesTines) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesTines) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesTines) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesTines) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesTines) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesTines) SetConfig(val ConfigPropertiesTines) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesTines) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesTines) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesTines) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesTines) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesTines) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesTinesConnectorTypeID string

const (
	ConnectorResponsePropertiesTinesConnectorTypeIDDotTines ConnectorResponsePropertiesTinesConnectorTypeID = ".tines"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesTinesConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesTinesConnectorTypeIDDotTines:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesTinesConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesTinesConnectorTypeID(data) {
	case ConnectorResponsePropertiesTinesConnectorTypeIDDotTines:
		*s = ConnectorResponsePropertiesTinesConnectorTypeIDDotTines
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_webhook
type ConnectorResponsePropertiesWebhook struct {
	Config ConfigPropertiesWebhook `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesWebhook) GetConfig() ConfigPropertiesWebhook {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesWebhook) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesWebhook) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesWebhook) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesWebhook) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesWebhook) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesWebhook) SetConfig(val ConfigPropertiesWebhook) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesWebhook) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesWebhook) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesWebhook) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesWebhook) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesWebhook) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesWebhookConnectorTypeID string

const (
	ConnectorResponsePropertiesWebhookConnectorTypeIDDotWebhook ConnectorResponsePropertiesWebhookConnectorTypeID = ".webhook"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesWebhookConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesWebhookConnectorTypeIDDotWebhook:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesWebhookConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesWebhookConnectorTypeID(data) {
	case ConnectorResponsePropertiesWebhookConnectorTypeIDDotWebhook:
		*s = ConnectorResponsePropertiesWebhookConnectorTypeIDDotWebhook
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/connector_response_properties_xmatters
type ConnectorResponsePropertiesXmatters struct {
	Config ConfigPropertiesXmatters `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *ConnectorResponsePropertiesXmatters) GetConfig() ConfigPropertiesXmatters {
	return s.Config
}

// GetID returns the value of ID.
func (s *ConnectorResponsePropertiesXmatters) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *ConnectorResponsePropertiesXmatters) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesXmatters) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesXmatters) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *ConnectorResponsePropertiesXmatters) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *ConnectorResponsePropertiesXmatters) SetConfig(val ConfigPropertiesXmatters) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *ConnectorResponsePropertiesXmatters) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *ConnectorResponsePropertiesXmatters) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *ConnectorResponsePropertiesXmatters) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *ConnectorResponsePropertiesXmatters) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *ConnectorResponsePropertiesXmatters) SetName(val string) {
	s.Name = val
}

// The type of connector.
type ConnectorResponsePropertiesXmattersConnectorTypeID string

const (
	ConnectorResponsePropertiesXmattersConnectorTypeIDDotXmatters ConnectorResponsePropertiesXmattersConnectorTypeID = ".xmatters"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorResponsePropertiesXmattersConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorResponsePropertiesXmattersConnectorTypeIDDotXmatters:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorResponsePropertiesXmattersConnectorTypeID) UnmarshalText(data []byte) error {
	switch ConnectorResponsePropertiesXmattersConnectorTypeID(data) {
	case ConnectorResponsePropertiesXmattersConnectorTypeIDDotXmatters:
		*s = ConnectorResponsePropertiesXmattersConnectorTypeIDDotXmatters
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of connector. For example, `.email`, `.index`, `.jira`, `.opsgenie`, or `.server-log`.
// Ref: #/components/schemas/connector_types
type ConnectorTypes string

const (
	ConnectorTypesDotCasesMinusWebhook   ConnectorTypes = ".cases-webhook"
	ConnectorTypesDotEmail               ConnectorTypes = ".email"
	ConnectorTypesDotIndex               ConnectorTypes = ".index"
	ConnectorTypesDotJira                ConnectorTypes = ".jira"
	ConnectorTypesDotOpsgenie            ConnectorTypes = ".opsgenie"
	ConnectorTypesDotPagerduty           ConnectorTypes = ".pagerduty"
	ConnectorTypesDotResilient           ConnectorTypes = ".resilient"
	ConnectorTypesDotServicenow          ConnectorTypes = ".servicenow"
	ConnectorTypesDotServicenowMinusItom ConnectorTypes = ".servicenow-itom"
	ConnectorTypesDotServicenowMinusSir  ConnectorTypes = ".servicenow-sir"
	ConnectorTypesDotServerMinusLog      ConnectorTypes = ".server-log"
	ConnectorTypesDotSlack               ConnectorTypes = ".slack"
	ConnectorTypesDotSwimlane            ConnectorTypes = ".swimlane"
	ConnectorTypesDotTeams               ConnectorTypes = ".teams"
	ConnectorTypesDotTines               ConnectorTypes = ".tines"
	ConnectorTypesDotWebhook             ConnectorTypes = ".webhook"
	ConnectorTypesDotXmatters            ConnectorTypes = ".xmatters"
)

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorTypes) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorTypesDotCasesMinusWebhook:
		return []byte(s), nil
	case ConnectorTypesDotEmail:
		return []byte(s), nil
	case ConnectorTypesDotIndex:
		return []byte(s), nil
	case ConnectorTypesDotJira:
		return []byte(s), nil
	case ConnectorTypesDotOpsgenie:
		return []byte(s), nil
	case ConnectorTypesDotPagerduty:
		return []byte(s), nil
	case ConnectorTypesDotResilient:
		return []byte(s), nil
	case ConnectorTypesDotServicenow:
		return []byte(s), nil
	case ConnectorTypesDotServicenowMinusItom:
		return []byte(s), nil
	case ConnectorTypesDotServicenowMinusSir:
		return []byte(s), nil
	case ConnectorTypesDotServerMinusLog:
		return []byte(s), nil
	case ConnectorTypesDotSlack:
		return []byte(s), nil
	case ConnectorTypesDotSwimlane:
		return []byte(s), nil
	case ConnectorTypesDotTeams:
		return []byte(s), nil
	case ConnectorTypesDotTines:
		return []byte(s), nil
	case ConnectorTypesDotWebhook:
		return []byte(s), nil
	case ConnectorTypesDotXmatters:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorTypes) UnmarshalText(data []byte) error {
	switch ConnectorTypes(data) {
	case ConnectorTypesDotCasesMinusWebhook:
		*s = ConnectorTypesDotCasesMinusWebhook
		return nil
	case ConnectorTypesDotEmail:
		*s = ConnectorTypesDotEmail
		return nil
	case ConnectorTypesDotIndex:
		*s = ConnectorTypesDotIndex
		return nil
	case ConnectorTypesDotJira:
		*s = ConnectorTypesDotJira
		return nil
	case ConnectorTypesDotOpsgenie:
		*s = ConnectorTypesDotOpsgenie
		return nil
	case ConnectorTypesDotPagerduty:
		*s = ConnectorTypesDotPagerduty
		return nil
	case ConnectorTypesDotResilient:
		*s = ConnectorTypesDotResilient
		return nil
	case ConnectorTypesDotServicenow:
		*s = ConnectorTypesDotServicenow
		return nil
	case ConnectorTypesDotServicenowMinusItom:
		*s = ConnectorTypesDotServicenowMinusItom
		return nil
	case ConnectorTypesDotServicenowMinusSir:
		*s = ConnectorTypesDotServicenowMinusSir
		return nil
	case ConnectorTypesDotServerMinusLog:
		*s = ConnectorTypesDotServerMinusLog
		return nil
	case ConnectorTypesDotSlack:
		*s = ConnectorTypesDotSlack
		return nil
	case ConnectorTypesDotSwimlane:
		*s = ConnectorTypesDotSwimlane
		return nil
	case ConnectorTypesDotTeams:
		*s = ConnectorTypesDotTeams
		return nil
	case ConnectorTypesDotTines:
		*s = ConnectorTypesDotTines
		return nil
	case ConnectorTypesDotWebhook:
		*s = ConnectorTypesDotWebhook
		return nil
	case ConnectorTypesDotXmatters:
		*s = ConnectorTypesDotXmatters
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The properties vary depending on the connector type.
// CreateConnectorReq represents sum type.
type CreateConnectorReq struct {
	Type                                 CreateConnectorReqType // switch on this field
	CreateConnectorRequestCasesWebhook   CreateConnectorRequestCasesWebhook
	CreateConnectorRequestEmail          CreateConnectorRequestEmail
	CreateConnectorRequestIndex          CreateConnectorRequestIndex
	CreateConnectorRequestJira           CreateConnectorRequestJira
	CreateConnectorRequestOpsgenie       CreateConnectorRequestOpsgenie
	CreateConnectorRequestPagerduty      CreateConnectorRequestPagerduty
	CreateConnectorRequestResilient      CreateConnectorRequestResilient
	CreateConnectorRequestServerlog      CreateConnectorRequestServerlog
	CreateConnectorRequestServicenow     CreateConnectorRequestServicenow
	CreateConnectorRequestServicenowItom CreateConnectorRequestServicenowItom
	CreateConnectorRequestServicenowSir  CreateConnectorRequestServicenowSir
	CreateConnectorRequestSlack          CreateConnectorRequestSlack
	CreateConnectorRequestSwimlane       CreateConnectorRequestSwimlane
	CreateConnectorRequestTeams          CreateConnectorRequestTeams
	CreateConnectorRequestTines          CreateConnectorRequestTines
	CreateConnectorRequestWebhook        CreateConnectorRequestWebhook
	CreateConnectorRequestXmatters       CreateConnectorRequestXmatters
}

// CreateConnectorReqType is oneOf type of CreateConnectorReq.
type CreateConnectorReqType string

// Possible values for CreateConnectorReqType.
const (
	CreateConnectorRequestCasesWebhookCreateConnectorReq   CreateConnectorReqType = "CreateConnectorRequestCasesWebhook"
	CreateConnectorRequestEmailCreateConnectorReq          CreateConnectorReqType = "CreateConnectorRequestEmail"
	CreateConnectorRequestIndexCreateConnectorReq          CreateConnectorReqType = "CreateConnectorRequestIndex"
	CreateConnectorRequestJiraCreateConnectorReq           CreateConnectorReqType = "CreateConnectorRequestJira"
	CreateConnectorRequestOpsgenieCreateConnectorReq       CreateConnectorReqType = "CreateConnectorRequestOpsgenie"
	CreateConnectorRequestPagerdutyCreateConnectorReq      CreateConnectorReqType = "CreateConnectorRequestPagerduty"
	CreateConnectorRequestResilientCreateConnectorReq      CreateConnectorReqType = "CreateConnectorRequestResilient"
	CreateConnectorRequestServerlogCreateConnectorReq      CreateConnectorReqType = "CreateConnectorRequestServerlog"
	CreateConnectorRequestServicenowCreateConnectorReq     CreateConnectorReqType = "CreateConnectorRequestServicenow"
	CreateConnectorRequestServicenowItomCreateConnectorReq CreateConnectorReqType = "CreateConnectorRequestServicenowItom"
	CreateConnectorRequestServicenowSirCreateConnectorReq  CreateConnectorReqType = "CreateConnectorRequestServicenowSir"
	CreateConnectorRequestSlackCreateConnectorReq          CreateConnectorReqType = "CreateConnectorRequestSlack"
	CreateConnectorRequestSwimlaneCreateConnectorReq       CreateConnectorReqType = "CreateConnectorRequestSwimlane"
	CreateConnectorRequestTeamsCreateConnectorReq          CreateConnectorReqType = "CreateConnectorRequestTeams"
	CreateConnectorRequestTinesCreateConnectorReq          CreateConnectorReqType = "CreateConnectorRequestTines"
	CreateConnectorRequestWebhookCreateConnectorReq        CreateConnectorReqType = "CreateConnectorRequestWebhook"
	CreateConnectorRequestXmattersCreateConnectorReq       CreateConnectorReqType = "CreateConnectorRequestXmatters"
)

// IsCreateConnectorRequestCasesWebhook reports whether CreateConnectorReq is CreateConnectorRequestCasesWebhook.
func (s CreateConnectorReq) IsCreateConnectorRequestCasesWebhook() bool {
	return s.Type == CreateConnectorRequestCasesWebhookCreateConnectorReq
}

// IsCreateConnectorRequestEmail reports whether CreateConnectorReq is CreateConnectorRequestEmail.
func (s CreateConnectorReq) IsCreateConnectorRequestEmail() bool {
	return s.Type == CreateConnectorRequestEmailCreateConnectorReq
}

// IsCreateConnectorRequestIndex reports whether CreateConnectorReq is CreateConnectorRequestIndex.
func (s CreateConnectorReq) IsCreateConnectorRequestIndex() bool {
	return s.Type == CreateConnectorRequestIndexCreateConnectorReq
}

// IsCreateConnectorRequestJira reports whether CreateConnectorReq is CreateConnectorRequestJira.
func (s CreateConnectorReq) IsCreateConnectorRequestJira() bool {
	return s.Type == CreateConnectorRequestJiraCreateConnectorReq
}

// IsCreateConnectorRequestOpsgenie reports whether CreateConnectorReq is CreateConnectorRequestOpsgenie.
func (s CreateConnectorReq) IsCreateConnectorRequestOpsgenie() bool {
	return s.Type == CreateConnectorRequestOpsgenieCreateConnectorReq
}

// IsCreateConnectorRequestPagerduty reports whether CreateConnectorReq is CreateConnectorRequestPagerduty.
func (s CreateConnectorReq) IsCreateConnectorRequestPagerduty() bool {
	return s.Type == CreateConnectorRequestPagerdutyCreateConnectorReq
}

// IsCreateConnectorRequestResilient reports whether CreateConnectorReq is CreateConnectorRequestResilient.
func (s CreateConnectorReq) IsCreateConnectorRequestResilient() bool {
	return s.Type == CreateConnectorRequestResilientCreateConnectorReq
}

// IsCreateConnectorRequestServerlog reports whether CreateConnectorReq is CreateConnectorRequestServerlog.
func (s CreateConnectorReq) IsCreateConnectorRequestServerlog() bool {
	return s.Type == CreateConnectorRequestServerlogCreateConnectorReq
}

// IsCreateConnectorRequestServicenow reports whether CreateConnectorReq is CreateConnectorRequestServicenow.
func (s CreateConnectorReq) IsCreateConnectorRequestServicenow() bool {
	return s.Type == CreateConnectorRequestServicenowCreateConnectorReq
}

// IsCreateConnectorRequestServicenowItom reports whether CreateConnectorReq is CreateConnectorRequestServicenowItom.
func (s CreateConnectorReq) IsCreateConnectorRequestServicenowItom() bool {
	return s.Type == CreateConnectorRequestServicenowItomCreateConnectorReq
}

// IsCreateConnectorRequestServicenowSir reports whether CreateConnectorReq is CreateConnectorRequestServicenowSir.
func (s CreateConnectorReq) IsCreateConnectorRequestServicenowSir() bool {
	return s.Type == CreateConnectorRequestServicenowSirCreateConnectorReq
}

// IsCreateConnectorRequestSlack reports whether CreateConnectorReq is CreateConnectorRequestSlack.
func (s CreateConnectorReq) IsCreateConnectorRequestSlack() bool {
	return s.Type == CreateConnectorRequestSlackCreateConnectorReq
}

// IsCreateConnectorRequestSwimlane reports whether CreateConnectorReq is CreateConnectorRequestSwimlane.
func (s CreateConnectorReq) IsCreateConnectorRequestSwimlane() bool {
	return s.Type == CreateConnectorRequestSwimlaneCreateConnectorReq
}

// IsCreateConnectorRequestTeams reports whether CreateConnectorReq is CreateConnectorRequestTeams.
func (s CreateConnectorReq) IsCreateConnectorRequestTeams() bool {
	return s.Type == CreateConnectorRequestTeamsCreateConnectorReq
}

// IsCreateConnectorRequestTines reports whether CreateConnectorReq is CreateConnectorRequestTines.
func (s CreateConnectorReq) IsCreateConnectorRequestTines() bool {
	return s.Type == CreateConnectorRequestTinesCreateConnectorReq
}

// IsCreateConnectorRequestWebhook reports whether CreateConnectorReq is CreateConnectorRequestWebhook.
func (s CreateConnectorReq) IsCreateConnectorRequestWebhook() bool {
	return s.Type == CreateConnectorRequestWebhookCreateConnectorReq
}

// IsCreateConnectorRequestXmatters reports whether CreateConnectorReq is CreateConnectorRequestXmatters.
func (s CreateConnectorReq) IsCreateConnectorRequestXmatters() bool {
	return s.Type == CreateConnectorRequestXmattersCreateConnectorReq
}

// SetCreateConnectorRequestCasesWebhook sets CreateConnectorReq to CreateConnectorRequestCasesWebhook.
func (s *CreateConnectorReq) SetCreateConnectorRequestCasesWebhook(v CreateConnectorRequestCasesWebhook) {
	s.Type = CreateConnectorRequestCasesWebhookCreateConnectorReq
	s.CreateConnectorRequestCasesWebhook = v
}

// GetCreateConnectorRequestCasesWebhook returns CreateConnectorRequestCasesWebhook and true boolean if CreateConnectorReq is CreateConnectorRequestCasesWebhook.
func (s CreateConnectorReq) GetCreateConnectorRequestCasesWebhook() (v CreateConnectorRequestCasesWebhook, ok bool) {
	if !s.IsCreateConnectorRequestCasesWebhook() {
		return v, false
	}
	return s.CreateConnectorRequestCasesWebhook, true
}

// NewCreateConnectorRequestCasesWebhookCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestCasesWebhook.
func NewCreateConnectorRequestCasesWebhookCreateConnectorReq(v CreateConnectorRequestCasesWebhook) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestCasesWebhook(v)
	return s
}

// SetCreateConnectorRequestEmail sets CreateConnectorReq to CreateConnectorRequestEmail.
func (s *CreateConnectorReq) SetCreateConnectorRequestEmail(v CreateConnectorRequestEmail) {
	s.Type = CreateConnectorRequestEmailCreateConnectorReq
	s.CreateConnectorRequestEmail = v
}

// GetCreateConnectorRequestEmail returns CreateConnectorRequestEmail and true boolean if CreateConnectorReq is CreateConnectorRequestEmail.
func (s CreateConnectorReq) GetCreateConnectorRequestEmail() (v CreateConnectorRequestEmail, ok bool) {
	if !s.IsCreateConnectorRequestEmail() {
		return v, false
	}
	return s.CreateConnectorRequestEmail, true
}

// NewCreateConnectorRequestEmailCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestEmail.
func NewCreateConnectorRequestEmailCreateConnectorReq(v CreateConnectorRequestEmail) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestEmail(v)
	return s
}

// SetCreateConnectorRequestIndex sets CreateConnectorReq to CreateConnectorRequestIndex.
func (s *CreateConnectorReq) SetCreateConnectorRequestIndex(v CreateConnectorRequestIndex) {
	s.Type = CreateConnectorRequestIndexCreateConnectorReq
	s.CreateConnectorRequestIndex = v
}

// GetCreateConnectorRequestIndex returns CreateConnectorRequestIndex and true boolean if CreateConnectorReq is CreateConnectorRequestIndex.
func (s CreateConnectorReq) GetCreateConnectorRequestIndex() (v CreateConnectorRequestIndex, ok bool) {
	if !s.IsCreateConnectorRequestIndex() {
		return v, false
	}
	return s.CreateConnectorRequestIndex, true
}

// NewCreateConnectorRequestIndexCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestIndex.
func NewCreateConnectorRequestIndexCreateConnectorReq(v CreateConnectorRequestIndex) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestIndex(v)
	return s
}

// SetCreateConnectorRequestJira sets CreateConnectorReq to CreateConnectorRequestJira.
func (s *CreateConnectorReq) SetCreateConnectorRequestJira(v CreateConnectorRequestJira) {
	s.Type = CreateConnectorRequestJiraCreateConnectorReq
	s.CreateConnectorRequestJira = v
}

// GetCreateConnectorRequestJira returns CreateConnectorRequestJira and true boolean if CreateConnectorReq is CreateConnectorRequestJira.
func (s CreateConnectorReq) GetCreateConnectorRequestJira() (v CreateConnectorRequestJira, ok bool) {
	if !s.IsCreateConnectorRequestJira() {
		return v, false
	}
	return s.CreateConnectorRequestJira, true
}

// NewCreateConnectorRequestJiraCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestJira.
func NewCreateConnectorRequestJiraCreateConnectorReq(v CreateConnectorRequestJira) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestJira(v)
	return s
}

// SetCreateConnectorRequestOpsgenie sets CreateConnectorReq to CreateConnectorRequestOpsgenie.
func (s *CreateConnectorReq) SetCreateConnectorRequestOpsgenie(v CreateConnectorRequestOpsgenie) {
	s.Type = CreateConnectorRequestOpsgenieCreateConnectorReq
	s.CreateConnectorRequestOpsgenie = v
}

// GetCreateConnectorRequestOpsgenie returns CreateConnectorRequestOpsgenie and true boolean if CreateConnectorReq is CreateConnectorRequestOpsgenie.
func (s CreateConnectorReq) GetCreateConnectorRequestOpsgenie() (v CreateConnectorRequestOpsgenie, ok bool) {
	if !s.IsCreateConnectorRequestOpsgenie() {
		return v, false
	}
	return s.CreateConnectorRequestOpsgenie, true
}

// NewCreateConnectorRequestOpsgenieCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestOpsgenie.
func NewCreateConnectorRequestOpsgenieCreateConnectorReq(v CreateConnectorRequestOpsgenie) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestOpsgenie(v)
	return s
}

// SetCreateConnectorRequestPagerduty sets CreateConnectorReq to CreateConnectorRequestPagerduty.
func (s *CreateConnectorReq) SetCreateConnectorRequestPagerduty(v CreateConnectorRequestPagerduty) {
	s.Type = CreateConnectorRequestPagerdutyCreateConnectorReq
	s.CreateConnectorRequestPagerduty = v
}

// GetCreateConnectorRequestPagerduty returns CreateConnectorRequestPagerduty and true boolean if CreateConnectorReq is CreateConnectorRequestPagerduty.
func (s CreateConnectorReq) GetCreateConnectorRequestPagerduty() (v CreateConnectorRequestPagerduty, ok bool) {
	if !s.IsCreateConnectorRequestPagerduty() {
		return v, false
	}
	return s.CreateConnectorRequestPagerduty, true
}

// NewCreateConnectorRequestPagerdutyCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestPagerduty.
func NewCreateConnectorRequestPagerdutyCreateConnectorReq(v CreateConnectorRequestPagerduty) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestPagerduty(v)
	return s
}

// SetCreateConnectorRequestResilient sets CreateConnectorReq to CreateConnectorRequestResilient.
func (s *CreateConnectorReq) SetCreateConnectorRequestResilient(v CreateConnectorRequestResilient) {
	s.Type = CreateConnectorRequestResilientCreateConnectorReq
	s.CreateConnectorRequestResilient = v
}

// GetCreateConnectorRequestResilient returns CreateConnectorRequestResilient and true boolean if CreateConnectorReq is CreateConnectorRequestResilient.
func (s CreateConnectorReq) GetCreateConnectorRequestResilient() (v CreateConnectorRequestResilient, ok bool) {
	if !s.IsCreateConnectorRequestResilient() {
		return v, false
	}
	return s.CreateConnectorRequestResilient, true
}

// NewCreateConnectorRequestResilientCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestResilient.
func NewCreateConnectorRequestResilientCreateConnectorReq(v CreateConnectorRequestResilient) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestResilient(v)
	return s
}

// SetCreateConnectorRequestServerlog sets CreateConnectorReq to CreateConnectorRequestServerlog.
func (s *CreateConnectorReq) SetCreateConnectorRequestServerlog(v CreateConnectorRequestServerlog) {
	s.Type = CreateConnectorRequestServerlogCreateConnectorReq
	s.CreateConnectorRequestServerlog = v
}

// GetCreateConnectorRequestServerlog returns CreateConnectorRequestServerlog and true boolean if CreateConnectorReq is CreateConnectorRequestServerlog.
func (s CreateConnectorReq) GetCreateConnectorRequestServerlog() (v CreateConnectorRequestServerlog, ok bool) {
	if !s.IsCreateConnectorRequestServerlog() {
		return v, false
	}
	return s.CreateConnectorRequestServerlog, true
}

// NewCreateConnectorRequestServerlogCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestServerlog.
func NewCreateConnectorRequestServerlogCreateConnectorReq(v CreateConnectorRequestServerlog) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestServerlog(v)
	return s
}

// SetCreateConnectorRequestServicenow sets CreateConnectorReq to CreateConnectorRequestServicenow.
func (s *CreateConnectorReq) SetCreateConnectorRequestServicenow(v CreateConnectorRequestServicenow) {
	s.Type = CreateConnectorRequestServicenowCreateConnectorReq
	s.CreateConnectorRequestServicenow = v
}

// GetCreateConnectorRequestServicenow returns CreateConnectorRequestServicenow and true boolean if CreateConnectorReq is CreateConnectorRequestServicenow.
func (s CreateConnectorReq) GetCreateConnectorRequestServicenow() (v CreateConnectorRequestServicenow, ok bool) {
	if !s.IsCreateConnectorRequestServicenow() {
		return v, false
	}
	return s.CreateConnectorRequestServicenow, true
}

// NewCreateConnectorRequestServicenowCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestServicenow.
func NewCreateConnectorRequestServicenowCreateConnectorReq(v CreateConnectorRequestServicenow) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestServicenow(v)
	return s
}

// SetCreateConnectorRequestServicenowItom sets CreateConnectorReq to CreateConnectorRequestServicenowItom.
func (s *CreateConnectorReq) SetCreateConnectorRequestServicenowItom(v CreateConnectorRequestServicenowItom) {
	s.Type = CreateConnectorRequestServicenowItomCreateConnectorReq
	s.CreateConnectorRequestServicenowItom = v
}

// GetCreateConnectorRequestServicenowItom returns CreateConnectorRequestServicenowItom and true boolean if CreateConnectorReq is CreateConnectorRequestServicenowItom.
func (s CreateConnectorReq) GetCreateConnectorRequestServicenowItom() (v CreateConnectorRequestServicenowItom, ok bool) {
	if !s.IsCreateConnectorRequestServicenowItom() {
		return v, false
	}
	return s.CreateConnectorRequestServicenowItom, true
}

// NewCreateConnectorRequestServicenowItomCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestServicenowItom.
func NewCreateConnectorRequestServicenowItomCreateConnectorReq(v CreateConnectorRequestServicenowItom) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestServicenowItom(v)
	return s
}

// SetCreateConnectorRequestServicenowSir sets CreateConnectorReq to CreateConnectorRequestServicenowSir.
func (s *CreateConnectorReq) SetCreateConnectorRequestServicenowSir(v CreateConnectorRequestServicenowSir) {
	s.Type = CreateConnectorRequestServicenowSirCreateConnectorReq
	s.CreateConnectorRequestServicenowSir = v
}

// GetCreateConnectorRequestServicenowSir returns CreateConnectorRequestServicenowSir and true boolean if CreateConnectorReq is CreateConnectorRequestServicenowSir.
func (s CreateConnectorReq) GetCreateConnectorRequestServicenowSir() (v CreateConnectorRequestServicenowSir, ok bool) {
	if !s.IsCreateConnectorRequestServicenowSir() {
		return v, false
	}
	return s.CreateConnectorRequestServicenowSir, true
}

// NewCreateConnectorRequestServicenowSirCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestServicenowSir.
func NewCreateConnectorRequestServicenowSirCreateConnectorReq(v CreateConnectorRequestServicenowSir) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestServicenowSir(v)
	return s
}

// SetCreateConnectorRequestSlack sets CreateConnectorReq to CreateConnectorRequestSlack.
func (s *CreateConnectorReq) SetCreateConnectorRequestSlack(v CreateConnectorRequestSlack) {
	s.Type = CreateConnectorRequestSlackCreateConnectorReq
	s.CreateConnectorRequestSlack = v
}

// GetCreateConnectorRequestSlack returns CreateConnectorRequestSlack and true boolean if CreateConnectorReq is CreateConnectorRequestSlack.
func (s CreateConnectorReq) GetCreateConnectorRequestSlack() (v CreateConnectorRequestSlack, ok bool) {
	if !s.IsCreateConnectorRequestSlack() {
		return v, false
	}
	return s.CreateConnectorRequestSlack, true
}

// NewCreateConnectorRequestSlackCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestSlack.
func NewCreateConnectorRequestSlackCreateConnectorReq(v CreateConnectorRequestSlack) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestSlack(v)
	return s
}

// SetCreateConnectorRequestSwimlane sets CreateConnectorReq to CreateConnectorRequestSwimlane.
func (s *CreateConnectorReq) SetCreateConnectorRequestSwimlane(v CreateConnectorRequestSwimlane) {
	s.Type = CreateConnectorRequestSwimlaneCreateConnectorReq
	s.CreateConnectorRequestSwimlane = v
}

// GetCreateConnectorRequestSwimlane returns CreateConnectorRequestSwimlane and true boolean if CreateConnectorReq is CreateConnectorRequestSwimlane.
func (s CreateConnectorReq) GetCreateConnectorRequestSwimlane() (v CreateConnectorRequestSwimlane, ok bool) {
	if !s.IsCreateConnectorRequestSwimlane() {
		return v, false
	}
	return s.CreateConnectorRequestSwimlane, true
}

// NewCreateConnectorRequestSwimlaneCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestSwimlane.
func NewCreateConnectorRequestSwimlaneCreateConnectorReq(v CreateConnectorRequestSwimlane) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestSwimlane(v)
	return s
}

// SetCreateConnectorRequestTeams sets CreateConnectorReq to CreateConnectorRequestTeams.
func (s *CreateConnectorReq) SetCreateConnectorRequestTeams(v CreateConnectorRequestTeams) {
	s.Type = CreateConnectorRequestTeamsCreateConnectorReq
	s.CreateConnectorRequestTeams = v
}

// GetCreateConnectorRequestTeams returns CreateConnectorRequestTeams and true boolean if CreateConnectorReq is CreateConnectorRequestTeams.
func (s CreateConnectorReq) GetCreateConnectorRequestTeams() (v CreateConnectorRequestTeams, ok bool) {
	if !s.IsCreateConnectorRequestTeams() {
		return v, false
	}
	return s.CreateConnectorRequestTeams, true
}

// NewCreateConnectorRequestTeamsCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestTeams.
func NewCreateConnectorRequestTeamsCreateConnectorReq(v CreateConnectorRequestTeams) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestTeams(v)
	return s
}

// SetCreateConnectorRequestTines sets CreateConnectorReq to CreateConnectorRequestTines.
func (s *CreateConnectorReq) SetCreateConnectorRequestTines(v CreateConnectorRequestTines) {
	s.Type = CreateConnectorRequestTinesCreateConnectorReq
	s.CreateConnectorRequestTines = v
}

// GetCreateConnectorRequestTines returns CreateConnectorRequestTines and true boolean if CreateConnectorReq is CreateConnectorRequestTines.
func (s CreateConnectorReq) GetCreateConnectorRequestTines() (v CreateConnectorRequestTines, ok bool) {
	if !s.IsCreateConnectorRequestTines() {
		return v, false
	}
	return s.CreateConnectorRequestTines, true
}

// NewCreateConnectorRequestTinesCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestTines.
func NewCreateConnectorRequestTinesCreateConnectorReq(v CreateConnectorRequestTines) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestTines(v)
	return s
}

// SetCreateConnectorRequestWebhook sets CreateConnectorReq to CreateConnectorRequestWebhook.
func (s *CreateConnectorReq) SetCreateConnectorRequestWebhook(v CreateConnectorRequestWebhook) {
	s.Type = CreateConnectorRequestWebhookCreateConnectorReq
	s.CreateConnectorRequestWebhook = v
}

// GetCreateConnectorRequestWebhook returns CreateConnectorRequestWebhook and true boolean if CreateConnectorReq is CreateConnectorRequestWebhook.
func (s CreateConnectorReq) GetCreateConnectorRequestWebhook() (v CreateConnectorRequestWebhook, ok bool) {
	if !s.IsCreateConnectorRequestWebhook() {
		return v, false
	}
	return s.CreateConnectorRequestWebhook, true
}

// NewCreateConnectorRequestWebhookCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestWebhook.
func NewCreateConnectorRequestWebhookCreateConnectorReq(v CreateConnectorRequestWebhook) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestWebhook(v)
	return s
}

// SetCreateConnectorRequestXmatters sets CreateConnectorReq to CreateConnectorRequestXmatters.
func (s *CreateConnectorReq) SetCreateConnectorRequestXmatters(v CreateConnectorRequestXmatters) {
	s.Type = CreateConnectorRequestXmattersCreateConnectorReq
	s.CreateConnectorRequestXmatters = v
}

// GetCreateConnectorRequestXmatters returns CreateConnectorRequestXmatters and true boolean if CreateConnectorReq is CreateConnectorRequestXmatters.
func (s CreateConnectorReq) GetCreateConnectorRequestXmatters() (v CreateConnectorRequestXmatters, ok bool) {
	if !s.IsCreateConnectorRequestXmatters() {
		return v, false
	}
	return s.CreateConnectorRequestXmatters, true
}

// NewCreateConnectorRequestXmattersCreateConnectorReq returns new CreateConnectorReq from CreateConnectorRequestXmatters.
func NewCreateConnectorRequestXmattersCreateConnectorReq(v CreateConnectorRequestXmatters) CreateConnectorReq {
	var s CreateConnectorReq
	s.SetCreateConnectorRequestXmatters(v)
	return s
}

// The Webhook - Case Management connector uses axios to send POST, PUT, and GET requests to a case
// management RESTful API web service.
// Ref: #/components/schemas/create_connector_request_cases_webhook
type CreateConnectorRequestCasesWebhook struct {
	Config ConfigPropertiesCasesWebhook `json:"config"`
	// The display name for the connector.
	Name    string                           `json:"name"`
	Secrets OptSecretsPropertiesCasesWebhook `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestCasesWebhook) GetConfig() ConfigPropertiesCasesWebhook {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestCasesWebhook) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestCasesWebhook) GetSecrets() OptSecretsPropertiesCasesWebhook {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestCasesWebhook) SetConfig(val ConfigPropertiesCasesWebhook) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestCasesWebhook) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestCasesWebhook) SetSecrets(val OptSecretsPropertiesCasesWebhook) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestCasesWebhookConnectorTypeID string

const (
	CreateConnectorRequestCasesWebhookConnectorTypeIDDotCasesMinusWebhook CreateConnectorRequestCasesWebhookConnectorTypeID = ".cases-webhook"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestCasesWebhookConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestCasesWebhookConnectorTypeIDDotCasesMinusWebhook:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestCasesWebhookConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestCasesWebhookConnectorTypeID(data) {
	case CreateConnectorRequestCasesWebhookConnectorTypeIDDotCasesMinusWebhook:
		*s = CreateConnectorRequestCasesWebhookConnectorTypeIDDotCasesMinusWebhook
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The email connector uses the SMTP protocol to send mail messages, using an integration of
// Nodemailer. An exception is Microsoft Exchange, which uses HTTP protocol for sending emails, Send
// mail. Email message text is sent as both plain text and html text.
// Ref: #/components/schemas/create_connector_request_email
type CreateConnectorRequestEmail struct {
	Config ConfigPropertiesEmail `json:"config"`
	// The display name for the connector.
	Name    string                 `json:"name"`
	Secrets SecretsPropertiesEmail `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestEmail) GetConfig() ConfigPropertiesEmail {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestEmail) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestEmail) GetSecrets() SecretsPropertiesEmail {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestEmail) SetConfig(val ConfigPropertiesEmail) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestEmail) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestEmail) SetSecrets(val SecretsPropertiesEmail) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestEmailConnectorTypeID string

const (
	CreateConnectorRequestEmailConnectorTypeIDDotEmail CreateConnectorRequestEmailConnectorTypeID = ".email"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestEmailConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestEmailConnectorTypeIDDotEmail:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestEmailConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestEmailConnectorTypeID(data) {
	case CreateConnectorRequestEmailConnectorTypeIDDotEmail:
		*s = CreateConnectorRequestEmailConnectorTypeIDDotEmail
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The index connector indexes a document into Elasticsearch.
// Ref: #/components/schemas/create_connector_request_index
type CreateConnectorRequestIndex struct {
	Config ConfigPropertiesIndex `json:"config"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestIndex) GetConfig() ConfigPropertiesIndex {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestIndex) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestIndex) SetConfig(val ConfigPropertiesIndex) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestIndex) SetName(val string) {
	s.Name = val
}

// The type of connector.
type CreateConnectorRequestIndexConnectorTypeID string

const (
	CreateConnectorRequestIndexConnectorTypeIDDotIndex CreateConnectorRequestIndexConnectorTypeID = ".index"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestIndexConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestIndexConnectorTypeIDDotIndex:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestIndexConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestIndexConnectorTypeID(data) {
	case CreateConnectorRequestIndexConnectorTypeIDDotIndex:
		*s = CreateConnectorRequestIndexConnectorTypeIDDotIndex
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The Jira connector uses the REST API v2 to create Jira issues.
// Ref: #/components/schemas/create_connector_request_jira
type CreateConnectorRequestJira struct {
	Config ConfigPropertiesJira `json:"config"`
	// The display name for the connector.
	Name    string                `json:"name"`
	Secrets SecretsPropertiesJira `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestJira) GetConfig() ConfigPropertiesJira {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestJira) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestJira) GetSecrets() SecretsPropertiesJira {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestJira) SetConfig(val ConfigPropertiesJira) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestJira) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestJira) SetSecrets(val SecretsPropertiesJira) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestJiraConnectorTypeID string

const (
	CreateConnectorRequestJiraConnectorTypeIDDotJira CreateConnectorRequestJiraConnectorTypeID = ".jira"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestJiraConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestJiraConnectorTypeIDDotJira:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestJiraConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestJiraConnectorTypeID(data) {
	case CreateConnectorRequestJiraConnectorTypeIDDotJira:
		*s = CreateConnectorRequestJiraConnectorTypeIDDotJira
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The Opsgenie connector uses the Opsgenie alert API.
// Ref: #/components/schemas/create_connector_request_opsgenie
type CreateConnectorRequestOpsgenie struct {
	Config ConfigPropertiesOpsgenie `json:"config"`
	// The display name for the connector.
	Name    string                    `json:"name"`
	Secrets SecretsPropertiesOpsgenie `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestOpsgenie) GetConfig() ConfigPropertiesOpsgenie {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestOpsgenie) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestOpsgenie) GetSecrets() SecretsPropertiesOpsgenie {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestOpsgenie) SetConfig(val ConfigPropertiesOpsgenie) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestOpsgenie) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestOpsgenie) SetSecrets(val SecretsPropertiesOpsgenie) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestOpsgenieConnectorTypeID string

const (
	CreateConnectorRequestOpsgenieConnectorTypeIDDotOpsgenie CreateConnectorRequestOpsgenieConnectorTypeID = ".opsgenie"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestOpsgenieConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestOpsgenieConnectorTypeIDDotOpsgenie:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestOpsgenieConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestOpsgenieConnectorTypeID(data) {
	case CreateConnectorRequestOpsgenieConnectorTypeIDDotOpsgenie:
		*s = CreateConnectorRequestOpsgenieConnectorTypeIDDotOpsgenie
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The PagerDuty connector uses the v2 Events API to trigger, acknowledge, and resolve PagerDuty
// alerts.
// Ref: #/components/schemas/create_connector_request_pagerduty
type CreateConnectorRequestPagerduty struct {
	Config ConfigPropertiesPagerduty `json:"config"`
	// The display name for the connector.
	Name    string                     `json:"name"`
	Secrets SecretsPropertiesPagerduty `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestPagerduty) GetConfig() ConfigPropertiesPagerduty {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestPagerduty) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestPagerduty) GetSecrets() SecretsPropertiesPagerduty {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestPagerduty) SetConfig(val ConfigPropertiesPagerduty) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestPagerduty) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestPagerduty) SetSecrets(val SecretsPropertiesPagerduty) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestPagerdutyConnectorTypeID string

const (
	CreateConnectorRequestPagerdutyConnectorTypeIDDotPagerduty CreateConnectorRequestPagerdutyConnectorTypeID = ".pagerduty"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestPagerdutyConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestPagerdutyConnectorTypeIDDotPagerduty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestPagerdutyConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestPagerdutyConnectorTypeID(data) {
	case CreateConnectorRequestPagerdutyConnectorTypeIDDotPagerduty:
		*s = CreateConnectorRequestPagerdutyConnectorTypeIDDotPagerduty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The IBM Resilient connector uses the RESILIENT REST v2 to create IBM Resilient incidents.
// Ref: #/components/schemas/create_connector_request_resilient
type CreateConnectorRequestResilient struct {
	Config ConfigPropertiesResilient `json:"config"`
	// The display name for the connector.
	Name    string                     `json:"name"`
	Secrets SecretsPropertiesResilient `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestResilient) GetConfig() ConfigPropertiesResilient {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestResilient) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestResilient) GetSecrets() SecretsPropertiesResilient {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestResilient) SetConfig(val ConfigPropertiesResilient) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestResilient) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestResilient) SetSecrets(val SecretsPropertiesResilient) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestResilientConnectorTypeID string

const (
	CreateConnectorRequestResilientConnectorTypeIDDotResilient CreateConnectorRequestResilientConnectorTypeID = ".resilient"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestResilientConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestResilientConnectorTypeIDDotResilient:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestResilientConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestResilientConnectorTypeID(data) {
	case CreateConnectorRequestResilientConnectorTypeIDDotResilient:
		*s = CreateConnectorRequestResilientConnectorTypeIDDotResilient
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This connector writes an entry to the Kibana server log.
// Ref: #/components/schemas/create_connector_request_serverlog
type CreateConnectorRequestServerlog struct {
	// The display name for the connector.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestServerlog) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestServerlog) SetName(val string) {
	s.Name = val
}

// The type of connector.
type CreateConnectorRequestServerlogConnectorTypeID string

const (
	CreateConnectorRequestServerlogConnectorTypeIDDotServerMinusLog CreateConnectorRequestServerlogConnectorTypeID = ".server-log"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestServerlogConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestServerlogConnectorTypeIDDotServerMinusLog:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestServerlogConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestServerlogConnectorTypeID(data) {
	case CreateConnectorRequestServerlogConnectorTypeIDDotServerMinusLog:
		*s = CreateConnectorRequestServerlogConnectorTypeIDDotServerMinusLog
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The ServiceNow ITSM connector uses the import set API to create ServiceNow incidents. You can use
// the connector for rule actions and cases.
// Ref: #/components/schemas/create_connector_request_servicenow
type CreateConnectorRequestServicenow struct {
	Config ConfigPropertiesServicenow `json:"config"`
	// The display name for the connector.
	Name    string                      `json:"name"`
	Secrets SecretsPropertiesServicenow `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestServicenow) GetConfig() ConfigPropertiesServicenow {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestServicenow) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestServicenow) GetSecrets() SecretsPropertiesServicenow {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestServicenow) SetConfig(val ConfigPropertiesServicenow) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestServicenow) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestServicenow) SetSecrets(val SecretsPropertiesServicenow) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestServicenowConnectorTypeID string

const (
	CreateConnectorRequestServicenowConnectorTypeIDDotServicenow CreateConnectorRequestServicenowConnectorTypeID = ".servicenow"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestServicenowConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestServicenowConnectorTypeIDDotServicenow:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestServicenowConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestServicenowConnectorTypeID(data) {
	case CreateConnectorRequestServicenowConnectorTypeIDDotServicenow:
		*s = CreateConnectorRequestServicenowConnectorTypeIDDotServicenow
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The ServiceNow ITOM connector uses the event API to create ServiceNow events. You can use the
// connector for rule actions.
// Ref: #/components/schemas/create_connector_request_servicenow_itom
type CreateConnectorRequestServicenowItom struct {
	Config ConfigPropertiesServicenowItom `json:"config"`
	// The display name for the connector.
	Name    string                      `json:"name"`
	Secrets SecretsPropertiesServicenow `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestServicenowItom) GetConfig() ConfigPropertiesServicenowItom {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestServicenowItom) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestServicenowItom) GetSecrets() SecretsPropertiesServicenow {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestServicenowItom) SetConfig(val ConfigPropertiesServicenowItom) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestServicenowItom) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestServicenowItom) SetSecrets(val SecretsPropertiesServicenow) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestServicenowItomConnectorTypeID string

const (
	CreateConnectorRequestServicenowItomConnectorTypeIDDotServicenowMinusItom CreateConnectorRequestServicenowItomConnectorTypeID = ".servicenow-itom"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestServicenowItomConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestServicenowItomConnectorTypeIDDotServicenowMinusItom:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestServicenowItomConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestServicenowItomConnectorTypeID(data) {
	case CreateConnectorRequestServicenowItomConnectorTypeIDDotServicenowMinusItom:
		*s = CreateConnectorRequestServicenowItomConnectorTypeIDDotServicenowMinusItom
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The ServiceNow SecOps connector uses the import set API to create ServiceNow security incidents.
// You can use the connector for rule actions and cases.
// Ref: #/components/schemas/create_connector_request_servicenow_sir
type CreateConnectorRequestServicenowSir struct {
	Config ConfigPropertiesServicenow `json:"config"`
	// The display name for the connector.
	Name    string                      `json:"name"`
	Secrets SecretsPropertiesServicenow `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestServicenowSir) GetConfig() ConfigPropertiesServicenow {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestServicenowSir) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestServicenowSir) GetSecrets() SecretsPropertiesServicenow {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestServicenowSir) SetConfig(val ConfigPropertiesServicenow) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestServicenowSir) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestServicenowSir) SetSecrets(val SecretsPropertiesServicenow) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestServicenowSirConnectorTypeID string

const (
	CreateConnectorRequestServicenowSirConnectorTypeIDDotServicenowMinusSir CreateConnectorRequestServicenowSirConnectorTypeID = ".servicenow-sir"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestServicenowSirConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestServicenowSirConnectorTypeIDDotServicenowMinusSir:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestServicenowSirConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestServicenowSirConnectorTypeID(data) {
	case CreateConnectorRequestServicenowSirConnectorTypeIDDotServicenowMinusSir:
		*s = CreateConnectorRequestServicenowSirConnectorTypeIDDotServicenowMinusSir
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The Slack connector uses Slack Incoming Webhooks.
// Ref: #/components/schemas/create_connector_request_slack
type CreateConnectorRequestSlack struct {
	// The display name for the connector.
	Name    string                 `json:"name"`
	Secrets SecretsPropertiesSlack `json:"secrets"`
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestSlack) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestSlack) GetSecrets() SecretsPropertiesSlack {
	return s.Secrets
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestSlack) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestSlack) SetSecrets(val SecretsPropertiesSlack) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestSlackConnectorTypeID string

const (
	CreateConnectorRequestSlackConnectorTypeIDDotSlack CreateConnectorRequestSlackConnectorTypeID = ".slack"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestSlackConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestSlackConnectorTypeIDDotSlack:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestSlackConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestSlackConnectorTypeID(data) {
	case CreateConnectorRequestSlackConnectorTypeIDDotSlack:
		*s = CreateConnectorRequestSlackConnectorTypeIDDotSlack
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The Swimlane connector uses the Swimlane REST API to create Swimlane records.
// Ref: #/components/schemas/create_connector_request_swimlane
type CreateConnectorRequestSwimlane struct {
	Config ConfigPropertiesSwimlane `json:"config"`
	// The display name for the connector.
	Name    string                    `json:"name"`
	Secrets SecretsPropertiesSwimlane `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestSwimlane) GetConfig() ConfigPropertiesSwimlane {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestSwimlane) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestSwimlane) GetSecrets() SecretsPropertiesSwimlane {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestSwimlane) SetConfig(val ConfigPropertiesSwimlane) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestSwimlane) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestSwimlane) SetSecrets(val SecretsPropertiesSwimlane) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestSwimlaneConnectorTypeID string

const (
	CreateConnectorRequestSwimlaneConnectorTypeIDDotSwimlane CreateConnectorRequestSwimlaneConnectorTypeID = ".swimlane"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestSwimlaneConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestSwimlaneConnectorTypeIDDotSwimlane:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestSwimlaneConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestSwimlaneConnectorTypeID(data) {
	case CreateConnectorRequestSwimlaneConnectorTypeIDDotSwimlane:
		*s = CreateConnectorRequestSwimlaneConnectorTypeIDDotSwimlane
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The Microsoft Teams connector uses Incoming Webhooks.
// Ref: #/components/schemas/create_connector_request_teams
type CreateConnectorRequestTeams struct {
	// The display name for the connector.
	Name    string                 `json:"name"`
	Secrets SecretsPropertiesTeams `json:"secrets"`
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestTeams) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestTeams) GetSecrets() SecretsPropertiesTeams {
	return s.Secrets
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestTeams) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestTeams) SetSecrets(val SecretsPropertiesTeams) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestTeamsConnectorTypeID string

const (
	CreateConnectorRequestTeamsConnectorTypeIDDotTeams CreateConnectorRequestTeamsConnectorTypeID = ".teams"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestTeamsConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestTeamsConnectorTypeIDDotTeams:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestTeamsConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestTeamsConnectorTypeID(data) {
	case CreateConnectorRequestTeamsConnectorTypeIDDotTeams:
		*s = CreateConnectorRequestTeamsConnectorTypeIDDotTeams
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The Tines connector uses Tines Webhook actions to send events via POST request.
// Ref: #/components/schemas/create_connector_request_tines
type CreateConnectorRequestTines struct {
	Config ConfigPropertiesTines `json:"config"`
	// The display name for the connector.
	Name    string                 `json:"name"`
	Secrets SecretsPropertiesTines `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestTines) GetConfig() ConfigPropertiesTines {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestTines) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestTines) GetSecrets() SecretsPropertiesTines {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestTines) SetConfig(val ConfigPropertiesTines) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestTines) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestTines) SetSecrets(val SecretsPropertiesTines) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestTinesConnectorTypeID string

const (
	CreateConnectorRequestTinesConnectorTypeIDDotTines CreateConnectorRequestTinesConnectorTypeID = ".tines"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestTinesConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestTinesConnectorTypeIDDotTines:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestTinesConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestTinesConnectorTypeID(data) {
	case CreateConnectorRequestTinesConnectorTypeIDDotTines:
		*s = CreateConnectorRequestTinesConnectorTypeIDDotTines
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The Webhook connector uses axios to send a POST or PUT request to a web service.
// Ref: #/components/schemas/create_connector_request_webhook
type CreateConnectorRequestWebhook struct {
	Config ConfigPropertiesWebhook `json:"config"`
	// The display name for the connector.
	Name    string                   `json:"name"`
	Secrets SecretsPropertiesWebhook `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestWebhook) GetConfig() ConfigPropertiesWebhook {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestWebhook) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestWebhook) GetSecrets() SecretsPropertiesWebhook {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestWebhook) SetConfig(val ConfigPropertiesWebhook) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestWebhook) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestWebhook) SetSecrets(val SecretsPropertiesWebhook) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestWebhookConnectorTypeID string

const (
	CreateConnectorRequestWebhookConnectorTypeIDDotWebhook CreateConnectorRequestWebhookConnectorTypeID = ".webhook"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestWebhookConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestWebhookConnectorTypeIDDotWebhook:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestWebhookConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestWebhookConnectorTypeID(data) {
	case CreateConnectorRequestWebhookConnectorTypeIDDotWebhook:
		*s = CreateConnectorRequestWebhookConnectorTypeIDDotWebhook
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The xMatters connector uses the xMatters Workflow for Elastic to send actionable alerts to on-call
// xMatters resources.
// Ref: #/components/schemas/create_connector_request_xmatters
type CreateConnectorRequestXmatters struct {
	Config ConfigPropertiesXmatters `json:"config"`
	// The display name for the connector.
	Name    string                    `json:"name"`
	Secrets SecretsPropertiesXmatters `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequestXmatters) GetConfig() ConfigPropertiesXmatters {
	return s.Config
}

// GetName returns the value of Name.
func (s *CreateConnectorRequestXmatters) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *CreateConnectorRequestXmatters) GetSecrets() SecretsPropertiesXmatters {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequestXmatters) SetConfig(val ConfigPropertiesXmatters) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequestXmatters) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *CreateConnectorRequestXmatters) SetSecrets(val SecretsPropertiesXmatters) {
	s.Secrets = val
}

// The type of connector.
type CreateConnectorRequestXmattersConnectorTypeID string

const (
	CreateConnectorRequestXmattersConnectorTypeIDDotXmatters CreateConnectorRequestXmattersConnectorTypeID = ".xmatters"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestXmattersConnectorTypeID) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestXmattersConnectorTypeIDDotXmatters:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestXmattersConnectorTypeID) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestXmattersConnectorTypeID(data) {
	case CreateConnectorRequestXmattersConnectorTypeIDDotXmatters:
		*s = CreateConnectorRequestXmattersConnectorTypeIDDotXmatters
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DeleteConnectorNoContent is response for DeleteConnector operation.
type DeleteConnectorNoContent struct{}

func (*DeleteConnectorNoContent) deleteConnectorRes() {}

type DeleteConnectorNotFound struct {
	Error      OptString `json:"error"`
	Message    OptString `json:"message"`
	StatusCode OptInt    `json:"statusCode"`
}

// GetError returns the value of Error.
func (s *DeleteConnectorNotFound) GetError() OptString {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *DeleteConnectorNotFound) GetMessage() OptString {
	return s.Message
}

// GetStatusCode returns the value of StatusCode.
func (s *DeleteConnectorNotFound) GetStatusCode() OptInt {
	return s.StatusCode
}

// SetError sets the value of Error.
func (s *DeleteConnectorNotFound) SetError(val OptString) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *DeleteConnectorNotFound) SetMessage(val OptString) {
	s.Message = val
}

// SetStatusCode sets the value of StatusCode.
func (s *DeleteConnectorNotFound) SetStatusCode(val OptInt) {
	s.StatusCode = val
}

func (*DeleteConnectorNotFound) deleteConnectorRes() {}

// The feature that uses the connector. Valid values are `alerting`, `cases`, `uptime`, and `siem`.
// Ref: #/components/schemas/features
type Features string

const (
	FeaturesAlerting Features = "alerting"
	FeaturesCases    Features = "cases"
	FeaturesUptime   Features = "uptime"
	FeaturesSiem     Features = "siem"
)

// MarshalText implements encoding.TextMarshaler.
func (s Features) MarshalText() ([]byte, error) {
	switch s {
	case FeaturesAlerting:
		return []byte(s), nil
	case FeaturesCases:
		return []byte(s), nil
	case FeaturesUptime:
		return []byte(s), nil
	case FeaturesSiem:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Features) UnmarshalText(data []byte) error {
	switch Features(data) {
	case FeaturesAlerting:
		*s = FeaturesAlerting
		return nil
	case FeaturesCases:
		*s = FeaturesCases
		return nil
	case FeaturesUptime:
		*s = FeaturesUptime
		return nil
	case FeaturesSiem:
		*s = FeaturesSiem
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetConnectorNotFound struct {
	Error      OptString `json:"error"`
	Message    OptString `json:"message"`
	StatusCode OptInt    `json:"statusCode"`
}

// GetError returns the value of Error.
func (s *GetConnectorNotFound) GetError() OptString {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *GetConnectorNotFound) GetMessage() OptString {
	return s.Message
}

// GetStatusCode returns the value of StatusCode.
func (s *GetConnectorNotFound) GetStatusCode() OptInt {
	return s.StatusCode
}

// SetError sets the value of Error.
func (s *GetConnectorNotFound) SetError(val OptString) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *GetConnectorNotFound) SetMessage(val OptString) {
	s.Message = val
}

// SetStatusCode sets the value of StatusCode.
func (s *GetConnectorNotFound) SetStatusCode(val OptInt) {
	s.StatusCode = val
}

func (*GetConnectorNotFound) getConnectorRes() {}

type GetConnectorTypesOKApplicationJSON []GetConnectorTypesOKItem

func (*GetConnectorTypesOKApplicationJSON) getConnectorTypesRes() {}

type GetConnectorTypesOKItem struct {
	// Indicates whether the connector type is enabled in Kibana.
	Enabled OptBool `json:"enabled"`
	// Indicates whether the connector type is enabled in the Kibana `.yml` file.
	EnabledInConfig OptBool `json:"enabled_in_config"`
	// Indicates whether the connector is enabled in the license.
	EnabledInLicense OptBool           `json:"enabled_in_license"`
	ID               OptConnectorTypes `json:"id"`
	// The license that is required to use the connector type.
	MinimumLicenseRequired OptString `json:"minimum_license_required"`
	// The name of the connector type.
	Name OptString `json:"name"`
	// The Kibana features that are supported by the connector type.
	SupportedFeatureIds []Features `json:"supported_feature_ids"`
}

// GetEnabled returns the value of Enabled.
func (s *GetConnectorTypesOKItem) GetEnabled() OptBool {
	return s.Enabled
}

// GetEnabledInConfig returns the value of EnabledInConfig.
func (s *GetConnectorTypesOKItem) GetEnabledInConfig() OptBool {
	return s.EnabledInConfig
}

// GetEnabledInLicense returns the value of EnabledInLicense.
func (s *GetConnectorTypesOKItem) GetEnabledInLicense() OptBool {
	return s.EnabledInLicense
}

// GetID returns the value of ID.
func (s *GetConnectorTypesOKItem) GetID() OptConnectorTypes {
	return s.ID
}

// GetMinimumLicenseRequired returns the value of MinimumLicenseRequired.
func (s *GetConnectorTypesOKItem) GetMinimumLicenseRequired() OptString {
	return s.MinimumLicenseRequired
}

// GetName returns the value of Name.
func (s *GetConnectorTypesOKItem) GetName() OptString {
	return s.Name
}

// GetSupportedFeatureIds returns the value of SupportedFeatureIds.
func (s *GetConnectorTypesOKItem) GetSupportedFeatureIds() []Features {
	return s.SupportedFeatureIds
}

// SetEnabled sets the value of Enabled.
func (s *GetConnectorTypesOKItem) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetEnabledInConfig sets the value of EnabledInConfig.
func (s *GetConnectorTypesOKItem) SetEnabledInConfig(val OptBool) {
	s.EnabledInConfig = val
}

// SetEnabledInLicense sets the value of EnabledInLicense.
func (s *GetConnectorTypesOKItem) SetEnabledInLicense(val OptBool) {
	s.EnabledInLicense = val
}

// SetID sets the value of ID.
func (s *GetConnectorTypesOKItem) SetID(val OptConnectorTypes) {
	s.ID = val
}

// SetMinimumLicenseRequired sets the value of MinimumLicenseRequired.
func (s *GetConnectorTypesOKItem) SetMinimumLicenseRequired(val OptString) {
	s.MinimumLicenseRequired = val
}

// SetName sets the value of Name.
func (s *GetConnectorTypesOKItem) SetName(val OptString) {
	s.Name = val
}

// SetSupportedFeatureIds sets the value of SupportedFeatureIds.
func (s *GetConnectorTypesOKItem) SetSupportedFeatureIds(val []Features) {
	s.SupportedFeatureIds = val
}

type GetConnectorsOKApplicationJSON []GetConnectorsOKItem

func (*GetConnectorsOKApplicationJSON) getConnectorsRes() {}

// The properties vary for each connector type.
type GetConnectorsOKItem struct {
	ConnectorTypeID ConnectorTypes `json:"connector_type_id"`
	// The configuration for the connector. Configuration properties vary depending on the connector type.
	Config OptNilGetConnectorsOKItemConfig `json:"config"`
	// The identifier for the connector.
	ID               string              `json:"id"`
	IsDeprecated     OptIsDeprecated     `json:"is_deprecated"`
	IsMissingSecrets OptIsMissingSecrets `json:"is_missing_secrets"`
	IsPreconfigured  IsPreconfigured     `json:"is_preconfigured"`
	// The display name for the connector.
	Name string `json:"name"`
	// Indicates the number of saved objects that reference the connector. If `is_preconfigured` is true,
	// this value is not calculated.
	ReferencedByCount int `json:"referenced_by_count"`
}

// GetConnectorTypeID returns the value of ConnectorTypeID.
func (s *GetConnectorsOKItem) GetConnectorTypeID() ConnectorTypes {
	return s.ConnectorTypeID
}

// GetConfig returns the value of Config.
func (s *GetConnectorsOKItem) GetConfig() OptNilGetConnectorsOKItemConfig {
	return s.Config
}

// GetID returns the value of ID.
func (s *GetConnectorsOKItem) GetID() string {
	return s.ID
}

// GetIsDeprecated returns the value of IsDeprecated.
func (s *GetConnectorsOKItem) GetIsDeprecated() OptIsDeprecated {
	return s.IsDeprecated
}

// GetIsMissingSecrets returns the value of IsMissingSecrets.
func (s *GetConnectorsOKItem) GetIsMissingSecrets() OptIsMissingSecrets {
	return s.IsMissingSecrets
}

// GetIsPreconfigured returns the value of IsPreconfigured.
func (s *GetConnectorsOKItem) GetIsPreconfigured() IsPreconfigured {
	return s.IsPreconfigured
}

// GetName returns the value of Name.
func (s *GetConnectorsOKItem) GetName() string {
	return s.Name
}

// GetReferencedByCount returns the value of ReferencedByCount.
func (s *GetConnectorsOKItem) GetReferencedByCount() int {
	return s.ReferencedByCount
}

// SetConnectorTypeID sets the value of ConnectorTypeID.
func (s *GetConnectorsOKItem) SetConnectorTypeID(val ConnectorTypes) {
	s.ConnectorTypeID = val
}

// SetConfig sets the value of Config.
func (s *GetConnectorsOKItem) SetConfig(val OptNilGetConnectorsOKItemConfig) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *GetConnectorsOKItem) SetID(val string) {
	s.ID = val
}

// SetIsDeprecated sets the value of IsDeprecated.
func (s *GetConnectorsOKItem) SetIsDeprecated(val OptIsDeprecated) {
	s.IsDeprecated = val
}

// SetIsMissingSecrets sets the value of IsMissingSecrets.
func (s *GetConnectorsOKItem) SetIsMissingSecrets(val OptIsMissingSecrets) {
	s.IsMissingSecrets = val
}

// SetIsPreconfigured sets the value of IsPreconfigured.
func (s *GetConnectorsOKItem) SetIsPreconfigured(val IsPreconfigured) {
	s.IsPreconfigured = val
}

// SetName sets the value of Name.
func (s *GetConnectorsOKItem) SetName(val string) {
	s.Name = val
}

// SetReferencedByCount sets the value of ReferencedByCount.
func (s *GetConnectorsOKItem) SetReferencedByCount(val int) {
	s.ReferencedByCount = val
}

// The configuration for the connector. Configuration properties vary depending on the connector type.
type GetConnectorsOKItemConfig map[string]jx.Raw

func (s *GetConnectorsOKItemConfig) init() GetConnectorsOKItemConfig {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type IsDeprecated bool

type IsMissingSecrets bool

type IsPreconfigured bool

type LegacyCreateConnectorReq struct {
	// The connector type identifier.
	ActionTypeId OptString `json:"actionTypeId"`
	// The configuration for the connector. Configuration properties vary depending on the connector type.
	Config *LegacyCreateConnectorReqConfig `json:"config"`
	// The display name for the connector.
	Name OptString `json:"name"`
	// The secrets configuration for the connector. Secrets configuration properties vary depending on
	// the connector type. NOTE: Remember these values. You must provide them each time you update the
	// connector.
	Secrets *LegacyCreateConnectorReqSecrets `json:"secrets"`
}

// GetActionTypeId returns the value of ActionTypeId.
func (s *LegacyCreateConnectorReq) GetActionTypeId() OptString {
	return s.ActionTypeId
}

// GetConfig returns the value of Config.
func (s *LegacyCreateConnectorReq) GetConfig() *LegacyCreateConnectorReqConfig {
	return s.Config
}

// GetName returns the value of Name.
func (s *LegacyCreateConnectorReq) GetName() OptString {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *LegacyCreateConnectorReq) GetSecrets() *LegacyCreateConnectorReqSecrets {
	return s.Secrets
}

// SetActionTypeId sets the value of ActionTypeId.
func (s *LegacyCreateConnectorReq) SetActionTypeId(val OptString) {
	s.ActionTypeId = val
}

// SetConfig sets the value of Config.
func (s *LegacyCreateConnectorReq) SetConfig(val *LegacyCreateConnectorReqConfig) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *LegacyCreateConnectorReq) SetName(val OptString) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *LegacyCreateConnectorReq) SetSecrets(val *LegacyCreateConnectorReqSecrets) {
	s.Secrets = val
}

// The configuration for the connector. Configuration properties vary depending on the connector type.
type LegacyCreateConnectorReqConfig struct{}

// The secrets configuration for the connector. Secrets configuration properties vary depending on
// the connector type. NOTE: Remember these values. You must provide them each time you update the
// connector.
type LegacyCreateConnectorReqSecrets struct{}

// LegacyDeleteConnectorNoContent is response for LegacyDeleteConnector operation.
type LegacyDeleteConnectorNoContent struct{}

func (*LegacyDeleteConnectorNoContent) legacyDeleteConnectorRes() {}

type LegacyGetConnectorTypesOKApplicationJSON []LegacyGetConnectorTypesOKItem

func (*LegacyGetConnectorTypesOKApplicationJSON) legacyGetConnectorTypesRes() {}

type LegacyGetConnectorTypesOKItem struct {
	// Indicates whether the connector type is enabled in Kibana.
	Enabled OptBool `json:"enabled"`
	// Indicates whether the connector type is enabled in the Kibana `.yml` file.
	EnabledInConfig OptBool `json:"enabledInConfig"`
	// Indicates whether the connector is enabled in the license.
	EnabledInLicense OptBool `json:"enabledInLicense"`
	// The unique identifier for the connector type.
	ID OptString `json:"id"`
	// The license that is required to use the connector type.
	MinimumLicenseRequired OptString `json:"minimumLicenseRequired"`
	// The name of the connector type.
	Name OptString `json:"name"`
}

// GetEnabled returns the value of Enabled.
func (s *LegacyGetConnectorTypesOKItem) GetEnabled() OptBool {
	return s.Enabled
}

// GetEnabledInConfig returns the value of EnabledInConfig.
func (s *LegacyGetConnectorTypesOKItem) GetEnabledInConfig() OptBool {
	return s.EnabledInConfig
}

// GetEnabledInLicense returns the value of EnabledInLicense.
func (s *LegacyGetConnectorTypesOKItem) GetEnabledInLicense() OptBool {
	return s.EnabledInLicense
}

// GetID returns the value of ID.
func (s *LegacyGetConnectorTypesOKItem) GetID() OptString {
	return s.ID
}

// GetMinimumLicenseRequired returns the value of MinimumLicenseRequired.
func (s *LegacyGetConnectorTypesOKItem) GetMinimumLicenseRequired() OptString {
	return s.MinimumLicenseRequired
}

// GetName returns the value of Name.
func (s *LegacyGetConnectorTypesOKItem) GetName() OptString {
	return s.Name
}

// SetEnabled sets the value of Enabled.
func (s *LegacyGetConnectorTypesOKItem) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetEnabledInConfig sets the value of EnabledInConfig.
func (s *LegacyGetConnectorTypesOKItem) SetEnabledInConfig(val OptBool) {
	s.EnabledInConfig = val
}

// SetEnabledInLicense sets the value of EnabledInLicense.
func (s *LegacyGetConnectorTypesOKItem) SetEnabledInLicense(val OptBool) {
	s.EnabledInLicense = val
}

// SetID sets the value of ID.
func (s *LegacyGetConnectorTypesOKItem) SetID(val OptString) {
	s.ID = val
}

// SetMinimumLicenseRequired sets the value of MinimumLicenseRequired.
func (s *LegacyGetConnectorTypesOKItem) SetMinimumLicenseRequired(val OptString) {
	s.MinimumLicenseRequired = val
}

// SetName sets the value of Name.
func (s *LegacyGetConnectorTypesOKItem) SetName(val OptString) {
	s.Name = val
}

type LegacyGetConnectorsOKApplicationJSON []ActionResponseProperties

func (*LegacyGetConnectorsOKApplicationJSON) legacyGetConnectorsRes() {}

type LegacyRunConnectorOK struct {
	ActionId OptString                   `json:"actionId"`
	Data     OptLegacyRunConnectorOKData `json:"data"`
	// The status of the action.
	Status OptString `json:"status"`
}

// GetActionId returns the value of ActionId.
func (s *LegacyRunConnectorOK) GetActionId() OptString {
	return s.ActionId
}

// GetData returns the value of Data.
func (s *LegacyRunConnectorOK) GetData() OptLegacyRunConnectorOKData {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *LegacyRunConnectorOK) GetStatus() OptString {
	return s.Status
}

// SetActionId sets the value of ActionId.
func (s *LegacyRunConnectorOK) SetActionId(val OptString) {
	s.ActionId = val
}

// SetData sets the value of Data.
func (s *LegacyRunConnectorOK) SetData(val OptLegacyRunConnectorOKData) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *LegacyRunConnectorOK) SetStatus(val OptString) {
	s.Status = val
}

func (*LegacyRunConnectorOK) legacyRunConnectorRes() {}

// LegacyRunConnectorOKData represents sum type.
type LegacyRunConnectorOKData struct {
	Type                               LegacyRunConnectorOKDataType // switch on this field
	LegacyRunConnectorOKData0          LegacyRunConnectorOKData0
	LegacyRunConnectorOKData1ItemArray []LegacyRunConnectorOKData1Item
}

// LegacyRunConnectorOKDataType is oneOf type of LegacyRunConnectorOKData.
type LegacyRunConnectorOKDataType string

// Possible values for LegacyRunConnectorOKDataType.
const (
	LegacyRunConnectorOKData0LegacyRunConnectorOKData          LegacyRunConnectorOKDataType = "LegacyRunConnectorOKData0"
	LegacyRunConnectorOKData1ItemArrayLegacyRunConnectorOKData LegacyRunConnectorOKDataType = "[]LegacyRunConnectorOKData1Item"
)

// IsLegacyRunConnectorOKData0 reports whether LegacyRunConnectorOKData is LegacyRunConnectorOKData0.
func (s LegacyRunConnectorOKData) IsLegacyRunConnectorOKData0() bool {
	return s.Type == LegacyRunConnectorOKData0LegacyRunConnectorOKData
}

// IsLegacyRunConnectorOKData1ItemArray reports whether LegacyRunConnectorOKData is []LegacyRunConnectorOKData1Item.
func (s LegacyRunConnectorOKData) IsLegacyRunConnectorOKData1ItemArray() bool {
	return s.Type == LegacyRunConnectorOKData1ItemArrayLegacyRunConnectorOKData
}

// SetLegacyRunConnectorOKData0 sets LegacyRunConnectorOKData to LegacyRunConnectorOKData0.
func (s *LegacyRunConnectorOKData) SetLegacyRunConnectorOKData0(v LegacyRunConnectorOKData0) {
	s.Type = LegacyRunConnectorOKData0LegacyRunConnectorOKData
	s.LegacyRunConnectorOKData0 = v
}

// GetLegacyRunConnectorOKData0 returns LegacyRunConnectorOKData0 and true boolean if LegacyRunConnectorOKData is LegacyRunConnectorOKData0.
func (s LegacyRunConnectorOKData) GetLegacyRunConnectorOKData0() (v LegacyRunConnectorOKData0, ok bool) {
	if !s.IsLegacyRunConnectorOKData0() {
		return v, false
	}
	return s.LegacyRunConnectorOKData0, true
}

// NewLegacyRunConnectorOKData0LegacyRunConnectorOKData returns new LegacyRunConnectorOKData from LegacyRunConnectorOKData0.
func NewLegacyRunConnectorOKData0LegacyRunConnectorOKData(v LegacyRunConnectorOKData0) LegacyRunConnectorOKData {
	var s LegacyRunConnectorOKData
	s.SetLegacyRunConnectorOKData0(v)
	return s
}

// SetLegacyRunConnectorOKData1ItemArray sets LegacyRunConnectorOKData to []LegacyRunConnectorOKData1Item.
func (s *LegacyRunConnectorOKData) SetLegacyRunConnectorOKData1ItemArray(v []LegacyRunConnectorOKData1Item) {
	s.Type = LegacyRunConnectorOKData1ItemArrayLegacyRunConnectorOKData
	s.LegacyRunConnectorOKData1ItemArray = v
}

// GetLegacyRunConnectorOKData1ItemArray returns []LegacyRunConnectorOKData1Item and true boolean if LegacyRunConnectorOKData is []LegacyRunConnectorOKData1Item.
func (s LegacyRunConnectorOKData) GetLegacyRunConnectorOKData1ItemArray() (v []LegacyRunConnectorOKData1Item, ok bool) {
	if !s.IsLegacyRunConnectorOKData1ItemArray() {
		return v, false
	}
	return s.LegacyRunConnectorOKData1ItemArray, true
}

// NewLegacyRunConnectorOKData1ItemArrayLegacyRunConnectorOKData returns new LegacyRunConnectorOKData from []LegacyRunConnectorOKData1Item.
func NewLegacyRunConnectorOKData1ItemArrayLegacyRunConnectorOKData(v []LegacyRunConnectorOKData1Item) LegacyRunConnectorOKData {
	var s LegacyRunConnectorOKData
	s.SetLegacyRunConnectorOKData1ItemArray(v)
	return s
}

// Information returned from the action.
type LegacyRunConnectorOKData0 map[string]jx.Raw

func (s *LegacyRunConnectorOKData0) init() LegacyRunConnectorOKData0 {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type LegacyRunConnectorOKData1Item struct{}

// The properties vary depending on the connector type.
type LegacyRunConnectorReq struct {
	// The parameters of the connector. Parameter properties vary depending on the connector type.
	Params LegacyRunConnectorReqParams `json:"params"`
}

// GetParams returns the value of Params.
func (s *LegacyRunConnectorReq) GetParams() LegacyRunConnectorReqParams {
	return s.Params
}

// SetParams sets the value of Params.
func (s *LegacyRunConnectorReq) SetParams(val LegacyRunConnectorReqParams) {
	s.Params = val
}

// The parameters of the connector. Parameter properties vary depending on the connector type.
type LegacyRunConnectorReqParams struct{}

// The properties vary depending on the connector type.
type LegacyUpdateConnectorReq struct {
	// The new connector configuration. Configuration properties vary depending on the connector type.
	Config *LegacyUpdateConnectorReqConfig `json:"config"`
	// The new name for the connector.
	Name OptString `json:"name"`
	// The updated secrets configuration for the connector. Secrets properties vary depending on the
	// connector type.
	Secrets *LegacyUpdateConnectorReqSecrets `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *LegacyUpdateConnectorReq) GetConfig() *LegacyUpdateConnectorReqConfig {
	return s.Config
}

// GetName returns the value of Name.
func (s *LegacyUpdateConnectorReq) GetName() OptString {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *LegacyUpdateConnectorReq) GetSecrets() *LegacyUpdateConnectorReqSecrets {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *LegacyUpdateConnectorReq) SetConfig(val *LegacyUpdateConnectorReqConfig) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *LegacyUpdateConnectorReq) SetName(val OptString) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *LegacyUpdateConnectorReq) SetSecrets(val *LegacyUpdateConnectorReqSecrets) {
	s.Secrets = val
}

// The new connector configuration. Configuration properties vary depending on the connector type.
type LegacyUpdateConnectorReqConfig struct{}

// The updated secrets configuration for the connector. Secrets properties vary depending on the
// connector type.
type LegacyUpdateConnectorReqSecrets struct{}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesCasesWebhookCreateCommentMethod returns new OptConfigPropertiesCasesWebhookCreateCommentMethod with value set to v.
func NewOptConfigPropertiesCasesWebhookCreateCommentMethod(v ConfigPropertiesCasesWebhookCreateCommentMethod) OptConfigPropertiesCasesWebhookCreateCommentMethod {
	return OptConfigPropertiesCasesWebhookCreateCommentMethod{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesCasesWebhookCreateCommentMethod is optional ConfigPropertiesCasesWebhookCreateCommentMethod.
type OptConfigPropertiesCasesWebhookCreateCommentMethod struct {
	Value ConfigPropertiesCasesWebhookCreateCommentMethod
	Set   bool
}

// IsSet returns true if OptConfigPropertiesCasesWebhookCreateCommentMethod was set.
func (o OptConfigPropertiesCasesWebhookCreateCommentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesCasesWebhookCreateCommentMethod) Reset() {
	var v ConfigPropertiesCasesWebhookCreateCommentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesCasesWebhookCreateCommentMethod) SetTo(v ConfigPropertiesCasesWebhookCreateCommentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesCasesWebhookCreateCommentMethod) Get() (v ConfigPropertiesCasesWebhookCreateCommentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesCasesWebhookCreateCommentMethod) Or(d ConfigPropertiesCasesWebhookCreateCommentMethod) ConfigPropertiesCasesWebhookCreateCommentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesCasesWebhookCreateIncidentMethod returns new OptConfigPropertiesCasesWebhookCreateIncidentMethod with value set to v.
func NewOptConfigPropertiesCasesWebhookCreateIncidentMethod(v ConfigPropertiesCasesWebhookCreateIncidentMethod) OptConfigPropertiesCasesWebhookCreateIncidentMethod {
	return OptConfigPropertiesCasesWebhookCreateIncidentMethod{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesCasesWebhookCreateIncidentMethod is optional ConfigPropertiesCasesWebhookCreateIncidentMethod.
type OptConfigPropertiesCasesWebhookCreateIncidentMethod struct {
	Value ConfigPropertiesCasesWebhookCreateIncidentMethod
	Set   bool
}

// IsSet returns true if OptConfigPropertiesCasesWebhookCreateIncidentMethod was set.
func (o OptConfigPropertiesCasesWebhookCreateIncidentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesCasesWebhookCreateIncidentMethod) Reset() {
	var v ConfigPropertiesCasesWebhookCreateIncidentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesCasesWebhookCreateIncidentMethod) SetTo(v ConfigPropertiesCasesWebhookCreateIncidentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesCasesWebhookCreateIncidentMethod) Get() (v ConfigPropertiesCasesWebhookCreateIncidentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesCasesWebhookCreateIncidentMethod) Or(d ConfigPropertiesCasesWebhookCreateIncidentMethod) ConfigPropertiesCasesWebhookCreateIncidentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesCasesWebhookUpdateIncidentMethod returns new OptConfigPropertiesCasesWebhookUpdateIncidentMethod with value set to v.
func NewOptConfigPropertiesCasesWebhookUpdateIncidentMethod(v ConfigPropertiesCasesWebhookUpdateIncidentMethod) OptConfigPropertiesCasesWebhookUpdateIncidentMethod {
	return OptConfigPropertiesCasesWebhookUpdateIncidentMethod{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesCasesWebhookUpdateIncidentMethod is optional ConfigPropertiesCasesWebhookUpdateIncidentMethod.
type OptConfigPropertiesCasesWebhookUpdateIncidentMethod struct {
	Value ConfigPropertiesCasesWebhookUpdateIncidentMethod
	Set   bool
}

// IsSet returns true if OptConfigPropertiesCasesWebhookUpdateIncidentMethod was set.
func (o OptConfigPropertiesCasesWebhookUpdateIncidentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesCasesWebhookUpdateIncidentMethod) Reset() {
	var v ConfigPropertiesCasesWebhookUpdateIncidentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesCasesWebhookUpdateIncidentMethod) SetTo(v ConfigPropertiesCasesWebhookUpdateIncidentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesCasesWebhookUpdateIncidentMethod) Get() (v ConfigPropertiesCasesWebhookUpdateIncidentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesCasesWebhookUpdateIncidentMethod) Or(d ConfigPropertiesCasesWebhookUpdateIncidentMethod) ConfigPropertiesCasesWebhookUpdateIncidentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesSwimlaneMappings returns new OptConfigPropertiesSwimlaneMappings with value set to v.
func NewOptConfigPropertiesSwimlaneMappings(v ConfigPropertiesSwimlaneMappings) OptConfigPropertiesSwimlaneMappings {
	return OptConfigPropertiesSwimlaneMappings{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesSwimlaneMappings is optional ConfigPropertiesSwimlaneMappings.
type OptConfigPropertiesSwimlaneMappings struct {
	Value ConfigPropertiesSwimlaneMappings
	Set   bool
}

// IsSet returns true if OptConfigPropertiesSwimlaneMappings was set.
func (o OptConfigPropertiesSwimlaneMappings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesSwimlaneMappings) Reset() {
	var v ConfigPropertiesSwimlaneMappings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesSwimlaneMappings) SetTo(v ConfigPropertiesSwimlaneMappings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesSwimlaneMappings) Get() (v ConfigPropertiesSwimlaneMappings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesSwimlaneMappings) Or(d ConfigPropertiesSwimlaneMappings) ConfigPropertiesSwimlaneMappings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesSwimlaneMappingsAlertIdConfig returns new OptConfigPropertiesSwimlaneMappingsAlertIdConfig with value set to v.
func NewOptConfigPropertiesSwimlaneMappingsAlertIdConfig(v ConfigPropertiesSwimlaneMappingsAlertIdConfig) OptConfigPropertiesSwimlaneMappingsAlertIdConfig {
	return OptConfigPropertiesSwimlaneMappingsAlertIdConfig{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesSwimlaneMappingsAlertIdConfig is optional ConfigPropertiesSwimlaneMappingsAlertIdConfig.
type OptConfigPropertiesSwimlaneMappingsAlertIdConfig struct {
	Value ConfigPropertiesSwimlaneMappingsAlertIdConfig
	Set   bool
}

// IsSet returns true if OptConfigPropertiesSwimlaneMappingsAlertIdConfig was set.
func (o OptConfigPropertiesSwimlaneMappingsAlertIdConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesSwimlaneMappingsAlertIdConfig) Reset() {
	var v ConfigPropertiesSwimlaneMappingsAlertIdConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesSwimlaneMappingsAlertIdConfig) SetTo(v ConfigPropertiesSwimlaneMappingsAlertIdConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesSwimlaneMappingsAlertIdConfig) Get() (v ConfigPropertiesSwimlaneMappingsAlertIdConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesSwimlaneMappingsAlertIdConfig) Or(d ConfigPropertiesSwimlaneMappingsAlertIdConfig) ConfigPropertiesSwimlaneMappingsAlertIdConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesSwimlaneMappingsCaseIdConfig returns new OptConfigPropertiesSwimlaneMappingsCaseIdConfig with value set to v.
func NewOptConfigPropertiesSwimlaneMappingsCaseIdConfig(v ConfigPropertiesSwimlaneMappingsCaseIdConfig) OptConfigPropertiesSwimlaneMappingsCaseIdConfig {
	return OptConfigPropertiesSwimlaneMappingsCaseIdConfig{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesSwimlaneMappingsCaseIdConfig is optional ConfigPropertiesSwimlaneMappingsCaseIdConfig.
type OptConfigPropertiesSwimlaneMappingsCaseIdConfig struct {
	Value ConfigPropertiesSwimlaneMappingsCaseIdConfig
	Set   bool
}

// IsSet returns true if OptConfigPropertiesSwimlaneMappingsCaseIdConfig was set.
func (o OptConfigPropertiesSwimlaneMappingsCaseIdConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesSwimlaneMappingsCaseIdConfig) Reset() {
	var v ConfigPropertiesSwimlaneMappingsCaseIdConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesSwimlaneMappingsCaseIdConfig) SetTo(v ConfigPropertiesSwimlaneMappingsCaseIdConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesSwimlaneMappingsCaseIdConfig) Get() (v ConfigPropertiesSwimlaneMappingsCaseIdConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesSwimlaneMappingsCaseIdConfig) Or(d ConfigPropertiesSwimlaneMappingsCaseIdConfig) ConfigPropertiesSwimlaneMappingsCaseIdConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesSwimlaneMappingsCaseNameConfig returns new OptConfigPropertiesSwimlaneMappingsCaseNameConfig with value set to v.
func NewOptConfigPropertiesSwimlaneMappingsCaseNameConfig(v ConfigPropertiesSwimlaneMappingsCaseNameConfig) OptConfigPropertiesSwimlaneMappingsCaseNameConfig {
	return OptConfigPropertiesSwimlaneMappingsCaseNameConfig{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesSwimlaneMappingsCaseNameConfig is optional ConfigPropertiesSwimlaneMappingsCaseNameConfig.
type OptConfigPropertiesSwimlaneMappingsCaseNameConfig struct {
	Value ConfigPropertiesSwimlaneMappingsCaseNameConfig
	Set   bool
}

// IsSet returns true if OptConfigPropertiesSwimlaneMappingsCaseNameConfig was set.
func (o OptConfigPropertiesSwimlaneMappingsCaseNameConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesSwimlaneMappingsCaseNameConfig) Reset() {
	var v ConfigPropertiesSwimlaneMappingsCaseNameConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesSwimlaneMappingsCaseNameConfig) SetTo(v ConfigPropertiesSwimlaneMappingsCaseNameConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesSwimlaneMappingsCaseNameConfig) Get() (v ConfigPropertiesSwimlaneMappingsCaseNameConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesSwimlaneMappingsCaseNameConfig) Or(d ConfigPropertiesSwimlaneMappingsCaseNameConfig) ConfigPropertiesSwimlaneMappingsCaseNameConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesSwimlaneMappingsCommentsConfig returns new OptConfigPropertiesSwimlaneMappingsCommentsConfig with value set to v.
func NewOptConfigPropertiesSwimlaneMappingsCommentsConfig(v ConfigPropertiesSwimlaneMappingsCommentsConfig) OptConfigPropertiesSwimlaneMappingsCommentsConfig {
	return OptConfigPropertiesSwimlaneMappingsCommentsConfig{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesSwimlaneMappingsCommentsConfig is optional ConfigPropertiesSwimlaneMappingsCommentsConfig.
type OptConfigPropertiesSwimlaneMappingsCommentsConfig struct {
	Value ConfigPropertiesSwimlaneMappingsCommentsConfig
	Set   bool
}

// IsSet returns true if OptConfigPropertiesSwimlaneMappingsCommentsConfig was set.
func (o OptConfigPropertiesSwimlaneMappingsCommentsConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesSwimlaneMappingsCommentsConfig) Reset() {
	var v ConfigPropertiesSwimlaneMappingsCommentsConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesSwimlaneMappingsCommentsConfig) SetTo(v ConfigPropertiesSwimlaneMappingsCommentsConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesSwimlaneMappingsCommentsConfig) Get() (v ConfigPropertiesSwimlaneMappingsCommentsConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesSwimlaneMappingsCommentsConfig) Or(d ConfigPropertiesSwimlaneMappingsCommentsConfig) ConfigPropertiesSwimlaneMappingsCommentsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesSwimlaneMappingsDescriptionConfig returns new OptConfigPropertiesSwimlaneMappingsDescriptionConfig with value set to v.
func NewOptConfigPropertiesSwimlaneMappingsDescriptionConfig(v ConfigPropertiesSwimlaneMappingsDescriptionConfig) OptConfigPropertiesSwimlaneMappingsDescriptionConfig {
	return OptConfigPropertiesSwimlaneMappingsDescriptionConfig{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesSwimlaneMappingsDescriptionConfig is optional ConfigPropertiesSwimlaneMappingsDescriptionConfig.
type OptConfigPropertiesSwimlaneMappingsDescriptionConfig struct {
	Value ConfigPropertiesSwimlaneMappingsDescriptionConfig
	Set   bool
}

// IsSet returns true if OptConfigPropertiesSwimlaneMappingsDescriptionConfig was set.
func (o OptConfigPropertiesSwimlaneMappingsDescriptionConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesSwimlaneMappingsDescriptionConfig) Reset() {
	var v ConfigPropertiesSwimlaneMappingsDescriptionConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesSwimlaneMappingsDescriptionConfig) SetTo(v ConfigPropertiesSwimlaneMappingsDescriptionConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesSwimlaneMappingsDescriptionConfig) Get() (v ConfigPropertiesSwimlaneMappingsDescriptionConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesSwimlaneMappingsDescriptionConfig) Or(d ConfigPropertiesSwimlaneMappingsDescriptionConfig) ConfigPropertiesSwimlaneMappingsDescriptionConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesSwimlaneMappingsRuleNameConfig returns new OptConfigPropertiesSwimlaneMappingsRuleNameConfig with value set to v.
func NewOptConfigPropertiesSwimlaneMappingsRuleNameConfig(v ConfigPropertiesSwimlaneMappingsRuleNameConfig) OptConfigPropertiesSwimlaneMappingsRuleNameConfig {
	return OptConfigPropertiesSwimlaneMappingsRuleNameConfig{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesSwimlaneMappingsRuleNameConfig is optional ConfigPropertiesSwimlaneMappingsRuleNameConfig.
type OptConfigPropertiesSwimlaneMappingsRuleNameConfig struct {
	Value ConfigPropertiesSwimlaneMappingsRuleNameConfig
	Set   bool
}

// IsSet returns true if OptConfigPropertiesSwimlaneMappingsRuleNameConfig was set.
func (o OptConfigPropertiesSwimlaneMappingsRuleNameConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesSwimlaneMappingsRuleNameConfig) Reset() {
	var v ConfigPropertiesSwimlaneMappingsRuleNameConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesSwimlaneMappingsRuleNameConfig) SetTo(v ConfigPropertiesSwimlaneMappingsRuleNameConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesSwimlaneMappingsRuleNameConfig) Get() (v ConfigPropertiesSwimlaneMappingsRuleNameConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesSwimlaneMappingsRuleNameConfig) Or(d ConfigPropertiesSwimlaneMappingsRuleNameConfig) ConfigPropertiesSwimlaneMappingsRuleNameConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigPropertiesSwimlaneMappingsSeverityConfig returns new OptConfigPropertiesSwimlaneMappingsSeverityConfig with value set to v.
func NewOptConfigPropertiesSwimlaneMappingsSeverityConfig(v ConfigPropertiesSwimlaneMappingsSeverityConfig) OptConfigPropertiesSwimlaneMappingsSeverityConfig {
	return OptConfigPropertiesSwimlaneMappingsSeverityConfig{
		Value: v,
		Set:   true,
	}
}

// OptConfigPropertiesSwimlaneMappingsSeverityConfig is optional ConfigPropertiesSwimlaneMappingsSeverityConfig.
type OptConfigPropertiesSwimlaneMappingsSeverityConfig struct {
	Value ConfigPropertiesSwimlaneMappingsSeverityConfig
	Set   bool
}

// IsSet returns true if OptConfigPropertiesSwimlaneMappingsSeverityConfig was set.
func (o OptConfigPropertiesSwimlaneMappingsSeverityConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigPropertiesSwimlaneMappingsSeverityConfig) Reset() {
	var v ConfigPropertiesSwimlaneMappingsSeverityConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigPropertiesSwimlaneMappingsSeverityConfig) SetTo(v ConfigPropertiesSwimlaneMappingsSeverityConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigPropertiesSwimlaneMappingsSeverityConfig) Get() (v ConfigPropertiesSwimlaneMappingsSeverityConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigPropertiesSwimlaneMappingsSeverityConfig) Or(d ConfigPropertiesSwimlaneMappingsSeverityConfig) ConfigPropertiesSwimlaneMappingsSeverityConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorTypes returns new OptConnectorTypes with value set to v.
func NewOptConnectorTypes(v ConnectorTypes) OptConnectorTypes {
	return OptConnectorTypes{
		Value: v,
		Set:   true,
	}
}

// OptConnectorTypes is optional ConnectorTypes.
type OptConnectorTypes struct {
	Value ConnectorTypes
	Set   bool
}

// IsSet returns true if OptConnectorTypes was set.
func (o OptConnectorTypes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorTypes) Reset() {
	var v ConnectorTypes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorTypes) SetTo(v ConnectorTypes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorTypes) Get() (v ConnectorTypes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorTypes) Or(d ConnectorTypes) ConnectorTypes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFeatures returns new OptFeatures with value set to v.
func NewOptFeatures(v Features) OptFeatures {
	return OptFeatures{
		Value: v,
		Set:   true,
	}
}

// OptFeatures is optional Features.
type OptFeatures struct {
	Value Features
	Set   bool
}

// IsSet returns true if OptFeatures was set.
func (o OptFeatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFeatures) Reset() {
	var v Features
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFeatures) SetTo(v Features) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFeatures) Get() (v Features, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFeatures) Or(d Features) Features {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIsDeprecated returns new OptIsDeprecated with value set to v.
func NewOptIsDeprecated(v IsDeprecated) OptIsDeprecated {
	return OptIsDeprecated{
		Value: v,
		Set:   true,
	}
}

// OptIsDeprecated is optional IsDeprecated.
type OptIsDeprecated struct {
	Value IsDeprecated
	Set   bool
}

// IsSet returns true if OptIsDeprecated was set.
func (o OptIsDeprecated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIsDeprecated) Reset() {
	var v IsDeprecated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIsDeprecated) SetTo(v IsDeprecated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIsDeprecated) Get() (v IsDeprecated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIsDeprecated) Or(d IsDeprecated) IsDeprecated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIsMissingSecrets returns new OptIsMissingSecrets with value set to v.
func NewOptIsMissingSecrets(v IsMissingSecrets) OptIsMissingSecrets {
	return OptIsMissingSecrets{
		Value: v,
		Set:   true,
	}
}

// OptIsMissingSecrets is optional IsMissingSecrets.
type OptIsMissingSecrets struct {
	Value IsMissingSecrets
	Set   bool
}

// IsSet returns true if OptIsMissingSecrets was set.
func (o OptIsMissingSecrets) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIsMissingSecrets) Reset() {
	var v IsMissingSecrets
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIsMissingSecrets) SetTo(v IsMissingSecrets) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIsMissingSecrets) Get() (v IsMissingSecrets, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIsMissingSecrets) Or(d IsMissingSecrets) IsMissingSecrets {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLegacyRunConnectorOKData returns new OptLegacyRunConnectorOKData with value set to v.
func NewOptLegacyRunConnectorOKData(v LegacyRunConnectorOKData) OptLegacyRunConnectorOKData {
	return OptLegacyRunConnectorOKData{
		Value: v,
		Set:   true,
	}
}

// OptLegacyRunConnectorOKData is optional LegacyRunConnectorOKData.
type OptLegacyRunConnectorOKData struct {
	Value LegacyRunConnectorOKData
	Set   bool
}

// IsSet returns true if OptLegacyRunConnectorOKData was set.
func (o OptLegacyRunConnectorOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLegacyRunConnectorOKData) Reset() {
	var v LegacyRunConnectorOKData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLegacyRunConnectorOKData) SetTo(v LegacyRunConnectorOKData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLegacyRunConnectorOKData) Get() (v LegacyRunConnectorOKData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLegacyRunConnectorOKData) Or(d LegacyRunConnectorOKData) LegacyRunConnectorOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetConnectorsOKItemConfig returns new OptNilGetConnectorsOKItemConfig with value set to v.
func NewOptNilGetConnectorsOKItemConfig(v GetConnectorsOKItemConfig) OptNilGetConnectorsOKItemConfig {
	return OptNilGetConnectorsOKItemConfig{
		Value: v,
		Set:   true,
	}
}

// OptNilGetConnectorsOKItemConfig is optional nullable GetConnectorsOKItemConfig.
type OptNilGetConnectorsOKItemConfig struct {
	Value GetConnectorsOKItemConfig
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetConnectorsOKItemConfig was set.
func (o OptNilGetConnectorsOKItemConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetConnectorsOKItemConfig) Reset() {
	var v GetConnectorsOKItemConfig
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetConnectorsOKItemConfig) SetTo(v GetConnectorsOKItemConfig) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGetConnectorsOKItemConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilGetConnectorsOKItemConfig) SetToNull() {
	o.Set = true
	o.Null = true
	var v GetConnectorsOKItemConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetConnectorsOKItemConfig) Get() (v GetConnectorsOKItemConfig, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetConnectorsOKItemConfig) Or(d GetConnectorsOKItemConfig) GetConnectorsOKItemConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR400Error returns new OptR400Error with value set to v.
func NewOptR400Error(v R400Error) OptR400Error {
	return OptR400Error{
		Value: v,
		Set:   true,
	}
}

// OptR400Error is optional R400Error.
type OptR400Error struct {
	Value R400Error
	Set   bool
}

// IsSet returns true if OptR400Error was set.
func (o OptR400Error) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR400Error) Reset() {
	var v R400Error
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR400Error) SetTo(v R400Error) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR400Error) Get() (v R400Error, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR400Error) Or(d R400Error) R400Error {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR400StatusCode returns new OptR400StatusCode with value set to v.
func NewOptR400StatusCode(v R400StatusCode) OptR400StatusCode {
	return OptR400StatusCode{
		Value: v,
		Set:   true,
	}
}

// OptR400StatusCode is optional R400StatusCode.
type OptR400StatusCode struct {
	Value R400StatusCode
	Set   bool
}

// IsSet returns true if OptR400StatusCode was set.
func (o OptR400StatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR400StatusCode) Reset() {
	var v R400StatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR400StatusCode) SetTo(v R400StatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR400StatusCode) Get() (v R400StatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR400StatusCode) Or(d R400StatusCode) R400StatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR401Error returns new OptR401Error with value set to v.
func NewOptR401Error(v R401Error) OptR401Error {
	return OptR401Error{
		Value: v,
		Set:   true,
	}
}

// OptR401Error is optional R401Error.
type OptR401Error struct {
	Value R401Error
	Set   bool
}

// IsSet returns true if OptR401Error was set.
func (o OptR401Error) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR401Error) Reset() {
	var v R401Error
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR401Error) SetTo(v R401Error) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR401Error) Get() (v R401Error, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR401Error) Or(d R401Error) R401Error {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR401StatusCode returns new OptR401StatusCode with value set to v.
func NewOptR401StatusCode(v R401StatusCode) OptR401StatusCode {
	return OptR401StatusCode{
		Value: v,
		Set:   true,
	}
}

// OptR401StatusCode is optional R401StatusCode.
type OptR401StatusCode struct {
	Value R401StatusCode
	Set   bool
}

// IsSet returns true if OptR401StatusCode was set.
func (o OptR401StatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR401StatusCode) Reset() {
	var v R401StatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR401StatusCode) SetTo(v R401StatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR401StatusCode) Get() (v R401StatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR401StatusCode) Or(d R401StatusCode) R401StatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR404Error returns new OptR404Error with value set to v.
func NewOptR404Error(v R404Error) OptR404Error {
	return OptR404Error{
		Value: v,
		Set:   true,
	}
}

// OptR404Error is optional R404Error.
type OptR404Error struct {
	Value R404Error
	Set   bool
}

// IsSet returns true if OptR404Error was set.
func (o OptR404Error) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR404Error) Reset() {
	var v R404Error
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR404Error) SetTo(v R404Error) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR404Error) Get() (v R404Error, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR404Error) Or(d R404Error) R404Error {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR404StatusCode returns new OptR404StatusCode with value set to v.
func NewOptR404StatusCode(v R404StatusCode) OptR404StatusCode {
	return OptR404StatusCode{
		Value: v,
		Set:   true,
	}
}

// OptR404StatusCode is optional R404StatusCode.
type OptR404StatusCode struct {
	Value R404StatusCode
	Set   bool
}

// IsSet returns true if OptR404StatusCode was set.
func (o OptR404StatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR404StatusCode) Reset() {
	var v R404StatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR404StatusCode) SetTo(v R404StatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR404StatusCode) Get() (v R404StatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR404StatusCode) Or(d R404StatusCode) R404StatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecretsPropertiesCasesWebhook returns new OptSecretsPropertiesCasesWebhook with value set to v.
func NewOptSecretsPropertiesCasesWebhook(v SecretsPropertiesCasesWebhook) OptSecretsPropertiesCasesWebhook {
	return OptSecretsPropertiesCasesWebhook{
		Value: v,
		Set:   true,
	}
}

// OptSecretsPropertiesCasesWebhook is optional SecretsPropertiesCasesWebhook.
type OptSecretsPropertiesCasesWebhook struct {
	Value SecretsPropertiesCasesWebhook
	Set   bool
}

// IsSet returns true if OptSecretsPropertiesCasesWebhook was set.
func (o OptSecretsPropertiesCasesWebhook) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecretsPropertiesCasesWebhook) Reset() {
	var v SecretsPropertiesCasesWebhook
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecretsPropertiesCasesWebhook) SetTo(v SecretsPropertiesCasesWebhook) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecretsPropertiesCasesWebhook) Get() (v SecretsPropertiesCasesWebhook, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecretsPropertiesCasesWebhook) Or(d SecretsPropertiesCasesWebhook) SecretsPropertiesCasesWebhook {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R400 struct {
	Error      OptR400Error      `json:"error"`
	Message    OptString         `json:"message"`
	StatusCode OptR400StatusCode `json:"statusCode"`
}

// GetError returns the value of Error.
func (s *R400) GetError() OptR400Error {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *R400) GetMessage() OptString {
	return s.Message
}

// GetStatusCode returns the value of StatusCode.
func (s *R400) GetStatusCode() OptR400StatusCode {
	return s.StatusCode
}

// SetError sets the value of Error.
func (s *R400) SetError(val OptR400Error) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *R400) SetMessage(val OptString) {
	s.Message = val
}

// SetStatusCode sets the value of StatusCode.
func (s *R400) SetStatusCode(val OptR400StatusCode) {
	s.StatusCode = val
}

func (*R400) createConnectorRes() {}
func (*R400) updateConnectorRes() {}

type R400Error string

const (
	R400ErrorBadRequest R400Error = "Bad Request"
)

// MarshalText implements encoding.TextMarshaler.
func (s R400Error) MarshalText() ([]byte, error) {
	switch s {
	case R400ErrorBadRequest:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *R400Error) UnmarshalText(data []byte) error {
	switch R400Error(data) {
	case R400ErrorBadRequest:
		*s = R400ErrorBadRequest
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type R400StatusCode int

const (
	R400StatusCode400 R400StatusCode = 400
)

type R401 struct {
	Error      OptR401Error      `json:"error"`
	Message    OptString         `json:"message"`
	StatusCode OptR401StatusCode `json:"statusCode"`
}

// GetError returns the value of Error.
func (s *R401) GetError() OptR401Error {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *R401) GetMessage() OptString {
	return s.Message
}

// GetStatusCode returns the value of StatusCode.
func (s *R401) GetStatusCode() OptR401StatusCode {
	return s.StatusCode
}

// SetError sets the value of Error.
func (s *R401) SetError(val OptR401Error) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *R401) SetMessage(val OptString) {
	s.Message = val
}

// SetStatusCode sets the value of StatusCode.
func (s *R401) SetStatusCode(val OptR401StatusCode) {
	s.StatusCode = val
}

func (*R401) createConnectorRes()         {}
func (*R401) deleteConnectorRes()         {}
func (*R401) getConnectorRes()            {}
func (*R401) getConnectorTypesRes()       {}
func (*R401) getConnectorsRes()           {}
func (*R401) legacyCreateConnectorRes()   {}
func (*R401) legacyDeleteConnectorRes()   {}
func (*R401) legacyGetConnectorRes()      {}
func (*R401) legacyGetConnectorTypesRes() {}
func (*R401) legacyGetConnectorsRes()     {}
func (*R401) legacyRunConnectorRes()      {}
func (*R401) updateConnectorRes()         {}

type R401Error string

const (
	R401ErrorUnauthorized R401Error = "Unauthorized"
)

// MarshalText implements encoding.TextMarshaler.
func (s R401Error) MarshalText() ([]byte, error) {
	switch s {
	case R401ErrorUnauthorized:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *R401Error) UnmarshalText(data []byte) error {
	switch R401Error(data) {
	case R401ErrorUnauthorized:
		*s = R401ErrorUnauthorized
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type R401StatusCode int

const (
	R401StatusCode401 R401StatusCode = 401
)

type R404 struct {
	Error      OptR404Error      `json:"error"`
	Message    OptString         `json:"message"`
	StatusCode OptR404StatusCode `json:"statusCode"`
}

// GetError returns the value of Error.
func (s *R404) GetError() OptR404Error {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *R404) GetMessage() OptString {
	return s.Message
}

// GetStatusCode returns the value of StatusCode.
func (s *R404) GetStatusCode() OptR404StatusCode {
	return s.StatusCode
}

// SetError sets the value of Error.
func (s *R404) SetError(val OptR404Error) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *R404) SetMessage(val OptString) {
	s.Message = val
}

// SetStatusCode sets the value of StatusCode.
func (s *R404) SetStatusCode(val OptR404StatusCode) {
	s.StatusCode = val
}

func (*R404) legacyUpdateConnectorRes() {}
func (*R404) updateConnectorRes()       {}

type R404Error string

const (
	R404ErrorNotFound R404Error = "Not Found"
)

// MarshalText implements encoding.TextMarshaler.
func (s R404Error) MarshalText() ([]byte, error) {
	switch s {
	case R404ErrorNotFound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *R404Error) UnmarshalText(data []byte) error {
	switch R404Error(data) {
	case R404ErrorNotFound:
		*s = R404ErrorNotFound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type R404StatusCode int

const (
	R404StatusCode404 R404StatusCode = 404
)

// Ref: #/components/schemas/secrets_properties_cases_webhook
type SecretsPropertiesCasesWebhook struct {
	// The password for HTTP basic authentication. If `hasAuth` is set to `true`, this property is
	// required.
	Password OptString `json:"password"`
	// The username for HTTP basic authentication. If `hasAuth` is set to `true`, this property is
	// required.
	User OptString `json:"user"`
}

// GetPassword returns the value of Password.
func (s *SecretsPropertiesCasesWebhook) GetPassword() OptString {
	return s.Password
}

// GetUser returns the value of User.
func (s *SecretsPropertiesCasesWebhook) GetUser() OptString {
	return s.User
}

// SetPassword sets the value of Password.
func (s *SecretsPropertiesCasesWebhook) SetPassword(val OptString) {
	s.Password = val
}

// SetUser sets the value of User.
func (s *SecretsPropertiesCasesWebhook) SetUser(val OptString) {
	s.User = val
}

// Defines secrets for connectors when type is `.email`.
// Ref: #/components/schemas/secrets_properties_email
type SecretsPropertiesEmail map[string]jx.Raw

func (s *SecretsPropertiesEmail) init() SecretsPropertiesEmail {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines secrets for connectors when type is `.jira`.
// Ref: #/components/schemas/secrets_properties_jira
type SecretsPropertiesJira struct {
	// The Jira API authentication token for HTTP basic authentication.
	ApiToken string `json:"apiToken"`
	// The account email for HTTP Basic authentication.
	Email string `json:"email"`
}

// GetApiToken returns the value of ApiToken.
func (s *SecretsPropertiesJira) GetApiToken() string {
	return s.ApiToken
}

// GetEmail returns the value of Email.
func (s *SecretsPropertiesJira) GetEmail() string {
	return s.Email
}

// SetApiToken sets the value of ApiToken.
func (s *SecretsPropertiesJira) SetApiToken(val string) {
	s.ApiToken = val
}

// SetEmail sets the value of Email.
func (s *SecretsPropertiesJira) SetEmail(val string) {
	s.Email = val
}

// Defines secrets for connectors when type is `.opsgenie`.
// Ref: #/components/schemas/secrets_properties_opsgenie
type SecretsPropertiesOpsgenie struct {
	// The Opsgenie API authentication key for HTTP Basic authentication.
	ApiKey string `json:"apiKey"`
}

// GetApiKey returns the value of ApiKey.
func (s *SecretsPropertiesOpsgenie) GetApiKey() string {
	return s.ApiKey
}

// SetApiKey sets the value of ApiKey.
func (s *SecretsPropertiesOpsgenie) SetApiKey(val string) {
	s.ApiKey = val
}

// Defines secrets for connectors when type is `.pagerduty`.
// Ref: #/components/schemas/secrets_properties_pagerduty
type SecretsPropertiesPagerduty map[string]jx.Raw

func (s *SecretsPropertiesPagerduty) init() SecretsPropertiesPagerduty {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines secrets for connectors when type is `.resilient`.
// Ref: #/components/schemas/secrets_properties_resilient
type SecretsPropertiesResilient struct {
	// The authentication key ID for HTTP Basic authentication.
	ApiKeyId string `json:"apiKeyId"`
	// The authentication key secret for HTTP Basic authentication.
	ApiKeySecret string `json:"apiKeySecret"`
}

// GetApiKeyId returns the value of ApiKeyId.
func (s *SecretsPropertiesResilient) GetApiKeyId() string {
	return s.ApiKeyId
}

// GetApiKeySecret returns the value of ApiKeySecret.
func (s *SecretsPropertiesResilient) GetApiKeySecret() string {
	return s.ApiKeySecret
}

// SetApiKeyId sets the value of ApiKeyId.
func (s *SecretsPropertiesResilient) SetApiKeyId(val string) {
	s.ApiKeyId = val
}

// SetApiKeySecret sets the value of ApiKeySecret.
func (s *SecretsPropertiesResilient) SetApiKeySecret(val string) {
	s.ApiKeySecret = val
}

// Defines secrets for connectors when type is `.servicenow`, `.servicenow-sir`, or `.
// servicenow-itom`.
// Ref: #/components/schemas/secrets_properties_servicenow
type SecretsPropertiesServicenow struct {
	// The client secret assigned to your OAuth application. This property is required when `isOAuth` is
	// `true`.
	ClientSecret OptString `json:"clientSecret"`
	// The password for HTTP basic authentication. This property is required when `isOAuth` is `false`.
	Password OptString `json:"password"`
	// The RSA private key that you created for use in ServiceNow. This property is required when
	// `isOAuth` is `true`.
	PrivateKey OptString `json:"privateKey"`
	// The password for the RSA private key. This property is required when `isOAuth` is `true` and you
	// set a password on your private key.
	PrivateKeyPassword OptString `json:"privateKeyPassword"`
	// The username for HTTP basic authentication. This property is required when `isOAuth` is `false`.
	Username OptString `json:"username"`
}

// GetClientSecret returns the value of ClientSecret.
func (s *SecretsPropertiesServicenow) GetClientSecret() OptString {
	return s.ClientSecret
}

// GetPassword returns the value of Password.
func (s *SecretsPropertiesServicenow) GetPassword() OptString {
	return s.Password
}

// GetPrivateKey returns the value of PrivateKey.
func (s *SecretsPropertiesServicenow) GetPrivateKey() OptString {
	return s.PrivateKey
}

// GetPrivateKeyPassword returns the value of PrivateKeyPassword.
func (s *SecretsPropertiesServicenow) GetPrivateKeyPassword() OptString {
	return s.PrivateKeyPassword
}

// GetUsername returns the value of Username.
func (s *SecretsPropertiesServicenow) GetUsername() OptString {
	return s.Username
}

// SetClientSecret sets the value of ClientSecret.
func (s *SecretsPropertiesServicenow) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

// SetPassword sets the value of Password.
func (s *SecretsPropertiesServicenow) SetPassword(val OptString) {
	s.Password = val
}

// SetPrivateKey sets the value of PrivateKey.
func (s *SecretsPropertiesServicenow) SetPrivateKey(val OptString) {
	s.PrivateKey = val
}

// SetPrivateKeyPassword sets the value of PrivateKeyPassword.
func (s *SecretsPropertiesServicenow) SetPrivateKeyPassword(val OptString) {
	s.PrivateKeyPassword = val
}

// SetUsername sets the value of Username.
func (s *SecretsPropertiesServicenow) SetUsername(val OptString) {
	s.Username = val
}

// Defines secrets for connectors when type is `.slack`.
// Ref: #/components/schemas/secrets_properties_slack
type SecretsPropertiesSlack map[string]jx.Raw

func (s *SecretsPropertiesSlack) init() SecretsPropertiesSlack {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines secrets for connectors when type is `.swimlane`.
// Ref: #/components/schemas/secrets_properties_swimlane
type SecretsPropertiesSwimlane struct {
	// Swimlane API authentication token.
	ApiToken OptString `json:"apiToken"`
}

// GetApiToken returns the value of ApiToken.
func (s *SecretsPropertiesSwimlane) GetApiToken() OptString {
	return s.ApiToken
}

// SetApiToken sets the value of ApiToken.
func (s *SecretsPropertiesSwimlane) SetApiToken(val OptString) {
	s.ApiToken = val
}

// Defines secrets for connectors when type is `.teams`.
// Ref: #/components/schemas/secrets_properties_teams
type SecretsPropertiesTeams map[string]jx.Raw

func (s *SecretsPropertiesTeams) init() SecretsPropertiesTeams {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines secrets for connectors when type is `.tines`.
// Ref: #/components/schemas/secrets_properties_tines
type SecretsPropertiesTines map[string]jx.Raw

func (s *SecretsPropertiesTines) init() SecretsPropertiesTines {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines secrets for connectors when type is `.webhook`.
// Ref: #/components/schemas/secrets_properties_webhook
type SecretsPropertiesWebhook map[string]jx.Raw

func (s *SecretsPropertiesWebhook) init() SecretsPropertiesWebhook {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Defines secrets for connectors when type is `.xmatters`.
// Ref: #/components/schemas/secrets_properties_xmatters
type SecretsPropertiesXmatters map[string]jx.Raw

func (s *SecretsPropertiesXmatters) init() SecretsPropertiesXmatters {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The properties vary depending on the connector type.
// UpdateConnectorReq represents sum type.
type UpdateConnectorReq struct {
	Type                                 UpdateConnectorReqType // switch on this field
	UpdateConnectorRequestCasesWebhook   UpdateConnectorRequestCasesWebhook
	UpdateConnectorRequestIndex          UpdateConnectorRequestIndex
	UpdateConnectorRequestJira           UpdateConnectorRequestJira
	UpdateConnectorRequestOpsgenie       UpdateConnectorRequestOpsgenie
	UpdateConnectorRequestResilient      UpdateConnectorRequestResilient
	UpdateConnectorRequestServerlog      UpdateConnectorRequestServerlog
	UpdateConnectorRequestServicenow     UpdateConnectorRequestServicenow
	UpdateConnectorRequestServicenowItom UpdateConnectorRequestServicenowItom
	UpdateConnectorRequestSwimlane       UpdateConnectorRequestSwimlane
}

// UpdateConnectorReqType is oneOf type of UpdateConnectorReq.
type UpdateConnectorReqType string

// Possible values for UpdateConnectorReqType.
const (
	UpdateConnectorRequestCasesWebhookUpdateConnectorReq   UpdateConnectorReqType = "UpdateConnectorRequestCasesWebhook"
	UpdateConnectorRequestIndexUpdateConnectorReq          UpdateConnectorReqType = "UpdateConnectorRequestIndex"
	UpdateConnectorRequestJiraUpdateConnectorReq           UpdateConnectorReqType = "UpdateConnectorRequestJira"
	UpdateConnectorRequestOpsgenieUpdateConnectorReq       UpdateConnectorReqType = "UpdateConnectorRequestOpsgenie"
	UpdateConnectorRequestResilientUpdateConnectorReq      UpdateConnectorReqType = "UpdateConnectorRequestResilient"
	UpdateConnectorRequestServerlogUpdateConnectorReq      UpdateConnectorReqType = "UpdateConnectorRequestServerlog"
	UpdateConnectorRequestServicenowUpdateConnectorReq     UpdateConnectorReqType = "UpdateConnectorRequestServicenow"
	UpdateConnectorRequestServicenowItomUpdateConnectorReq UpdateConnectorReqType = "UpdateConnectorRequestServicenowItom"
	UpdateConnectorRequestSwimlaneUpdateConnectorReq       UpdateConnectorReqType = "UpdateConnectorRequestSwimlane"
)

// IsUpdateConnectorRequestCasesWebhook reports whether UpdateConnectorReq is UpdateConnectorRequestCasesWebhook.
func (s UpdateConnectorReq) IsUpdateConnectorRequestCasesWebhook() bool {
	return s.Type == UpdateConnectorRequestCasesWebhookUpdateConnectorReq
}

// IsUpdateConnectorRequestIndex reports whether UpdateConnectorReq is UpdateConnectorRequestIndex.
func (s UpdateConnectorReq) IsUpdateConnectorRequestIndex() bool {
	return s.Type == UpdateConnectorRequestIndexUpdateConnectorReq
}

// IsUpdateConnectorRequestJira reports whether UpdateConnectorReq is UpdateConnectorRequestJira.
func (s UpdateConnectorReq) IsUpdateConnectorRequestJira() bool {
	return s.Type == UpdateConnectorRequestJiraUpdateConnectorReq
}

// IsUpdateConnectorRequestOpsgenie reports whether UpdateConnectorReq is UpdateConnectorRequestOpsgenie.
func (s UpdateConnectorReq) IsUpdateConnectorRequestOpsgenie() bool {
	return s.Type == UpdateConnectorRequestOpsgenieUpdateConnectorReq
}

// IsUpdateConnectorRequestResilient reports whether UpdateConnectorReq is UpdateConnectorRequestResilient.
func (s UpdateConnectorReq) IsUpdateConnectorRequestResilient() bool {
	return s.Type == UpdateConnectorRequestResilientUpdateConnectorReq
}

// IsUpdateConnectorRequestServerlog reports whether UpdateConnectorReq is UpdateConnectorRequestServerlog.
func (s UpdateConnectorReq) IsUpdateConnectorRequestServerlog() bool {
	return s.Type == UpdateConnectorRequestServerlogUpdateConnectorReq
}

// IsUpdateConnectorRequestServicenow reports whether UpdateConnectorReq is UpdateConnectorRequestServicenow.
func (s UpdateConnectorReq) IsUpdateConnectorRequestServicenow() bool {
	return s.Type == UpdateConnectorRequestServicenowUpdateConnectorReq
}

// IsUpdateConnectorRequestServicenowItom reports whether UpdateConnectorReq is UpdateConnectorRequestServicenowItom.
func (s UpdateConnectorReq) IsUpdateConnectorRequestServicenowItom() bool {
	return s.Type == UpdateConnectorRequestServicenowItomUpdateConnectorReq
}

// IsUpdateConnectorRequestSwimlane reports whether UpdateConnectorReq is UpdateConnectorRequestSwimlane.
func (s UpdateConnectorReq) IsUpdateConnectorRequestSwimlane() bool {
	return s.Type == UpdateConnectorRequestSwimlaneUpdateConnectorReq
}

// SetUpdateConnectorRequestCasesWebhook sets UpdateConnectorReq to UpdateConnectorRequestCasesWebhook.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestCasesWebhook(v UpdateConnectorRequestCasesWebhook) {
	s.Type = UpdateConnectorRequestCasesWebhookUpdateConnectorReq
	s.UpdateConnectorRequestCasesWebhook = v
}

// GetUpdateConnectorRequestCasesWebhook returns UpdateConnectorRequestCasesWebhook and true boolean if UpdateConnectorReq is UpdateConnectorRequestCasesWebhook.
func (s UpdateConnectorReq) GetUpdateConnectorRequestCasesWebhook() (v UpdateConnectorRequestCasesWebhook, ok bool) {
	if !s.IsUpdateConnectorRequestCasesWebhook() {
		return v, false
	}
	return s.UpdateConnectorRequestCasesWebhook, true
}

// NewUpdateConnectorRequestCasesWebhookUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestCasesWebhook.
func NewUpdateConnectorRequestCasesWebhookUpdateConnectorReq(v UpdateConnectorRequestCasesWebhook) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestCasesWebhook(v)
	return s
}

// SetUpdateConnectorRequestIndex sets UpdateConnectorReq to UpdateConnectorRequestIndex.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestIndex(v UpdateConnectorRequestIndex) {
	s.Type = UpdateConnectorRequestIndexUpdateConnectorReq
	s.UpdateConnectorRequestIndex = v
}

// GetUpdateConnectorRequestIndex returns UpdateConnectorRequestIndex and true boolean if UpdateConnectorReq is UpdateConnectorRequestIndex.
func (s UpdateConnectorReq) GetUpdateConnectorRequestIndex() (v UpdateConnectorRequestIndex, ok bool) {
	if !s.IsUpdateConnectorRequestIndex() {
		return v, false
	}
	return s.UpdateConnectorRequestIndex, true
}

// NewUpdateConnectorRequestIndexUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestIndex.
func NewUpdateConnectorRequestIndexUpdateConnectorReq(v UpdateConnectorRequestIndex) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestIndex(v)
	return s
}

// SetUpdateConnectorRequestJira sets UpdateConnectorReq to UpdateConnectorRequestJira.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestJira(v UpdateConnectorRequestJira) {
	s.Type = UpdateConnectorRequestJiraUpdateConnectorReq
	s.UpdateConnectorRequestJira = v
}

// GetUpdateConnectorRequestJira returns UpdateConnectorRequestJira and true boolean if UpdateConnectorReq is UpdateConnectorRequestJira.
func (s UpdateConnectorReq) GetUpdateConnectorRequestJira() (v UpdateConnectorRequestJira, ok bool) {
	if !s.IsUpdateConnectorRequestJira() {
		return v, false
	}
	return s.UpdateConnectorRequestJira, true
}

// NewUpdateConnectorRequestJiraUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestJira.
func NewUpdateConnectorRequestJiraUpdateConnectorReq(v UpdateConnectorRequestJira) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestJira(v)
	return s
}

// SetUpdateConnectorRequestOpsgenie sets UpdateConnectorReq to UpdateConnectorRequestOpsgenie.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestOpsgenie(v UpdateConnectorRequestOpsgenie) {
	s.Type = UpdateConnectorRequestOpsgenieUpdateConnectorReq
	s.UpdateConnectorRequestOpsgenie = v
}

// GetUpdateConnectorRequestOpsgenie returns UpdateConnectorRequestOpsgenie and true boolean if UpdateConnectorReq is UpdateConnectorRequestOpsgenie.
func (s UpdateConnectorReq) GetUpdateConnectorRequestOpsgenie() (v UpdateConnectorRequestOpsgenie, ok bool) {
	if !s.IsUpdateConnectorRequestOpsgenie() {
		return v, false
	}
	return s.UpdateConnectorRequestOpsgenie, true
}

// NewUpdateConnectorRequestOpsgenieUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestOpsgenie.
func NewUpdateConnectorRequestOpsgenieUpdateConnectorReq(v UpdateConnectorRequestOpsgenie) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestOpsgenie(v)
	return s
}

// SetUpdateConnectorRequestResilient sets UpdateConnectorReq to UpdateConnectorRequestResilient.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestResilient(v UpdateConnectorRequestResilient) {
	s.Type = UpdateConnectorRequestResilientUpdateConnectorReq
	s.UpdateConnectorRequestResilient = v
}

// GetUpdateConnectorRequestResilient returns UpdateConnectorRequestResilient and true boolean if UpdateConnectorReq is UpdateConnectorRequestResilient.
func (s UpdateConnectorReq) GetUpdateConnectorRequestResilient() (v UpdateConnectorRequestResilient, ok bool) {
	if !s.IsUpdateConnectorRequestResilient() {
		return v, false
	}
	return s.UpdateConnectorRequestResilient, true
}

// NewUpdateConnectorRequestResilientUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestResilient.
func NewUpdateConnectorRequestResilientUpdateConnectorReq(v UpdateConnectorRequestResilient) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestResilient(v)
	return s
}

// SetUpdateConnectorRequestServerlog sets UpdateConnectorReq to UpdateConnectorRequestServerlog.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestServerlog(v UpdateConnectorRequestServerlog) {
	s.Type = UpdateConnectorRequestServerlogUpdateConnectorReq
	s.UpdateConnectorRequestServerlog = v
}

// GetUpdateConnectorRequestServerlog returns UpdateConnectorRequestServerlog and true boolean if UpdateConnectorReq is UpdateConnectorRequestServerlog.
func (s UpdateConnectorReq) GetUpdateConnectorRequestServerlog() (v UpdateConnectorRequestServerlog, ok bool) {
	if !s.IsUpdateConnectorRequestServerlog() {
		return v, false
	}
	return s.UpdateConnectorRequestServerlog, true
}

// NewUpdateConnectorRequestServerlogUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestServerlog.
func NewUpdateConnectorRequestServerlogUpdateConnectorReq(v UpdateConnectorRequestServerlog) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestServerlog(v)
	return s
}

// SetUpdateConnectorRequestServicenow sets UpdateConnectorReq to UpdateConnectorRequestServicenow.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestServicenow(v UpdateConnectorRequestServicenow) {
	s.Type = UpdateConnectorRequestServicenowUpdateConnectorReq
	s.UpdateConnectorRequestServicenow = v
}

// GetUpdateConnectorRequestServicenow returns UpdateConnectorRequestServicenow and true boolean if UpdateConnectorReq is UpdateConnectorRequestServicenow.
func (s UpdateConnectorReq) GetUpdateConnectorRequestServicenow() (v UpdateConnectorRequestServicenow, ok bool) {
	if !s.IsUpdateConnectorRequestServicenow() {
		return v, false
	}
	return s.UpdateConnectorRequestServicenow, true
}

// NewUpdateConnectorRequestServicenowUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestServicenow.
func NewUpdateConnectorRequestServicenowUpdateConnectorReq(v UpdateConnectorRequestServicenow) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestServicenow(v)
	return s
}

// SetUpdateConnectorRequestServicenowItom sets UpdateConnectorReq to UpdateConnectorRequestServicenowItom.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestServicenowItom(v UpdateConnectorRequestServicenowItom) {
	s.Type = UpdateConnectorRequestServicenowItomUpdateConnectorReq
	s.UpdateConnectorRequestServicenowItom = v
}

// GetUpdateConnectorRequestServicenowItom returns UpdateConnectorRequestServicenowItom and true boolean if UpdateConnectorReq is UpdateConnectorRequestServicenowItom.
func (s UpdateConnectorReq) GetUpdateConnectorRequestServicenowItom() (v UpdateConnectorRequestServicenowItom, ok bool) {
	if !s.IsUpdateConnectorRequestServicenowItom() {
		return v, false
	}
	return s.UpdateConnectorRequestServicenowItom, true
}

// NewUpdateConnectorRequestServicenowItomUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestServicenowItom.
func NewUpdateConnectorRequestServicenowItomUpdateConnectorReq(v UpdateConnectorRequestServicenowItom) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestServicenowItom(v)
	return s
}

// SetUpdateConnectorRequestSwimlane sets UpdateConnectorReq to UpdateConnectorRequestSwimlane.
func (s *UpdateConnectorReq) SetUpdateConnectorRequestSwimlane(v UpdateConnectorRequestSwimlane) {
	s.Type = UpdateConnectorRequestSwimlaneUpdateConnectorReq
	s.UpdateConnectorRequestSwimlane = v
}

// GetUpdateConnectorRequestSwimlane returns UpdateConnectorRequestSwimlane and true boolean if UpdateConnectorReq is UpdateConnectorRequestSwimlane.
func (s UpdateConnectorReq) GetUpdateConnectorRequestSwimlane() (v UpdateConnectorRequestSwimlane, ok bool) {
	if !s.IsUpdateConnectorRequestSwimlane() {
		return v, false
	}
	return s.UpdateConnectorRequestSwimlane, true
}

// NewUpdateConnectorRequestSwimlaneUpdateConnectorReq returns new UpdateConnectorReq from UpdateConnectorRequestSwimlane.
func NewUpdateConnectorRequestSwimlaneUpdateConnectorReq(v UpdateConnectorRequestSwimlane) UpdateConnectorReq {
	var s UpdateConnectorReq
	s.SetUpdateConnectorRequestSwimlane(v)
	return s
}

// Ref: #/components/schemas/update_connector_request_cases_webhook
type UpdateConnectorRequestCasesWebhook struct {
	Config ConfigPropertiesCasesWebhook `json:"config"`
	// The display name for the connector.
	Name    string                           `json:"name"`
	Secrets OptSecretsPropertiesCasesWebhook `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *UpdateConnectorRequestCasesWebhook) GetConfig() ConfigPropertiesCasesWebhook {
	return s.Config
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestCasesWebhook) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *UpdateConnectorRequestCasesWebhook) GetSecrets() OptSecretsPropertiesCasesWebhook {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *UpdateConnectorRequestCasesWebhook) SetConfig(val ConfigPropertiesCasesWebhook) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestCasesWebhook) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *UpdateConnectorRequestCasesWebhook) SetSecrets(val OptSecretsPropertiesCasesWebhook) {
	s.Secrets = val
}

// Ref: #/components/schemas/update_connector_request_index
type UpdateConnectorRequestIndex struct {
	Config ConfigPropertiesIndex `json:"config"`
	// The display name for the connector.
	Name string `json:"name"`
}

// GetConfig returns the value of Config.
func (s *UpdateConnectorRequestIndex) GetConfig() ConfigPropertiesIndex {
	return s.Config
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestIndex) GetName() string {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *UpdateConnectorRequestIndex) SetConfig(val ConfigPropertiesIndex) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestIndex) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/update_connector_request_jira
type UpdateConnectorRequestJira struct {
	Config ConfigPropertiesJira `json:"config"`
	// The display name for the connector.
	Name    string                `json:"name"`
	Secrets SecretsPropertiesJira `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *UpdateConnectorRequestJira) GetConfig() ConfigPropertiesJira {
	return s.Config
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestJira) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *UpdateConnectorRequestJira) GetSecrets() SecretsPropertiesJira {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *UpdateConnectorRequestJira) SetConfig(val ConfigPropertiesJira) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestJira) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *UpdateConnectorRequestJira) SetSecrets(val SecretsPropertiesJira) {
	s.Secrets = val
}

// Ref: #/components/schemas/update_connector_request_opsgenie
type UpdateConnectorRequestOpsgenie struct {
	Config ConfigPropertiesOpsgenie `json:"config"`
	// The display name for the connector.
	Name    string                    `json:"name"`
	Secrets SecretsPropertiesOpsgenie `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *UpdateConnectorRequestOpsgenie) GetConfig() ConfigPropertiesOpsgenie {
	return s.Config
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestOpsgenie) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *UpdateConnectorRequestOpsgenie) GetSecrets() SecretsPropertiesOpsgenie {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *UpdateConnectorRequestOpsgenie) SetConfig(val ConfigPropertiesOpsgenie) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestOpsgenie) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *UpdateConnectorRequestOpsgenie) SetSecrets(val SecretsPropertiesOpsgenie) {
	s.Secrets = val
}

// Ref: #/components/schemas/update_connector_request_resilient
type UpdateConnectorRequestResilient struct {
	Config ConfigPropertiesResilient `json:"config"`
	// The display name for the connector.
	Name    string                     `json:"name"`
	Secrets SecretsPropertiesResilient `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *UpdateConnectorRequestResilient) GetConfig() ConfigPropertiesResilient {
	return s.Config
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestResilient) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *UpdateConnectorRequestResilient) GetSecrets() SecretsPropertiesResilient {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *UpdateConnectorRequestResilient) SetConfig(val ConfigPropertiesResilient) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestResilient) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *UpdateConnectorRequestResilient) SetSecrets(val SecretsPropertiesResilient) {
	s.Secrets = val
}

// Ref: #/components/schemas/update_connector_request_serverlog
type UpdateConnectorRequestServerlog struct {
	// The display name for the connector.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestServerlog) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestServerlog) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/update_connector_request_servicenow
type UpdateConnectorRequestServicenow struct {
	Config ConfigPropertiesServicenow `json:"config"`
	// The display name for the connector.
	Name    string                      `json:"name"`
	Secrets SecretsPropertiesServicenow `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *UpdateConnectorRequestServicenow) GetConfig() ConfigPropertiesServicenow {
	return s.Config
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestServicenow) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *UpdateConnectorRequestServicenow) GetSecrets() SecretsPropertiesServicenow {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *UpdateConnectorRequestServicenow) SetConfig(val ConfigPropertiesServicenow) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestServicenow) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *UpdateConnectorRequestServicenow) SetSecrets(val SecretsPropertiesServicenow) {
	s.Secrets = val
}

// Ref: #/components/schemas/update_connector_request_servicenow_itom
type UpdateConnectorRequestServicenowItom struct {
	Config ConfigPropertiesServicenowItom `json:"config"`
	// The display name for the connector.
	Name    string                      `json:"name"`
	Secrets SecretsPropertiesServicenow `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *UpdateConnectorRequestServicenowItom) GetConfig() ConfigPropertiesServicenowItom {
	return s.Config
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestServicenowItom) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *UpdateConnectorRequestServicenowItom) GetSecrets() SecretsPropertiesServicenow {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *UpdateConnectorRequestServicenowItom) SetConfig(val ConfigPropertiesServicenowItom) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestServicenowItom) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *UpdateConnectorRequestServicenowItom) SetSecrets(val SecretsPropertiesServicenow) {
	s.Secrets = val
}

// Ref: #/components/schemas/update_connector_request_swimlane
type UpdateConnectorRequestSwimlane struct {
	Config ConfigPropertiesSwimlane `json:"config"`
	// The display name for the connector.
	Name    string                    `json:"name"`
	Secrets SecretsPropertiesSwimlane `json:"secrets"`
}

// GetConfig returns the value of Config.
func (s *UpdateConnectorRequestSwimlane) GetConfig() ConfigPropertiesSwimlane {
	return s.Config
}

// GetName returns the value of Name.
func (s *UpdateConnectorRequestSwimlane) GetName() string {
	return s.Name
}

// GetSecrets returns the value of Secrets.
func (s *UpdateConnectorRequestSwimlane) GetSecrets() SecretsPropertiesSwimlane {
	return s.Secrets
}

// SetConfig sets the value of Config.
func (s *UpdateConnectorRequestSwimlane) SetConfig(val ConfigPropertiesSwimlane) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *UpdateConnectorRequestSwimlane) SetName(val string) {
	s.Name = val
}

// SetSecrets sets the value of Secrets.
func (s *UpdateConnectorRequestSwimlane) SetSecrets(val SecretsPropertiesSwimlane) {
	s.Secrets = val
}
