// Code generated by ogen, DO NOT EDIT.

package connectors

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/s/"
			if l := len("/s/"); len(elem) >= l && elem[0:l] == "/s/" {
				elem = elem[l:]
			} else {
				break
			}

			// Param: "spaceId"
			// Match until "/"
			idx := strings.IndexByte(elem, '/')
			if idx < 0 {
				idx = len(elem)
			}
			args[0] = elem[:idx]
			elem = elem[idx:]

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '/': // Prefix: "/api/actions"
				if l := len("/api/actions"); len(elem) >= l && elem[0:l] == "/api/actions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleLegacyGetConnectorsRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					case "POST":
						s.handleLegacyCreateConnectorRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "action/"
						if l := len("action/"); len(elem) >= l && elem[0:l] == "action/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "actionId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleLegacyDeleteConnectorRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleLegacyGetConnectorRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleLegacyUpdateConnectorRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/_execute"
							if l := len("/_execute"); len(elem) >= l && elem[0:l] == "/_execute" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleLegacyRunConnectorRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'c': // Prefix: "connector"
						if l := len("connector"); len(elem) >= l && elem[0:l] == "connector" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleCreateConnectorRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "connectorId"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteConnectorRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetConnectorRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateConnectorRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}
						case '_': // Prefix: "_types"
							if l := len("_types"); len(elem) >= l && elem[0:l] == "_types" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetConnectorTypesRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetConnectorsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					case 'l': // Prefix: "list_action_types"
						if l := len("list_action_types"); len(elem) >= l && elem[0:l] == "list_action_types" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleLegacyGetConnectorTypesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/s/"
			if l := len("/s/"); len(elem) >= l && elem[0:l] == "/s/" {
				elem = elem[l:]
			} else {
				break
			}

			// Param: "spaceId"
			// Match until "/"
			idx := strings.IndexByte(elem, '/')
			if idx < 0 {
				idx = len(elem)
			}
			args[0] = elem[:idx]
			elem = elem[idx:]

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '/': // Prefix: "/api/actions"
				if l := len("/api/actions"); len(elem) >= l && elem[0:l] == "/api/actions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "LegacyGetConnectors"
						r.operationID = "legacyGetConnectors"
						r.pathPattern = "/s/{spaceId}/api/actions"
						r.args = args
						r.count = 1
						return r, true
					case "POST":
						r.name = "LegacyCreateConnector"
						r.operationID = "legacyCreateConnector"
						r.pathPattern = "/s/{spaceId}/api/actions"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "action/"
						if l := len("action/"); len(elem) >= l && elem[0:l] == "action/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "actionId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "LegacyDeleteConnector"
								r.operationID = "legacyDeleteConnector"
								r.pathPattern = "/s/{spaceId}/api/actions/action/{actionId}"
								r.args = args
								r.count = 2
								return r, true
							case "GET":
								r.name = "LegacyGetConnector"
								r.operationID = "legacyGetConnector"
								r.pathPattern = "/s/{spaceId}/api/actions/action/{actionId}"
								r.args = args
								r.count = 2
								return r, true
							case "PUT":
								r.name = "LegacyUpdateConnector"
								r.operationID = "legacyUpdateConnector"
								r.pathPattern = "/s/{spaceId}/api/actions/action/{actionId}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/_execute"
							if l := len("/_execute"); len(elem) >= l && elem[0:l] == "/_execute" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: LegacyRunConnector
									r.name = "LegacyRunConnector"
									r.operationID = "legacyRunConnector"
									r.pathPattern = "/s/{spaceId}/api/actions/action/{actionId}/_execute"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
						}
					case 'c': // Prefix: "connector"
						if l := len("connector"); len(elem) >= l && elem[0:l] == "connector" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "CreateConnector"
								r.operationID = "createConnector"
								r.pathPattern = "/s/{spaceId}/api/actions/connector"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "connectorId"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									// Leaf: DeleteConnector
									r.name = "DeleteConnector"
									r.operationID = "deleteConnector"
									r.pathPattern = "/s/{spaceId}/api/actions/connector/{connectorId}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									// Leaf: GetConnector
									r.name = "GetConnector"
									r.operationID = "getConnector"
									r.pathPattern = "/s/{spaceId}/api/actions/connector/{connectorId}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									// Leaf: UpdateConnector
									r.name = "UpdateConnector"
									r.operationID = "updateConnector"
									r.pathPattern = "/s/{spaceId}/api/actions/connector/{connectorId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
						case '_': // Prefix: "_types"
							if l := len("_types"); len(elem) >= l && elem[0:l] == "_types" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: GetConnectorTypes
									r.name = "GetConnectorTypes"
									r.operationID = "getConnectorTypes"
									r.pathPattern = "/s/{spaceId}/api/actions/connector_types"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: GetConnectors
									r.name = "GetConnectors"
									r.operationID = "getConnectors"
									r.pathPattern = "/s/{spaceId}/api/actions/connectors"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					case 'l': // Prefix: "list_action_types"
						if l := len("list_action_types"); len(elem) >= l && elem[0:l] == "list_action_types" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: LegacyGetConnectorTypes
								r.name = "LegacyGetConnectorTypes"
								r.operationID = "legacyGetConnectorTypes"
								r.pathPattern = "/s/{spaceId}/api/actions/list_action_types"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
