// Code generated by ogen, DO NOT EDIT.

package connectors

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *ConfigPropertiesCasesWebhook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CreateCommentMethod.Set {
			if err := func() error {
				if err := s.CreateCommentMethod.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "createCommentMethod",
			Error: err,
		})
	}
	if err := func() error {
		if s.CreateIncidentMethod.Set {
			if err := func() error {
				if err := s.CreateIncidentMethod.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "createIncidentMethod",
			Error: err,
		})
	}
	if err := func() error {
		if s.UpdateIncidentMethod.Set {
			if err := func() error {
				if err := s.UpdateIncidentMethod.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "updateIncidentMethod",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ConfigPropertiesCasesWebhookCreateCommentMethod) Validate() error {
	switch s {
	case "patch":
		return nil
	case "post":
		return nil
	case "put":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConfigPropertiesCasesWebhookCreateIncidentMethod) Validate() error {
	switch s {
	case "patch":
		return nil
	case "post":
		return nil
	case "put":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConfigPropertiesCasesWebhookUpdateIncidentMethod) Validate() error {
	switch s {
	case "patch":
		return nil
	case "post":
		return nil
	case "put":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *ConfigPropertiesSwimlane) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ConnectorType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connectorType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ConfigPropertiesSwimlaneConnectorType) Validate() error {
	switch s {
	case "all":
		return nil
	case "alerts":
		return nil
	case "cases":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponseProperties) Validate() error {
	switch s.Type {
	case ConnectorResponsePropertiesCasesWebhookConnectorResponseProperties:
		if err := s.ConnectorResponsePropertiesCasesWebhook.Validate(); err != nil {
			return err
		}
		return nil
	case ConnectorResponsePropertiesEmailConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesIndexConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesJiraConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesOpsgenieConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesPagerdutyConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesResilientConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesServerlogConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesServicenowConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesServicenowItomConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesServicenowSirConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesSlackConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesSwimlaneConnectorResponseProperties:
		if err := s.ConnectorResponsePropertiesSwimlane.Validate(); err != nil {
			return err
		}
		return nil
	case ConnectorResponsePropertiesTeamsConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesTinesConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesWebhookConnectorResponseProperties:
		return nil // no validation needed
	case ConnectorResponsePropertiesXmattersConnectorResponseProperties:
		return nil // no validation needed
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *ConnectorResponsePropertiesCasesWebhook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Config.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ConnectorResponsePropertiesCasesWebhookConnectorTypeID) Validate() error {
	switch s {
	case ".cases-webhook":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesEmailConnectorTypeID) Validate() error {
	switch s {
	case ".email":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesIndexConnectorTypeID) Validate() error {
	switch s {
	case ".index":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesJiraConnectorTypeID) Validate() error {
	switch s {
	case ".jira":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesOpsgenieConnectorTypeID) Validate() error {
	switch s {
	case ".opsgenie":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesPagerdutyConnectorTypeID) Validate() error {
	switch s {
	case ".pagerduty":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesResilientConnectorTypeID) Validate() error {
	switch s {
	case ".resilient":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesServerlogConnectorTypeID) Validate() error {
	switch s {
	case ".server-log":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesServicenowConnectorTypeID) Validate() error {
	switch s {
	case ".servicenow":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesServicenowItomConnectorTypeID) Validate() error {
	switch s {
	case ".servicenow-itom":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesServicenowSirConnectorTypeID) Validate() error {
	switch s {
	case ".servicenow-sir":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesSlackConnectorTypeID) Validate() error {
	switch s {
	case ".slack":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *ConnectorResponsePropertiesSwimlane) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Config.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ConnectorResponsePropertiesSwimlaneConnectorTypeID) Validate() error {
	switch s {
	case ".swimlane":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesTeamsConnectorTypeID) Validate() error {
	switch s {
	case ".teams":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesTinesConnectorTypeID) Validate() error {
	switch s {
	case ".tines":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesWebhookConnectorTypeID) Validate() error {
	switch s {
	case ".webhook":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorResponsePropertiesXmattersConnectorTypeID) Validate() error {
	switch s {
	case ".xmatters":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ConnectorTypes) Validate() error {
	switch s {
	case ".cases-webhook":
		return nil
	case ".email":
		return nil
	case ".index":
		return nil
	case ".jira":
		return nil
	case ".opsgenie":
		return nil
	case ".pagerduty":
		return nil
	case ".resilient":
		return nil
	case ".servicenow":
		return nil
	case ".servicenow-itom":
		return nil
	case ".servicenow-sir":
		return nil
	case ".server-log":
		return nil
	case ".slack":
		return nil
	case ".swimlane":
		return nil
	case ".teams":
		return nil
	case ".tines":
		return nil
	case ".webhook":
		return nil
	case ".xmatters":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorReq) Validate() error {
	switch s.Type {
	case CreateConnectorRequestCasesWebhookCreateConnectorReq:
		if err := s.CreateConnectorRequestCasesWebhook.Validate(); err != nil {
			return err
		}
		return nil
	case CreateConnectorRequestEmailCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestIndexCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestJiraCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestOpsgenieCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestPagerdutyCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestResilientCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestServerlogCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestServicenowCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestServicenowItomCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestServicenowSirCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestSlackCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestSwimlaneCreateConnectorReq:
		if err := s.CreateConnectorRequestSwimlane.Validate(); err != nil {
			return err
		}
		return nil
	case CreateConnectorRequestTeamsCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestTinesCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestWebhookCreateConnectorReq:
		return nil // no validation needed
	case CreateConnectorRequestXmattersCreateConnectorReq:
		return nil // no validation needed
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *CreateConnectorRequestCasesWebhook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Config.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateConnectorRequestCasesWebhookConnectorTypeID) Validate() error {
	switch s {
	case ".cases-webhook":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestEmailConnectorTypeID) Validate() error {
	switch s {
	case ".email":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestIndexConnectorTypeID) Validate() error {
	switch s {
	case ".index":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestJiraConnectorTypeID) Validate() error {
	switch s {
	case ".jira":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestOpsgenieConnectorTypeID) Validate() error {
	switch s {
	case ".opsgenie":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestPagerdutyConnectorTypeID) Validate() error {
	switch s {
	case ".pagerduty":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestResilientConnectorTypeID) Validate() error {
	switch s {
	case ".resilient":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestServerlogConnectorTypeID) Validate() error {
	switch s {
	case ".server-log":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestServicenowConnectorTypeID) Validate() error {
	switch s {
	case ".servicenow":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestServicenowItomConnectorTypeID) Validate() error {
	switch s {
	case ".servicenow-itom":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestServicenowSirConnectorTypeID) Validate() error {
	switch s {
	case ".servicenow-sir":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestSlackConnectorTypeID) Validate() error {
	switch s {
	case ".slack":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *CreateConnectorRequestSwimlane) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Config.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateConnectorRequestSwimlaneConnectorTypeID) Validate() error {
	switch s {
	case ".swimlane":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestTeamsConnectorTypeID) Validate() error {
	switch s {
	case ".teams":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestTinesConnectorTypeID) Validate() error {
	switch s {
	case ".tines":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestWebhookConnectorTypeID) Validate() error {
	switch s {
	case ".webhook":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateConnectorRequestXmattersConnectorTypeID) Validate() error {
	switch s {
	case ".xmatters":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Features) Validate() error {
	switch s {
	case "alerting":
		return nil
	case "cases":
		return nil
	case "uptime":
		return nil
	case "siem":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s GetConnectorTypesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetConnectorTypesOKItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ID.Set {
			if err := func() error {
				if err := s.ID.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SupportedFeatureIds {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "supported_feature_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetConnectorsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetConnectorsOKItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ConnectorTypeID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connector_type_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s LegacyGetConnectorTypesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s LegacyGetConnectorsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s *LegacyRunConnectorOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Data.Set {
			if err := func() error {
				if err := s.Data.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s LegacyRunConnectorOKData) Validate() error {
	switch s.Type {
	case LegacyRunConnectorOKData0LegacyRunConnectorOKData:
		return nil // no validation needed
	case LegacyRunConnectorOKData1ItemArrayLegacyRunConnectorOKData:
		if s.LegacyRunConnectorOKData1ItemArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *R400) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if err := func() error {
		if s.StatusCode.Set {
			if err := func() error {
				if err := s.StatusCode.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "statusCode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s R400Error) Validate() error {
	switch s {
	case "Bad Request":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s R400StatusCode) Validate() error {
	switch s {
	case 400:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *R401) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if err := func() error {
		if s.StatusCode.Set {
			if err := func() error {
				if err := s.StatusCode.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "statusCode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s R401Error) Validate() error {
	switch s {
	case "Unauthorized":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s R401StatusCode) Validate() error {
	switch s {
	case 401:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *R404) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if err := func() error {
		if s.StatusCode.Set {
			if err := func() error {
				if err := s.StatusCode.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "statusCode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s R404Error) Validate() error {
	switch s {
	case "Not Found":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s R404StatusCode) Validate() error {
	switch s {
	case 404:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UpdateConnectorReq) Validate() error {
	switch s.Type {
	case UpdateConnectorRequestCasesWebhookUpdateConnectorReq:
		if err := s.UpdateConnectorRequestCasesWebhook.Validate(); err != nil {
			return err
		}
		return nil
	case UpdateConnectorRequestIndexUpdateConnectorReq:
		return nil // no validation needed
	case UpdateConnectorRequestJiraUpdateConnectorReq:
		return nil // no validation needed
	case UpdateConnectorRequestOpsgenieUpdateConnectorReq:
		return nil // no validation needed
	case UpdateConnectorRequestResilientUpdateConnectorReq:
		return nil // no validation needed
	case UpdateConnectorRequestServerlogUpdateConnectorReq:
		return nil // no validation needed
	case UpdateConnectorRequestServicenowUpdateConnectorReq:
		return nil // no validation needed
	case UpdateConnectorRequestServicenowItomUpdateConnectorReq:
		return nil // no validation needed
	case UpdateConnectorRequestSwimlaneUpdateConnectorReq:
		if err := s.UpdateConnectorRequestSwimlane.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *UpdateConnectorRequestCasesWebhook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Config.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *UpdateConnectorRequestSwimlane) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Config.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
