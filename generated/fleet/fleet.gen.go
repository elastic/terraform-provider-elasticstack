// Package fleet provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package fleet

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for AgentPolicyMonitoringEnabled.
const (
	AgentPolicyMonitoringEnabledLogs    AgentPolicyMonitoringEnabled = "logs"
	AgentPolicyMonitoringEnabledMetrics AgentPolicyMonitoringEnabled = "metrics"
)

// Defines values for AgentPolicyCreateRequestMonitoringEnabled.
const (
	AgentPolicyCreateRequestMonitoringEnabledLogs    AgentPolicyCreateRequestMonitoringEnabled = "logs"
	AgentPolicyCreateRequestMonitoringEnabledMetrics AgentPolicyCreateRequestMonitoringEnabled = "metrics"
)

// Defines values for AgentPolicyUpdateRequestMonitoringEnabled.
const (
	Logs    AgentPolicyUpdateRequestMonitoringEnabled = "logs"
	Metrics AgentPolicyUpdateRequestMonitoringEnabled = "metrics"
)

// Defines values for ElasticsearchAssetType.
const (
	ComponentTemplate   ElasticsearchAssetType = "component_template"
	DataStreamIlmPolicy ElasticsearchAssetType = "data_stream_ilm_policy"
	IlmPolicy           ElasticsearchAssetType = "ilm_policy"
	IndexTemplate       ElasticsearchAssetType = "index_template"
	IngestPipeline      ElasticsearchAssetType = "ingest_pipeline"
	Transform           ElasticsearchAssetType = "transform"
)

// Defines values for KibanaSavedObjectType.
const (
	CspRuleTemplate KibanaSavedObjectType = "csp_rule_template"
	Dashboard       KibanaSavedObjectType = "dashboard"
	IndexPattern    KibanaSavedObjectType = "index-pattern"
	Lens            KibanaSavedObjectType = "lens"
	Map             KibanaSavedObjectType = "map"
	MlModule        KibanaSavedObjectType = "ml-module"
	Search          KibanaSavedObjectType = "search"
	SecurityRule    KibanaSavedObjectType = "security-rule"
	Visualization   KibanaSavedObjectType = "visualization"
)

// Defines values for OutputCreateRequestElasticsearchType.
const (
	OutputCreateRequestElasticsearchTypeElasticsearch OutputCreateRequestElasticsearchType = "elasticsearch"
)

// Defines values for OutputCreateRequestKafkaConnectionType.
const (
	OutputCreateRequestKafkaConnectionTypeEncryption OutputCreateRequestKafkaConnectionType = "encryption"
	OutputCreateRequestKafkaConnectionTypePlaintext  OutputCreateRequestKafkaConnectionType = "plaintext"
)

// Defines values for OutputCreateRequestKafkaSslVerificationMode.
const (
	OutputCreateRequestKafkaSslVerificationModeCertificate OutputCreateRequestKafkaSslVerificationMode = "certificate"
	OutputCreateRequestKafkaSslVerificationModeFull        OutputCreateRequestKafkaSslVerificationMode = "full"
	OutputCreateRequestKafkaSslVerificationModeNone        OutputCreateRequestKafkaSslVerificationMode = "none"
	OutputCreateRequestKafkaSslVerificationModeStrict      OutputCreateRequestKafkaSslVerificationMode = "strict"
)

// Defines values for OutputCreateRequestKafkaType.
const (
	OutputCreateRequestKafkaTypeKafka OutputCreateRequestKafkaType = "kafka"
)

// Defines values for OutputCreateRequestLogstashType.
const (
	OutputCreateRequestLogstashTypeLogstash OutputCreateRequestLogstashType = "logstash"
)

// Defines values for OutputUpdateRequestElasticsearchType.
const (
	OutputUpdateRequestElasticsearchTypeElasticsearch OutputUpdateRequestElasticsearchType = "elasticsearch"
)

// Defines values for OutputUpdateRequestKafkaConnectionType.
const (
	OutputUpdateRequestKafkaConnectionTypeEncryption OutputUpdateRequestKafkaConnectionType = "encryption"
	OutputUpdateRequestKafkaConnectionTypePlaintext  OutputUpdateRequestKafkaConnectionType = "plaintext"
)

// Defines values for OutputUpdateRequestKafkaSslVerificationMode.
const (
	OutputUpdateRequestKafkaSslVerificationModeCertificate OutputUpdateRequestKafkaSslVerificationMode = "certificate"
	OutputUpdateRequestKafkaSslVerificationModeFull        OutputUpdateRequestKafkaSslVerificationMode = "full"
	OutputUpdateRequestKafkaSslVerificationModeNone        OutputUpdateRequestKafkaSslVerificationMode = "none"
	OutputUpdateRequestKafkaSslVerificationModeStrict      OutputUpdateRequestKafkaSslVerificationMode = "strict"
)

// Defines values for OutputUpdateRequestKafkaType.
const (
	OutputUpdateRequestKafkaTypeKafka OutputUpdateRequestKafkaType = "kafka"
)

// Defines values for OutputUpdateRequestLogstashType.
const (
	OutputUpdateRequestLogstashTypeLogstash OutputUpdateRequestLogstashType = "logstash"
)

// Defines values for PackageInfoConditionsElasticsearchSubscription.
const (
	Basic      PackageInfoConditionsElasticsearchSubscription = "basic"
	Enterprise PackageInfoConditionsElasticsearchSubscription = "enterprise"
	Gold       PackageInfoConditionsElasticsearchSubscription = "gold"
	Platinum   PackageInfoConditionsElasticsearchSubscription = "platinum"
)

// Defines values for PackageInfoRelease.
const (
	Beta         PackageInfoRelease = "beta"
	Experimental PackageInfoRelease = "experimental"
	Ga           PackageInfoRelease = "ga"
)

// Defines values for PackageInfoSourceLicense.
const (
	Apache20  PackageInfoSourceLicense = "Apache-2.0"
	Elastic20 PackageInfoSourceLicense = "Elastic-2.0"
)

// Defines values for PackageInstallSource.
const (
	Bundled  PackageInstallSource = "bundled"
	Registry PackageInstallSource = "registry"
	Upload   PackageInstallSource = "upload"
)

// Defines values for PackageStatus.
const (
	InstallFailed PackageStatus = "install_failed"
	Installed     PackageStatus = "installed"
	Installing    PackageStatus = "installing"
	NotInstalled  PackageStatus = "not_installed"
)

// Defines values for Format.
const (
	FormatLegacy     Format = "legacy"
	FormatSimplified Format = "simplified"
)

// Defines values for CreatePackagePolicyParamsFormat.
const (
	CreatePackagePolicyParamsFormatLegacy     CreatePackagePolicyParamsFormat = "legacy"
	CreatePackagePolicyParamsFormatSimplified CreatePackagePolicyParamsFormat = "simplified"
)

// Defines values for GetPackagePolicyParamsFormat.
const (
	GetPackagePolicyParamsFormatLegacy     GetPackagePolicyParamsFormat = "legacy"
	GetPackagePolicyParamsFormatSimplified GetPackagePolicyParamsFormat = "simplified"
)

// Defines values for UpdatePackagePolicyParamsFormat.
const (
	UpdatePackagePolicyParamsFormatLegacy     UpdatePackagePolicyParamsFormat = "legacy"
	UpdatePackagePolicyParamsFormatSimplified UpdatePackagePolicyParamsFormat = "simplified"
)

// AgentPolicy defines model for agent_policy.
type AgentPolicy struct {
	AgentFeatures *[]struct {
		Enabled bool   `json:"enabled"`
		Name    string `json:"name"`
	} `json:"agent_features,omitempty"`
	Agents            *float32 `json:"agents,omitempty"`
	DataOutputId      *string  `json:"data_output_id"`
	Description       *string  `json:"description,omitempty"`
	DownloadSourceId  *string  `json:"download_source_id"`
	FleetServerHostId *string  `json:"fleet_server_host_id"`
	Id                string   `json:"id"`
	InactivityTimeout *float32 `json:"inactivity_timeout,omitempty"`

	// IsProtected Indicates whether the agent policy has tamper protection enabled. Default false.
	IsProtected        *bool                           `json:"is_protected,omitempty"`
	MonitoringEnabled  *[]AgentPolicyMonitoringEnabled `json:"monitoring_enabled,omitempty"`
	MonitoringOutputId *string                         `json:"monitoring_output_id"`
	Name               string                          `json:"name"`
	Namespace          string                          `json:"namespace"`

	// Overrides Override settings that are defined in the agent policy. Input settings cannot be overridden. The override option should be used only in unusual circumstances and not as a routine procedure.
	Overrides       *map[string]interface{} `json:"overrides"`
	Revision        *float32                `json:"revision,omitempty"`
	UnenrollTimeout *float32                `json:"unenroll_timeout,omitempty"`
	UpdatedBy       *string                 `json:"updated_by,omitempty"`
	UpdatedOn       *time.Time              `json:"updated_on,omitempty"`
}

// AgentPolicyMonitoringEnabled defines model for AgentPolicy.MonitoringEnabled.
type AgentPolicyMonitoringEnabled string

// AgentPolicyCreateRequest defines model for agent_policy_create_request.
type AgentPolicyCreateRequest struct {
	AgentFeatures *[]struct {
		Enabled bool   `json:"enabled"`
		Name    string `json:"name"`
	} `json:"agent_features,omitempty"`
	DataOutputId       *string                                      `json:"data_output_id"`
	Description        *string                                      `json:"description,omitempty"`
	DownloadSourceId   *string                                      `json:"download_source_id"`
	FleetServerHostId  *string                                      `json:"fleet_server_host_id"`
	Id                 *string                                      `json:"id,omitempty"`
	InactivityTimeout  *float32                                     `json:"inactivity_timeout,omitempty"`
	IsProtected        *bool                                        `json:"is_protected,omitempty"`
	MonitoringEnabled  *[]AgentPolicyCreateRequestMonitoringEnabled `json:"monitoring_enabled,omitempty"`
	MonitoringOutputId *string                                      `json:"monitoring_output_id"`
	Name               string                                       `json:"name"`
	Namespace          string                                       `json:"namespace"`
	UnenrollTimeout    *float32                                     `json:"unenroll_timeout,omitempty"`
}

// AgentPolicyCreateRequestMonitoringEnabled defines model for AgentPolicyCreateRequest.MonitoringEnabled.
type AgentPolicyCreateRequestMonitoringEnabled string

// AgentPolicyUpdateRequest defines model for agent_policy_update_request.
type AgentPolicyUpdateRequest struct {
	AgentFeatures *[]struct {
		Enabled bool   `json:"enabled"`
		Name    string `json:"name"`
	} `json:"agent_features,omitempty"`
	DataOutputId       *string                                      `json:"data_output_id"`
	Description        *string                                      `json:"description,omitempty"`
	DownloadSourceId   *string                                      `json:"download_source_id"`
	FleetServerHostId  *string                                      `json:"fleet_server_host_id"`
	InactivityTimeout  *float32                                     `json:"inactivity_timeout,omitempty"`
	IsProtected        *bool                                        `json:"is_protected,omitempty"`
	MonitoringEnabled  *[]AgentPolicyUpdateRequestMonitoringEnabled `json:"monitoring_enabled,omitempty"`
	MonitoringOutputId *string                                      `json:"monitoring_output_id"`
	Name               string                                       `json:"name"`
	Namespace          string                                       `json:"namespace"`
	UnenrollTimeout    *float32                                     `json:"unenroll_timeout,omitempty"`
}

// AgentPolicyUpdateRequestMonitoringEnabled defines model for AgentPolicyUpdateRequest.MonitoringEnabled.
type AgentPolicyUpdateRequestMonitoringEnabled string

// ElasticsearchAssetType defines model for elasticsearch_asset_type.
type ElasticsearchAssetType string

// EnrollmentApiKey defines model for enrollment_api_key.
type EnrollmentApiKey struct {
	Active    bool    `json:"active"`
	ApiKey    string  `json:"api_key"`
	ApiKeyId  string  `json:"api_key_id"`
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	Name      *string `json:"name,omitempty"`
	PolicyId  *string `json:"policy_id,omitempty"`
}

// FleetServerHost defines model for fleet_server_host.
type FleetServerHost struct {
	HostUrls        []string `json:"host_urls"`
	Id              string   `json:"id"`
	IsDefault       bool     `json:"is_default"`
	IsPreconfigured bool     `json:"is_preconfigured"`
	Name            *string  `json:"name,omitempty"`
}

// KibanaSavedObjectType defines model for kibana_saved_object_type.
type KibanaSavedObjectType string

// NewPackagePolicy defines model for new_package_policy.
type NewPackagePolicy struct {
	Description *string                       `json:"description,omitempty"`
	Enabled     *bool                         `json:"enabled,omitempty"`
	Inputs      map[string]PackagePolicyInput `json:"inputs"`
	Name        string                        `json:"name"`
	Namespace   *string                       `json:"namespace,omitempty"`
	// Deprecated:
	OutputId *string                   `json:"output_id,omitempty"`
	Package  *PackagePolicyPackageInfo `json:"package,omitempty"`
	PolicyId *string                   `json:"policy_id,omitempty"`
	Vars     *map[string]interface{}   `json:"vars,omitempty"`
}

// OutputCreateRequest defines model for output_create_request.
type OutputCreateRequest struct {
	union json.RawMessage
}

// OutputCreateRequestElasticsearch defines model for output_create_request_elasticsearch.
type OutputCreateRequestElasticsearch struct {
	CaSha256             *string                 `json:"ca_sha256,omitempty"`
	CaTrustedFingerprint *string                 `json:"ca_trusted_fingerprint,omitempty"`
	Config               *map[string]interface{} `json:"config,omitempty"`
	ConfigYaml           *string                 `json:"config_yaml,omitempty"`
	Hosts                *[]string               `json:"hosts,omitempty"`
	Id                   *string                 `json:"id,omitempty"`
	IsDefault            *bool                   `json:"is_default,omitempty"`
	IsDefaultMonitoring  *bool                   `json:"is_default_monitoring,omitempty"`
	Name                 string                  `json:"name"`
	ProxyId              *string                 `json:"proxy_id,omitempty"`
	Shipper              *struct {
		CompressionLevel            *float32 `json:"compression_level,omitempty"`
		DiskQueueCompressionEnabled *bool    `json:"disk_queue_compression_enabled,omitempty"`
		DiskQueueEnabled            *bool    `json:"disk_queue_enabled,omitempty"`
		DiskQueueEncryptionEnabled  *bool    `json:"disk_queue_encryption_enabled,omitempty"`
		DiskQueueMaxSize            *float32 `json:"disk_queue_max_size,omitempty"`
		DiskQueuePath               *string  `json:"disk_queue_path,omitempty"`
		Loadbalance                 *bool    `json:"loadbalance,omitempty"`
	} `json:"shipper,omitempty"`
	Ssl *struct {
		Certificate            *string   `json:"certificate,omitempty"`
		CertificateAuthorities *[]string `json:"certificate_authorities,omitempty"`
		Key                    *string   `json:"key,omitempty"`
	} `json:"ssl,omitempty"`
	Type OutputCreateRequestElasticsearchType `json:"type"`
}

// OutputCreateRequestElasticsearchType defines model for OutputCreateRequestElasticsearch.Type.
type OutputCreateRequestElasticsearchType string

// OutputCreateRequestKafka defines model for output_create_request_kafka.
type OutputCreateRequestKafka struct {
	AuthType             string                                  `json:"auth_type"`
	BrokerTimeout        *float32                                `json:"broker_timeout,omitempty"`
	CaSha256             *string                                 `json:"ca_sha256,omitempty"`
	CaTrustedFingerprint *string                                 `json:"ca_trusted_fingerprint,omitempty"`
	ClientId             *string                                 `json:"client_id,omitempty"`
	Compression          *string                                 `json:"compression,omitempty"`
	CompressionLevel     *float32                                `json:"compression_level,omitempty"`
	Config               *map[string]interface{}                 `json:"config,omitempty"`
	ConfigYaml           *string                                 `json:"config_yaml,omitempty"`
	ConnectionType       *OutputCreateRequestKafkaConnectionType `json:"connection_type,omitempty"`
	Headers              *[]struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"headers,omitempty"`
	Hosts               []string `json:"hosts"`
	Id                  *string  `json:"id,omitempty"`
	IsDefault           *bool    `json:"is_default,omitempty"`
	IsDefaultMonitoring *bool    `json:"is_default_monitoring,omitempty"`
	Key                 *string  `json:"key,omitempty"`
	Name                string   `json:"name"`
	Partition           *string  `json:"partition,omitempty"`
	Password            *string  `json:"password,omitempty"`
	ProxyId             *string  `json:"proxy_id,omitempty"`
	Random              *struct {
		GroupEvents *float32 `json:"group_events,omitempty"`
	} `json:"random,omitempty"`
	RequiredAcks *float32 `json:"required_acks,omitempty"`
	RoundRobin   *struct {
		GroupEvents *float32 `json:"group_events,omitempty"`
	} `json:"round_robin,omitempty"`
	Sasl *struct {
		Mechanism *string `json:"mechanism,omitempty"`
	} `json:"sasl,omitempty"`
	Shipper *struct {
		CompressionLevel            *float32 `json:"compression_level,omitempty"`
		DiskQueueCompressionEnabled *bool    `json:"disk_queue_compression_enabled,omitempty"`
		DiskQueueEnabled            *bool    `json:"disk_queue_enabled,omitempty"`
		DiskQueueEncryptionEnabled  *bool    `json:"disk_queue_encryption_enabled,omitempty"`
		DiskQueueMaxSize            *float32 `json:"disk_queue_max_size,omitempty"`
		DiskQueuePath               *string  `json:"disk_queue_path,omitempty"`
		Loadbalance                 *bool    `json:"loadbalance,omitempty"`
	} `json:"shipper,omitempty"`
	Ssl *struct {
		Certificate            *string                                      `json:"certificate,omitempty"`
		CertificateAuthorities *[]string                                    `json:"certificate_authorities,omitempty"`
		Key                    *string                                      `json:"key,omitempty"`
		VerificationMode       *OutputCreateRequestKafkaSslVerificationMode `json:"verification_mode,omitempty"`
	} `json:"ssl,omitempty"`
	Timeout *float32 `json:"timeout,omitempty"`
	Topics  []struct {
		Topic *string `json:"topic,omitempty"`
		When  *struct {
			Condition *string `json:"condition,omitempty"`
			Type      *string `json:"type,omitempty"`
		} `json:"when,omitempty"`
	} `json:"topics"`
	Type     OutputCreateRequestKafkaType `json:"type"`
	Username *string                      `json:"username,omitempty"`
	Version  *string                      `json:"version,omitempty"`
}

// OutputCreateRequestKafkaConnectionType defines model for OutputCreateRequestKafka.ConnectionType.
type OutputCreateRequestKafkaConnectionType string

// OutputCreateRequestKafkaSslVerificationMode defines model for OutputCreateRequestKafka.Ssl.VerificationMode.
type OutputCreateRequestKafkaSslVerificationMode string

// OutputCreateRequestKafkaType defines model for OutputCreateRequestKafka.Type.
type OutputCreateRequestKafkaType string

// OutputCreateRequestLogstash defines model for output_create_request_logstash.
type OutputCreateRequestLogstash struct {
	CaSha256             *string                 `json:"ca_sha256,omitempty"`
	CaTrustedFingerprint *string                 `json:"ca_trusted_fingerprint,omitempty"`
	Config               *map[string]interface{} `json:"config,omitempty"`
	ConfigYaml           *string                 `json:"config_yaml,omitempty"`
	Hosts                []string                `json:"hosts"`
	Id                   *string                 `json:"id,omitempty"`
	IsDefault            *bool                   `json:"is_default,omitempty"`
	IsDefaultMonitoring  *bool                   `json:"is_default_monitoring,omitempty"`
	Name                 string                  `json:"name"`
	ProxyId              *string                 `json:"proxy_id,omitempty"`
	Shipper              *struct {
		CompressionLevel            *float32 `json:"compression_level,omitempty"`
		DiskQueueCompressionEnabled *bool    `json:"disk_queue_compression_enabled,omitempty"`
		DiskQueueEnabled            *bool    `json:"disk_queue_enabled,omitempty"`
		DiskQueueEncryptionEnabled  *bool    `json:"disk_queue_encryption_enabled,omitempty"`
		DiskQueueMaxSize            *float32 `json:"disk_queue_max_size,omitempty"`
		DiskQueuePath               *string  `json:"disk_queue_path,omitempty"`
		Loadbalance                 *bool    `json:"loadbalance,omitempty"`
	} `json:"shipper,omitempty"`
	Ssl *struct {
		Certificate            *string   `json:"certificate,omitempty"`
		CertificateAuthorities *[]string `json:"certificate_authorities,omitempty"`
		Key                    *string   `json:"key,omitempty"`
	} `json:"ssl,omitempty"`
	Type OutputCreateRequestLogstashType `json:"type"`
}

// OutputCreateRequestLogstashType defines model for OutputCreateRequestLogstash.Type.
type OutputCreateRequestLogstashType string

// OutputUpdateRequest defines model for output_update_request.
type OutputUpdateRequest struct {
	union json.RawMessage
}

// OutputUpdateRequestElasticsearch defines model for output_update_request_elasticsearch.
type OutputUpdateRequestElasticsearch struct {
	CaSha256             *string                 `json:"ca_sha256,omitempty"`
	CaTrustedFingerprint *string                 `json:"ca_trusted_fingerprint,omitempty"`
	Config               *map[string]interface{} `json:"config,omitempty"`
	ConfigYaml           *string                 `json:"config_yaml,omitempty"`
	Hosts                []string                `json:"hosts"`
	Id                   *string                 `json:"id,omitempty"`
	IsDefault            *bool                   `json:"is_default,omitempty"`
	IsDefaultMonitoring  *bool                   `json:"is_default_monitoring,omitempty"`
	Name                 string                  `json:"name"`
	ProxyId              *string                 `json:"proxy_id,omitempty"`
	Shipper              *struct {
		CompressionLevel            *float32 `json:"compression_level,omitempty"`
		DiskQueueCompressionEnabled *bool    `json:"disk_queue_compression_enabled,omitempty"`
		DiskQueueEnabled            *bool    `json:"disk_queue_enabled,omitempty"`
		DiskQueueEncryptionEnabled  *bool    `json:"disk_queue_encryption_enabled,omitempty"`
		DiskQueueMaxSize            *float32 `json:"disk_queue_max_size,omitempty"`
		DiskQueuePath               *string  `json:"disk_queue_path,omitempty"`
		Loadbalance                 *bool    `json:"loadbalance,omitempty"`
	} `json:"shipper,omitempty"`
	Ssl *struct {
		Certificate            *string   `json:"certificate,omitempty"`
		CertificateAuthorities *[]string `json:"certificate_authorities,omitempty"`
		Key                    *string   `json:"key,omitempty"`
	} `json:"ssl,omitempty"`
	Type OutputUpdateRequestElasticsearchType `json:"type"`
}

// OutputUpdateRequestElasticsearchType defines model for OutputUpdateRequestElasticsearch.Type.
type OutputUpdateRequestElasticsearchType string

// OutputUpdateRequestKafka defines model for output_update_request_kafka.
type OutputUpdateRequestKafka struct {
	AuthType             *string                                 `json:"auth_type,omitempty"`
	BrokerTimeout        *float32                                `json:"broker_timeout,omitempty"`
	CaSha256             *string                                 `json:"ca_sha256,omitempty"`
	CaTrustedFingerprint *string                                 `json:"ca_trusted_fingerprint,omitempty"`
	ClientId             *string                                 `json:"client_id,omitempty"`
	Compression          *string                                 `json:"compression,omitempty"`
	CompressionLevel     *float32                                `json:"compression_level,omitempty"`
	Config               *map[string]interface{}                 `json:"config,omitempty"`
	ConfigYaml           *string                                 `json:"config_yaml,omitempty"`
	ConnectionType       *OutputUpdateRequestKafkaConnectionType `json:"connection_type,omitempty"`
	Headers              *[]struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"headers,omitempty"`
	Hosts               *[]string `json:"hosts,omitempty"`
	Id                  *string   `json:"id,omitempty"`
	IsDefault           *bool     `json:"is_default,omitempty"`
	IsDefaultMonitoring *bool     `json:"is_default_monitoring,omitempty"`
	Key                 *string   `json:"key,omitempty"`
	Name                string    `json:"name"`
	Partition           *string   `json:"partition,omitempty"`
	Password            *string   `json:"password,omitempty"`
	ProxyId             *string   `json:"proxy_id,omitempty"`
	Random              *struct {
		GroupEvents *float32 `json:"group_events,omitempty"`
	} `json:"random,omitempty"`
	RequiredAcks *float32 `json:"required_acks,omitempty"`
	RoundRobin   *struct {
		GroupEvents *float32 `json:"group_events,omitempty"`
	} `json:"round_robin,omitempty"`
	Sasl *struct {
		Mechanism *string `json:"mechanism,omitempty"`
	} `json:"sasl,omitempty"`
	Shipper *struct {
		CompressionLevel            *float32 `json:"compression_level,omitempty"`
		DiskQueueCompressionEnabled *bool    `json:"disk_queue_compression_enabled,omitempty"`
		DiskQueueEnabled            *bool    `json:"disk_queue_enabled,omitempty"`
		DiskQueueEncryptionEnabled  *bool    `json:"disk_queue_encryption_enabled,omitempty"`
		DiskQueueMaxSize            *float32 `json:"disk_queue_max_size,omitempty"`
		DiskQueuePath               *string  `json:"disk_queue_path,omitempty"`
		Loadbalance                 *bool    `json:"loadbalance,omitempty"`
	} `json:"shipper,omitempty"`
	Ssl *struct {
		Certificate            *string                                      `json:"certificate,omitempty"`
		CertificateAuthorities *[]string                                    `json:"certificate_authorities,omitempty"`
		Key                    *string                                      `json:"key,omitempty"`
		VerificationMode       *OutputUpdateRequestKafkaSslVerificationMode `json:"verification_mode,omitempty"`
	} `json:"ssl,omitempty"`
	Timeout *float32 `json:"timeout,omitempty"`
	Topics  *[]struct {
		Topic *string `json:"topic,omitempty"`
		When  *struct {
			Condition *string `json:"condition,omitempty"`
			Type      *string `json:"type,omitempty"`
		} `json:"when,omitempty"`
	} `json:"topics,omitempty"`
	Type     OutputUpdateRequestKafkaType `json:"type"`
	Username *string                      `json:"username,omitempty"`
	Version  *string                      `json:"version,omitempty"`
}

// OutputUpdateRequestKafkaConnectionType defines model for OutputUpdateRequestKafka.ConnectionType.
type OutputUpdateRequestKafkaConnectionType string

// OutputUpdateRequestKafkaSslVerificationMode defines model for OutputUpdateRequestKafka.Ssl.VerificationMode.
type OutputUpdateRequestKafkaSslVerificationMode string

// OutputUpdateRequestKafkaType defines model for OutputUpdateRequestKafka.Type.
type OutputUpdateRequestKafkaType string

// OutputUpdateRequestLogstash defines model for output_update_request_logstash.
type OutputUpdateRequestLogstash struct {
	CaSha256             *string                 `json:"ca_sha256,omitempty"`
	CaTrustedFingerprint *string                 `json:"ca_trusted_fingerprint,omitempty"`
	Config               *map[string]interface{} `json:"config,omitempty"`
	ConfigYaml           *string                 `json:"config_yaml,omitempty"`
	Hosts                *[]string               `json:"hosts,omitempty"`
	Id                   *string                 `json:"id,omitempty"`
	IsDefault            *bool                   `json:"is_default,omitempty"`
	IsDefaultMonitoring  *bool                   `json:"is_default_monitoring,omitempty"`
	Name                 string                  `json:"name"`
	ProxyId              *string                 `json:"proxy_id,omitempty"`
	Shipper              *struct {
		CompressionLevel            *float32 `json:"compression_level,omitempty"`
		DiskQueueCompressionEnabled *bool    `json:"disk_queue_compression_enabled,omitempty"`
		DiskQueueEnabled            *bool    `json:"disk_queue_enabled,omitempty"`
		DiskQueueEncryptionEnabled  *bool    `json:"disk_queue_encryption_enabled,omitempty"`
		DiskQueueMaxSize            *float32 `json:"disk_queue_max_size,omitempty"`
		DiskQueuePath               *string  `json:"disk_queue_path,omitempty"`
		Loadbalance                 *bool    `json:"loadbalance,omitempty"`
	} `json:"shipper,omitempty"`
	Ssl *struct {
		Certificate            *string   `json:"certificate,omitempty"`
		CertificateAuthorities *[]string `json:"certificate_authorities,omitempty"`
		Key                    *string   `json:"key,omitempty"`
	} `json:"ssl,omitempty"`
	Type OutputUpdateRequestLogstashType `json:"type"`
}

// OutputUpdateRequestLogstashType defines model for OutputUpdateRequestLogstash.Type.
type OutputUpdateRequestLogstashType string

// PackageInfo defines model for package_info.
type PackageInfo struct {
	Assets     []string `json:"assets"`
	Categories []string `json:"categories"`
	Conditions struct {
		Elasticsearch *struct {
			Subscription *PackageInfoConditionsElasticsearchSubscription `json:"subscription,omitempty"`
		} `json:"elasticsearch,omitempty"`
		Kibana *struct {
			Versions *string `json:"versions,omitempty"`
		} `json:"kibana,omitempty"`
	} `json:"conditions"`
	DataStreams *[]struct {
		IngesetPipeline string `json:"ingeset_pipeline"`
		Name            string `json:"name"`
		Package         string `json:"package"`
		Release         string `json:"release"`
		Title           string `json:"title"`
		Type            string `json:"type"`
		Vars            *[]struct {
			Default string `json:"default"`
			Name    string `json:"name"`
		} `json:"vars,omitempty"`
	} `json:"data_streams,omitempty"`
	Description   string `json:"description"`
	Download      string `json:"download"`
	Elasticsearch *struct {
		Privileges *struct {
			Cluster *[]string `json:"cluster,omitempty"`
		} `json:"privileges,omitempty"`
	} `json:"elasticsearch,omitempty"`
	FormatVersion string    `json:"format_version"`
	Icons         *[]string `json:"icons,omitempty"`
	Internal      *bool     `json:"internal,omitempty"`
	Name          string    `json:"name"`
	Path          string    `json:"path"`
	Readme        *string   `json:"readme,omitempty"`

	// Release release label is deprecated, derive from the version instead (packages follow semver)
	// Deprecated:
	Release     *PackageInfoRelease `json:"release,omitempty"`
	Screenshots *[]struct {
		Path  string  `json:"path"`
		Size  *string `json:"size,omitempty"`
		Src   string  `json:"src"`
		Title *string `json:"title,omitempty"`
		Type  *string `json:"type,omitempty"`
	} `json:"screenshots,omitempty"`
	Source *struct {
		License *PackageInfoSourceLicense `json:"license,omitempty"`
	} `json:"source,omitempty"`
	Title   string `json:"title"`
	Type    string `json:"type"`
	Version string `json:"version"`
}

// PackageInfoConditionsElasticsearchSubscription defines model for PackageInfo.Conditions.Elasticsearch.Subscription.
type PackageInfoConditionsElasticsearchSubscription string

// PackageInfoRelease release label is deprecated, derive from the version instead (packages follow semver)
type PackageInfoRelease string

// PackageInfoSourceLicense defines model for PackageInfo.Source.License.
type PackageInfoSourceLicense string

// PackageInstallSource defines model for package_install_source.
type PackageInstallSource string

// PackageItemType defines model for package_item_type.
type PackageItemType struct {
	union json.RawMessage
}

// PackagePolicy defines model for package_policy.
type PackagePolicy struct {
	Description *string                       `json:"description,omitempty"`
	Enabled     *bool                         `json:"enabled,omitempty"`
	Id          string                        `json:"id"`
	Inputs      map[string]PackagePolicyInput `json:"inputs"`
	Name        string                        `json:"name"`
	Namespace   *string                       `json:"namespace,omitempty"`
	// Deprecated:
	OutputId *string                   `json:"output_id,omitempty"`
	Package  *PackagePolicyPackageInfo `json:"package,omitempty"`
	PolicyId *string                   `json:"policy_id,omitempty"`
	Revision float32                   `json:"revision"`
	Vars     *map[string]interface{}   `json:"vars,omitempty"`
}

// PackagePolicyInput defines model for package_policy_input.
type PackagePolicyInput struct {
	Config     *map[string]interface{} `json:"config,omitempty"`
	Enabled    bool                    `json:"enabled"`
	Processors *[]string               `json:"processors,omitempty"`
	Streams    *map[string]interface{} `json:"streams,omitempty"`
	Type       string                  `json:"type"`
	Vars       *map[string]interface{} `json:"vars,omitempty"`
}

// PackagePolicyPackageInfo defines model for package_policy_package_info.
type PackagePolicyPackageInfo struct {
	Name    string  `json:"name"`
	Title   *string `json:"title,omitempty"`
	Version string  `json:"version"`
}

// PackagePolicyRequest defines model for package_policy_request.
type PackagePolicyRequest struct {
	// Description Package policy description
	Description *string `json:"description,omitempty"`

	// Force Force package policy creation even if package is not verified, or if the agent policy is managed.
	Force *bool `json:"force,omitempty"`

	// Id Package policy unique identifier
	Id *string `json:"id,omitempty"`

	// Inputs Package policy inputs (see integration documentation to know what inputs are available)
	Inputs *map[string]PackagePolicyRequestInput `json:"inputs,omitempty"`

	// Name Package policy name (should be unique)
	Name string `json:"name"`

	// Namespace namespace by default "default"
	Namespace *string `json:"namespace,omitempty"`
	Package   struct {
		// Name Package name
		Name string `json:"name"`

		// Version Package version
		Version string `json:"version"`
	} `json:"package"`

	// PolicyId Agent policy ID where that package policy will be added
	PolicyId string `json:"policy_id"`

	// Vars Package root level variable (see integration documentation for more information)
	Vars *map[string]interface{} `json:"vars,omitempty"`
}

// PackagePolicyRequestInput defines model for package_policy_request_input.
type PackagePolicyRequestInput struct {
	// Enabled enable or disable that input, (default to true)
	Enabled *bool `json:"enabled,omitempty"`

	// Streams Input streams (see integration documentation to know what streams are available)
	Streams *map[string]PackagePolicyRequestInputStream `json:"streams,omitempty"`

	// Vars Input level variable (see integration documentation for more information)
	Vars *map[string]interface{} `json:"vars,omitempty"`
}

// PackagePolicyRequestInputStream defines model for package_policy_request_input_stream.
type PackagePolicyRequestInputStream struct {
	// Enabled enable or disable that stream, (default to true)
	Enabled *bool `json:"enabled,omitempty"`

	// Vars Stream level variable (see integration documentation for more information)
	Vars *map[string]interface{} `json:"vars,omitempty"`
}

// PackageStatus defines model for package_status.
type PackageStatus string

// Format defines model for format.
type Format string

// Error defines model for error.
type Error struct {
	Error      *string  `json:"error,omitempty"`
	Message    *string  `json:"message,omitempty"`
	StatusCode *float32 `json:"statusCode,omitempty"`
}

// DeleteAgentPolicyJSONBody defines parameters for DeleteAgentPolicy.
type DeleteAgentPolicyJSONBody struct {
	AgentPolicyId string `json:"agentPolicyId"`
}

// DeletePackageJSONBody defines parameters for DeletePackage.
type DeletePackageJSONBody struct {
	Force *bool `json:"force,omitempty"`
}

// DeletePackageParams defines parameters for DeletePackage.
type DeletePackageParams struct {
	// IgnoreUnverified Ignore if the package is fails signature verification
	IgnoreUnverified *bool `form:"ignoreUnverified,omitempty" json:"ignoreUnverified,omitempty"`

	// Full Return all fields from the package manifest, not just those supported by the Elastic Package Registry
	Full *bool `form:"full,omitempty" json:"full,omitempty"`

	// Prerelease Whether to return prerelease versions of packages (e.g. beta, rc, preview)
	Prerelease *bool `form:"prerelease,omitempty" json:"prerelease,omitempty"`
}

// GetPackageParams defines parameters for GetPackage.
type GetPackageParams struct {
	// IgnoreUnverified Ignore if the package is fails signature verification
	IgnoreUnverified *bool `form:"ignoreUnverified,omitempty" json:"ignoreUnverified,omitempty"`

	// Full Return all fields from the package manifest, not just those supported by the Elastic Package Registry
	Full *bool `form:"full,omitempty" json:"full,omitempty"`

	// Prerelease Whether to return prerelease versions of packages (e.g. beta, rc, preview)
	Prerelease *bool `form:"prerelease,omitempty" json:"prerelease,omitempty"`
}

// InstallPackageJSONBody defines parameters for InstallPackage.
type InstallPackageJSONBody struct {
	Force             *bool `json:"force,omitempty"`
	IgnoreConstraints *bool `json:"ignore_constraints,omitempty"`
}

// InstallPackageParams defines parameters for InstallPackage.
type InstallPackageParams struct {
	// IgnoreUnverified Ignore if the package is fails signature verification
	IgnoreUnverified *bool `form:"ignoreUnverified,omitempty" json:"ignoreUnverified,omitempty"`

	// Full Return all fields from the package manifest, not just those supported by the Elastic Package Registry
	Full *bool `form:"full,omitempty" json:"full,omitempty"`

	// Prerelease Whether to return prerelease versions of packages (e.g. beta, rc, preview)
	Prerelease *bool `form:"prerelease,omitempty" json:"prerelease,omitempty"`
}

// UpdatePackageJSONBody defines parameters for UpdatePackage.
type UpdatePackageJSONBody struct {
	KeepPoliciesUpToDate *bool `json:"keepPoliciesUpToDate,omitempty"`
}

// UpdatePackageParams defines parameters for UpdatePackage.
type UpdatePackageParams struct {
	// IgnoreUnverified Ignore if the package is fails signature verification
	IgnoreUnverified *bool `form:"ignoreUnverified,omitempty" json:"ignoreUnverified,omitempty"`

	// Full Return all fields from the package manifest, not just those supported by the Elastic Package Registry
	Full *bool `form:"full,omitempty" json:"full,omitempty"`

	// Prerelease Whether to return prerelease versions of packages (e.g. beta, rc, preview)
	Prerelease *bool `form:"prerelease,omitempty" json:"prerelease,omitempty"`
}

// PostFleetServerHostsJSONBody defines parameters for PostFleetServerHosts.
type PostFleetServerHostsJSONBody struct {
	HostUrls  []string `json:"host_urls"`
	Id        *string  `json:"id,omitempty"`
	IsDefault *bool    `json:"is_default,omitempty"`
	Name      string   `json:"name"`
}

// UpdateFleetServerHostsJSONBody defines parameters for UpdateFleetServerHosts.
type UpdateFleetServerHostsJSONBody struct {
	HostUrls  *[]string `json:"host_urls,omitempty"`
	IsDefault *bool     `json:"is_default,omitempty"`
	Name      *string   `json:"name,omitempty"`
}

// CreatePackagePolicyParams defines parameters for CreatePackagePolicy.
type CreatePackagePolicyParams struct {
	// Format Simplified or legacy format for package inputs
	Format *CreatePackagePolicyParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// CreatePackagePolicyParamsFormat defines parameters for CreatePackagePolicy.
type CreatePackagePolicyParamsFormat string

// DeletePackagePolicyParams defines parameters for DeletePackagePolicy.
type DeletePackagePolicyParams struct {
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// GetPackagePolicyParams defines parameters for GetPackagePolicy.
type GetPackagePolicyParams struct {
	// Format Simplified or legacy format for package inputs
	Format *GetPackagePolicyParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetPackagePolicyParamsFormat defines parameters for GetPackagePolicy.
type GetPackagePolicyParamsFormat string

// UpdatePackagePolicyParams defines parameters for UpdatePackagePolicy.
type UpdatePackagePolicyParams struct {
	// Format Simplified or legacy format for package inputs
	Format *UpdatePackagePolicyParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// UpdatePackagePolicyParamsFormat defines parameters for UpdatePackagePolicy.
type UpdatePackagePolicyParamsFormat string

// CreateAgentPolicyJSONRequestBody defines body for CreateAgentPolicy for application/json ContentType.
type CreateAgentPolicyJSONRequestBody = AgentPolicyCreateRequest

// DeleteAgentPolicyJSONRequestBody defines body for DeleteAgentPolicy for application/json ContentType.
type DeleteAgentPolicyJSONRequestBody DeleteAgentPolicyJSONBody

// UpdateAgentPolicyJSONRequestBody defines body for UpdateAgentPolicy for application/json ContentType.
type UpdateAgentPolicyJSONRequestBody = AgentPolicyUpdateRequest

// DeletePackageJSONRequestBody defines body for DeletePackage for application/json ContentType.
type DeletePackageJSONRequestBody DeletePackageJSONBody

// InstallPackageJSONRequestBody defines body for InstallPackage for application/json ContentType.
type InstallPackageJSONRequestBody InstallPackageJSONBody

// UpdatePackageJSONRequestBody defines body for UpdatePackage for application/json ContentType.
type UpdatePackageJSONRequestBody UpdatePackageJSONBody

// PostFleetServerHostsJSONRequestBody defines body for PostFleetServerHosts for application/json ContentType.
type PostFleetServerHostsJSONRequestBody PostFleetServerHostsJSONBody

// UpdateFleetServerHostsJSONRequestBody defines body for UpdateFleetServerHosts for application/json ContentType.
type UpdateFleetServerHostsJSONRequestBody UpdateFleetServerHostsJSONBody

// PostOutputsJSONRequestBody defines body for PostOutputs for application/json ContentType.
type PostOutputsJSONRequestBody = OutputCreateRequest

// UpdateOutputJSONRequestBody defines body for UpdateOutput for application/json ContentType.
type UpdateOutputJSONRequestBody = OutputUpdateRequest

// CreatePackagePolicyJSONRequestBody defines body for CreatePackagePolicy for application/json ContentType.
type CreatePackagePolicyJSONRequestBody = PackagePolicyRequest

// UpdatePackagePolicyJSONRequestBody defines body for UpdatePackagePolicy for application/json ContentType.
type UpdatePackagePolicyJSONRequestBody = PackagePolicyRequest

// AsOutputCreateRequestElasticsearch returns the union data inside the OutputCreateRequest as a OutputCreateRequestElasticsearch
func (t OutputCreateRequest) AsOutputCreateRequestElasticsearch() (OutputCreateRequestElasticsearch, error) {
	var body OutputCreateRequestElasticsearch
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputCreateRequestElasticsearch overwrites any union data inside the OutputCreateRequest as the provided OutputCreateRequestElasticsearch
func (t *OutputCreateRequest) FromOutputCreateRequestElasticsearch(v OutputCreateRequestElasticsearch) error {
	v.Type = "elasticsearch"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputCreateRequestElasticsearch performs a merge with any union data inside the OutputCreateRequest, using the provided OutputCreateRequestElasticsearch
func (t *OutputCreateRequest) MergeOutputCreateRequestElasticsearch(v OutputCreateRequestElasticsearch) error {
	v.Type = "elasticsearch"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOutputCreateRequestKafka returns the union data inside the OutputCreateRequest as a OutputCreateRequestKafka
func (t OutputCreateRequest) AsOutputCreateRequestKafka() (OutputCreateRequestKafka, error) {
	var body OutputCreateRequestKafka
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputCreateRequestKafka overwrites any union data inside the OutputCreateRequest as the provided OutputCreateRequestKafka
func (t *OutputCreateRequest) FromOutputCreateRequestKafka(v OutputCreateRequestKafka) error {
	v.Type = "kafka"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputCreateRequestKafka performs a merge with any union data inside the OutputCreateRequest, using the provided OutputCreateRequestKafka
func (t *OutputCreateRequest) MergeOutputCreateRequestKafka(v OutputCreateRequestKafka) error {
	v.Type = "kafka"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOutputCreateRequestLogstash returns the union data inside the OutputCreateRequest as a OutputCreateRequestLogstash
func (t OutputCreateRequest) AsOutputCreateRequestLogstash() (OutputCreateRequestLogstash, error) {
	var body OutputCreateRequestLogstash
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputCreateRequestLogstash overwrites any union data inside the OutputCreateRequest as the provided OutputCreateRequestLogstash
func (t *OutputCreateRequest) FromOutputCreateRequestLogstash(v OutputCreateRequestLogstash) error {
	v.Type = "logstash"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputCreateRequestLogstash performs a merge with any union data inside the OutputCreateRequest, using the provided OutputCreateRequestLogstash
func (t *OutputCreateRequest) MergeOutputCreateRequestLogstash(v OutputCreateRequestLogstash) error {
	v.Type = "logstash"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t OutputCreateRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OutputCreateRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "elasticsearch":
		return t.AsOutputCreateRequestElasticsearch()
	case "kafka":
		return t.AsOutputCreateRequestKafka()
	case "logstash":
		return t.AsOutputCreateRequestLogstash()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t OutputCreateRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OutputCreateRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOutputUpdateRequestElasticsearch returns the union data inside the OutputUpdateRequest as a OutputUpdateRequestElasticsearch
func (t OutputUpdateRequest) AsOutputUpdateRequestElasticsearch() (OutputUpdateRequestElasticsearch, error) {
	var body OutputUpdateRequestElasticsearch
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputUpdateRequestElasticsearch overwrites any union data inside the OutputUpdateRequest as the provided OutputUpdateRequestElasticsearch
func (t *OutputUpdateRequest) FromOutputUpdateRequestElasticsearch(v OutputUpdateRequestElasticsearch) error {
	v.Type = "elasticsearch"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputUpdateRequestElasticsearch performs a merge with any union data inside the OutputUpdateRequest, using the provided OutputUpdateRequestElasticsearch
func (t *OutputUpdateRequest) MergeOutputUpdateRequestElasticsearch(v OutputUpdateRequestElasticsearch) error {
	v.Type = "elasticsearch"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOutputUpdateRequestKafka returns the union data inside the OutputUpdateRequest as a OutputUpdateRequestKafka
func (t OutputUpdateRequest) AsOutputUpdateRequestKafka() (OutputUpdateRequestKafka, error) {
	var body OutputUpdateRequestKafka
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputUpdateRequestKafka overwrites any union data inside the OutputUpdateRequest as the provided OutputUpdateRequestKafka
func (t *OutputUpdateRequest) FromOutputUpdateRequestKafka(v OutputUpdateRequestKafka) error {
	v.Type = "kafka"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputUpdateRequestKafka performs a merge with any union data inside the OutputUpdateRequest, using the provided OutputUpdateRequestKafka
func (t *OutputUpdateRequest) MergeOutputUpdateRequestKafka(v OutputUpdateRequestKafka) error {
	v.Type = "kafka"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOutputUpdateRequestLogstash returns the union data inside the OutputUpdateRequest as a OutputUpdateRequestLogstash
func (t OutputUpdateRequest) AsOutputUpdateRequestLogstash() (OutputUpdateRequestLogstash, error) {
	var body OutputUpdateRequestLogstash
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputUpdateRequestLogstash overwrites any union data inside the OutputUpdateRequest as the provided OutputUpdateRequestLogstash
func (t *OutputUpdateRequest) FromOutputUpdateRequestLogstash(v OutputUpdateRequestLogstash) error {
	v.Type = "logstash"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputUpdateRequestLogstash performs a merge with any union data inside the OutputUpdateRequest, using the provided OutputUpdateRequestLogstash
func (t *OutputUpdateRequest) MergeOutputUpdateRequestLogstash(v OutputUpdateRequestLogstash) error {
	v.Type = "logstash"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t OutputUpdateRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OutputUpdateRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "elasticsearch":
		return t.AsOutputUpdateRequestElasticsearch()
	case "kafka":
		return t.AsOutputUpdateRequestKafka()
	case "logstash":
		return t.AsOutputUpdateRequestLogstash()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t OutputUpdateRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OutputUpdateRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsKibanaSavedObjectType returns the union data inside the PackageItemType as a KibanaSavedObjectType
func (t PackageItemType) AsKibanaSavedObjectType() (KibanaSavedObjectType, error) {
	var body KibanaSavedObjectType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKibanaSavedObjectType overwrites any union data inside the PackageItemType as the provided KibanaSavedObjectType
func (t *PackageItemType) FromKibanaSavedObjectType(v KibanaSavedObjectType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKibanaSavedObjectType performs a merge with any union data inside the PackageItemType, using the provided KibanaSavedObjectType
func (t *PackageItemType) MergeKibanaSavedObjectType(v KibanaSavedObjectType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsElasticsearchAssetType returns the union data inside the PackageItemType as a ElasticsearchAssetType
func (t PackageItemType) AsElasticsearchAssetType() (ElasticsearchAssetType, error) {
	var body ElasticsearchAssetType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromElasticsearchAssetType overwrites any union data inside the PackageItemType as the provided ElasticsearchAssetType
func (t *PackageItemType) FromElasticsearchAssetType(v ElasticsearchAssetType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeElasticsearchAssetType performs a merge with any union data inside the PackageItemType, using the provided ElasticsearchAssetType
func (t *PackageItemType) MergeElasticsearchAssetType(v ElasticsearchAssetType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageItemType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageItemType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateAgentPolicyWithBody request with any body
	CreateAgentPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAgentPolicy(ctx context.Context, body CreateAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgentPolicyWithBody request with any body
	DeleteAgentPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAgentPolicy(ctx context.Context, body DeleteAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentPolicyInfo request
	AgentPolicyInfo(ctx context.Context, agentPolicyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAgentPolicyWithBody request with any body
	UpdateAgentPolicyWithBody(ctx context.Context, agentPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAgentPolicy(ctx context.Context, agentPolicyId string, body UpdateAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnrollmentApiKeys request
	GetEnrollmentApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackageWithBody request with any body
	DeletePackageWithBody(ctx context.Context, pkgName string, pkgVersion string, params *DeletePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeletePackage(ctx context.Context, pkgName string, pkgVersion string, params *DeletePackageParams, body DeletePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackage request
	GetPackage(ctx context.Context, pkgName string, pkgVersion string, params *GetPackageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallPackageWithBody request with any body
	InstallPackageWithBody(ctx context.Context, pkgName string, pkgVersion string, params *InstallPackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstallPackage(ctx context.Context, pkgName string, pkgVersion string, params *InstallPackageParams, body InstallPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePackageWithBody request with any body
	UpdatePackageWithBody(ctx context.Context, pkgName string, pkgVersion string, params *UpdatePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePackage(ctx context.Context, pkgName string, pkgVersion string, params *UpdatePackageParams, body UpdatePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFleetServerHostsWithBody request with any body
	PostFleetServerHostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFleetServerHosts(ctx context.Context, body PostFleetServerHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFleetServerHosts request
	DeleteFleetServerHosts(ctx context.Context, itemId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneFleetServerHosts request
	GetOneFleetServerHosts(ctx context.Context, itemId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFleetServerHostsWithBody request with any body
	UpdateFleetServerHostsWithBody(ctx context.Context, itemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFleetServerHosts(ctx context.Context, itemId string, body UpdateFleetServerHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOutputsWithBody request with any body
	PostOutputsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOutputs(ctx context.Context, body PostOutputsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOutput request
	DeleteOutput(ctx context.Context, outputId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutput request
	GetOutput(ctx context.Context, outputId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOutputWithBody request with any body
	UpdateOutputWithBody(ctx context.Context, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOutput(ctx context.Context, outputId string, body UpdateOutputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePackagePolicyWithBody request with any body
	CreatePackagePolicyWithBody(ctx context.Context, params *CreatePackagePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePackagePolicy(ctx context.Context, params *CreatePackagePolicyParams, body CreatePackagePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackagePolicy request
	DeletePackagePolicy(ctx context.Context, packagePolicyId string, params *DeletePackagePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePolicy request
	GetPackagePolicy(ctx context.Context, packagePolicyId string, params *GetPackagePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePackagePolicyWithBody request with any body
	UpdatePackagePolicyWithBody(ctx context.Context, packagePolicyId string, params *UpdatePackagePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePackagePolicy(ctx context.Context, packagePolicyId string, params *UpdatePackagePolicyParams, body UpdatePackagePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateAgentPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgentPolicy(ctx context.Context, body CreateAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgentPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgentPolicy(ctx context.Context, body DeleteAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentPolicyInfo(ctx context.Context, agentPolicyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentPolicyInfoRequest(c.Server, agentPolicyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAgentPolicyWithBody(ctx context.Context, agentPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAgentPolicyRequestWithBody(c.Server, agentPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAgentPolicy(ctx context.Context, agentPolicyId string, body UpdateAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAgentPolicyRequest(c.Server, agentPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnrollmentApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnrollmentApiKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackageWithBody(ctx context.Context, pkgName string, pkgVersion string, params *DeletePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackageRequestWithBody(c.Server, pkgName, pkgVersion, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackage(ctx context.Context, pkgName string, pkgVersion string, params *DeletePackageParams, body DeletePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackageRequest(c.Server, pkgName, pkgVersion, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackage(ctx context.Context, pkgName string, pkgVersion string, params *GetPackageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageRequest(c.Server, pkgName, pkgVersion, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallPackageWithBody(ctx context.Context, pkgName string, pkgVersion string, params *InstallPackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallPackageRequestWithBody(c.Server, pkgName, pkgVersion, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallPackage(ctx context.Context, pkgName string, pkgVersion string, params *InstallPackageParams, body InstallPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallPackageRequest(c.Server, pkgName, pkgVersion, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePackageWithBody(ctx context.Context, pkgName string, pkgVersion string, params *UpdatePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePackageRequestWithBody(c.Server, pkgName, pkgVersion, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePackage(ctx context.Context, pkgName string, pkgVersion string, params *UpdatePackageParams, body UpdatePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePackageRequest(c.Server, pkgName, pkgVersion, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFleetServerHostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFleetServerHostsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFleetServerHosts(ctx context.Context, body PostFleetServerHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFleetServerHostsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFleetServerHosts(ctx context.Context, itemId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFleetServerHostsRequest(c.Server, itemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneFleetServerHosts(ctx context.Context, itemId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneFleetServerHostsRequest(c.Server, itemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFleetServerHostsWithBody(ctx context.Context, itemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFleetServerHostsRequestWithBody(c.Server, itemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFleetServerHosts(ctx context.Context, itemId string, body UpdateFleetServerHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFleetServerHostsRequest(c.Server, itemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOutputsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOutputsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOutputs(ctx context.Context, body PostOutputsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOutputsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOutput(ctx context.Context, outputId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOutputRequest(c.Server, outputId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutput(ctx context.Context, outputId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutputRequest(c.Server, outputId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOutputWithBody(ctx context.Context, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOutputRequestWithBody(c.Server, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOutput(ctx context.Context, outputId string, body UpdateOutputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOutputRequest(c.Server, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePackagePolicyWithBody(ctx context.Context, params *CreatePackagePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePackagePolicyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePackagePolicy(ctx context.Context, params *CreatePackagePolicyParams, body CreatePackagePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePackagePolicyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackagePolicy(ctx context.Context, packagePolicyId string, params *DeletePackagePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackagePolicyRequest(c.Server, packagePolicyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePolicy(ctx context.Context, packagePolicyId string, params *GetPackagePolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePolicyRequest(c.Server, packagePolicyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePackagePolicyWithBody(ctx context.Context, packagePolicyId string, params *UpdatePackagePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePackagePolicyRequestWithBody(c.Server, packagePolicyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePackagePolicy(ctx context.Context, packagePolicyId string, params *UpdatePackagePolicyParams, body UpdatePackagePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePackagePolicyRequest(c.Server, packagePolicyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateAgentPolicyRequest calls the generic CreateAgentPolicy builder with application/json body
func NewCreateAgentPolicyRequest(server string, body CreateAgentPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAgentPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAgentPolicyRequestWithBody generates requests for CreateAgentPolicy with any type of body
func NewCreateAgentPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agent_policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAgentPolicyRequest calls the generic DeleteAgentPolicy builder with application/json body
func NewDeleteAgentPolicyRequest(server string, body DeleteAgentPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAgentPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAgentPolicyRequestWithBody generates requests for DeleteAgentPolicy with any type of body
func NewDeleteAgentPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agent_policies/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAgentPolicyInfoRequest generates requests for AgentPolicyInfo
func NewAgentPolicyInfoRequest(server string, agentPolicyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentPolicyId", runtime.ParamLocationPath, agentPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agent_policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAgentPolicyRequest calls the generic UpdateAgentPolicy builder with application/json body
func NewUpdateAgentPolicyRequest(server string, agentPolicyId string, body UpdateAgentPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAgentPolicyRequestWithBody(server, agentPolicyId, "application/json", bodyReader)
}

// NewUpdateAgentPolicyRequestWithBody generates requests for UpdateAgentPolicy with any type of body
func NewUpdateAgentPolicyRequestWithBody(server string, agentPolicyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentPolicyId", runtime.ParamLocationPath, agentPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agent_policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnrollmentApiKeysRequest generates requests for GetEnrollmentApiKeys
func NewGetEnrollmentApiKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enrollment_api_keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePackageRequest calls the generic DeletePackage builder with application/json body
func NewDeletePackageRequest(server string, pkgName string, pkgVersion string, params *DeletePackageParams, body DeletePackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeletePackageRequestWithBody(server, pkgName, pkgVersion, params, "application/json", bodyReader)
}

// NewDeletePackageRequestWithBody generates requests for DeletePackage with any type of body
func NewDeletePackageRequestWithBody(server string, pkgName string, pkgVersion string, params *DeletePackageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pkgName", runtime.ParamLocationPath, pkgName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pkgVersion", runtime.ParamLocationPath, pkgVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/epm/packages/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IgnoreUnverified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignoreUnverified", runtime.ParamLocationQuery, *params.IgnoreUnverified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Full != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full", runtime.ParamLocationQuery, *params.Full); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prerelease != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prerelease", runtime.ParamLocationQuery, *params.Prerelease); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPackageRequest generates requests for GetPackage
func NewGetPackageRequest(server string, pkgName string, pkgVersion string, params *GetPackageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pkgName", runtime.ParamLocationPath, pkgName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pkgVersion", runtime.ParamLocationPath, pkgVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/epm/packages/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IgnoreUnverified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignoreUnverified", runtime.ParamLocationQuery, *params.IgnoreUnverified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Full != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full", runtime.ParamLocationQuery, *params.Full); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prerelease != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prerelease", runtime.ParamLocationQuery, *params.Prerelease); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstallPackageRequest calls the generic InstallPackage builder with application/json body
func NewInstallPackageRequest(server string, pkgName string, pkgVersion string, params *InstallPackageParams, body InstallPackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstallPackageRequestWithBody(server, pkgName, pkgVersion, params, "application/json", bodyReader)
}

// NewInstallPackageRequestWithBody generates requests for InstallPackage with any type of body
func NewInstallPackageRequestWithBody(server string, pkgName string, pkgVersion string, params *InstallPackageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pkgName", runtime.ParamLocationPath, pkgName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pkgVersion", runtime.ParamLocationPath, pkgVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/epm/packages/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IgnoreUnverified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignoreUnverified", runtime.ParamLocationQuery, *params.IgnoreUnverified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Full != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full", runtime.ParamLocationQuery, *params.Full); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prerelease != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prerelease", runtime.ParamLocationQuery, *params.Prerelease); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePackageRequest calls the generic UpdatePackage builder with application/json body
func NewUpdatePackageRequest(server string, pkgName string, pkgVersion string, params *UpdatePackageParams, body UpdatePackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePackageRequestWithBody(server, pkgName, pkgVersion, params, "application/json", bodyReader)
}

// NewUpdatePackageRequestWithBody generates requests for UpdatePackage with any type of body
func NewUpdatePackageRequestWithBody(server string, pkgName string, pkgVersion string, params *UpdatePackageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pkgName", runtime.ParamLocationPath, pkgName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pkgVersion", runtime.ParamLocationPath, pkgVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/epm/packages/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IgnoreUnverified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignoreUnverified", runtime.ParamLocationQuery, *params.IgnoreUnverified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Full != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full", runtime.ParamLocationQuery, *params.Full); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prerelease != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prerelease", runtime.ParamLocationQuery, *params.Prerelease); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFleetServerHostsRequest calls the generic PostFleetServerHosts builder with application/json body
func NewPostFleetServerHostsRequest(server string, body PostFleetServerHostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFleetServerHostsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFleetServerHostsRequestWithBody generates requests for PostFleetServerHosts with any type of body
func NewPostFleetServerHostsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleet_server_hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFleetServerHostsRequest generates requests for DeleteFleetServerHosts
func NewDeleteFleetServerHostsRequest(server string, itemId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleet_server_hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOneFleetServerHostsRequest generates requests for GetOneFleetServerHosts
func NewGetOneFleetServerHostsRequest(server string, itemId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleet_server_hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFleetServerHostsRequest calls the generic UpdateFleetServerHosts builder with application/json body
func NewUpdateFleetServerHostsRequest(server string, itemId string, body UpdateFleetServerHostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFleetServerHostsRequestWithBody(server, itemId, "application/json", bodyReader)
}

// NewUpdateFleetServerHostsRequestWithBody generates requests for UpdateFleetServerHosts with any type of body
func NewUpdateFleetServerHostsRequestWithBody(server string, itemId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleet_server_hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOutputsRequest calls the generic PostOutputs builder with application/json body
func NewPostOutputsRequest(server string, body PostOutputsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOutputsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOutputsRequestWithBody generates requests for PostOutputs with any type of body
func NewPostOutputsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outputs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOutputRequest generates requests for DeleteOutput
func NewDeleteOutputRequest(server string, outputId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outputs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOutputRequest generates requests for GetOutput
func NewGetOutputRequest(server string, outputId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outputs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOutputRequest calls the generic UpdateOutput builder with application/json body
func NewUpdateOutputRequest(server string, outputId string, body UpdateOutputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOutputRequestWithBody(server, outputId, "application/json", bodyReader)
}

// NewUpdateOutputRequestWithBody generates requests for UpdateOutput with any type of body
func NewUpdateOutputRequestWithBody(server string, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outputs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePackagePolicyRequest calls the generic CreatePackagePolicy builder with application/json body
func NewCreatePackagePolicyRequest(server string, params *CreatePackagePolicyParams, body CreatePackagePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePackagePolicyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePackagePolicyRequestWithBody generates requests for CreatePackagePolicy with any type of body
func NewCreatePackagePolicyRequestWithBody(server string, params *CreatePackagePolicyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package_policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePackagePolicyRequest generates requests for DeletePackagePolicy
func NewDeletePackagePolicyRequest(server string, packagePolicyId string, params *DeletePackagePolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packagePolicyId", runtime.ParamLocationPath, packagePolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package_policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPackagePolicyRequest generates requests for GetPackagePolicy
func NewGetPackagePolicyRequest(server string, packagePolicyId string, params *GetPackagePolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packagePolicyId", runtime.ParamLocationPath, packagePolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package_policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePackagePolicyRequest calls the generic UpdatePackagePolicy builder with application/json body
func NewUpdatePackagePolicyRequest(server string, packagePolicyId string, params *UpdatePackagePolicyParams, body UpdatePackagePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePackagePolicyRequestWithBody(server, packagePolicyId, params, "application/json", bodyReader)
}

// NewUpdatePackagePolicyRequestWithBody generates requests for UpdatePackagePolicy with any type of body
func NewUpdatePackagePolicyRequestWithBody(server string, packagePolicyId string, params *UpdatePackagePolicyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packagePolicyId", runtime.ParamLocationPath, packagePolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package_policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateAgentPolicyWithBodyWithResponse request with any body
	CreateAgentPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAgentPolicyResponse, error)

	CreateAgentPolicyWithResponse(ctx context.Context, body CreateAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAgentPolicyResponse, error)

	// DeleteAgentPolicyWithBodyWithResponse request with any body
	DeleteAgentPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAgentPolicyResponse, error)

	DeleteAgentPolicyWithResponse(ctx context.Context, body DeleteAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAgentPolicyResponse, error)

	// AgentPolicyInfoWithResponse request
	AgentPolicyInfoWithResponse(ctx context.Context, agentPolicyId string, reqEditors ...RequestEditorFn) (*AgentPolicyInfoResponse, error)

	// UpdateAgentPolicyWithBodyWithResponse request with any body
	UpdateAgentPolicyWithBodyWithResponse(ctx context.Context, agentPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAgentPolicyResponse, error)

	UpdateAgentPolicyWithResponse(ctx context.Context, agentPolicyId string, body UpdateAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAgentPolicyResponse, error)

	// GetEnrollmentApiKeysWithResponse request
	GetEnrollmentApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEnrollmentApiKeysResponse, error)

	// DeletePackageWithBodyWithResponse request with any body
	DeletePackageWithBodyWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *DeletePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePackageResponse, error)

	DeletePackageWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *DeletePackageParams, body DeletePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePackageResponse, error)

	// GetPackageWithResponse request
	GetPackageWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *GetPackageParams, reqEditors ...RequestEditorFn) (*GetPackageResponse, error)

	// InstallPackageWithBodyWithResponse request with any body
	InstallPackageWithBodyWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *InstallPackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallPackageResponse, error)

	InstallPackageWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *InstallPackageParams, body InstallPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallPackageResponse, error)

	// UpdatePackageWithBodyWithResponse request with any body
	UpdatePackageWithBodyWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *UpdatePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePackageResponse, error)

	UpdatePackageWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *UpdatePackageParams, body UpdatePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePackageResponse, error)

	// PostFleetServerHostsWithBodyWithResponse request with any body
	PostFleetServerHostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFleetServerHostsResponse, error)

	PostFleetServerHostsWithResponse(ctx context.Context, body PostFleetServerHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFleetServerHostsResponse, error)

	// DeleteFleetServerHostsWithResponse request
	DeleteFleetServerHostsWithResponse(ctx context.Context, itemId string, reqEditors ...RequestEditorFn) (*DeleteFleetServerHostsResponse, error)

	// GetOneFleetServerHostsWithResponse request
	GetOneFleetServerHostsWithResponse(ctx context.Context, itemId string, reqEditors ...RequestEditorFn) (*GetOneFleetServerHostsResponse, error)

	// UpdateFleetServerHostsWithBodyWithResponse request with any body
	UpdateFleetServerHostsWithBodyWithResponse(ctx context.Context, itemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFleetServerHostsResponse, error)

	UpdateFleetServerHostsWithResponse(ctx context.Context, itemId string, body UpdateFleetServerHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFleetServerHostsResponse, error)

	// PostOutputsWithBodyWithResponse request with any body
	PostOutputsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOutputsResponse, error)

	PostOutputsWithResponse(ctx context.Context, body PostOutputsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOutputsResponse, error)

	// DeleteOutputWithResponse request
	DeleteOutputWithResponse(ctx context.Context, outputId string, reqEditors ...RequestEditorFn) (*DeleteOutputResponse, error)

	// GetOutputWithResponse request
	GetOutputWithResponse(ctx context.Context, outputId string, reqEditors ...RequestEditorFn) (*GetOutputResponse, error)

	// UpdateOutputWithBodyWithResponse request with any body
	UpdateOutputWithBodyWithResponse(ctx context.Context, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOutputResponse, error)

	UpdateOutputWithResponse(ctx context.Context, outputId string, body UpdateOutputJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOutputResponse, error)

	// CreatePackagePolicyWithBodyWithResponse request with any body
	CreatePackagePolicyWithBodyWithResponse(ctx context.Context, params *CreatePackagePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePackagePolicyResponse, error)

	CreatePackagePolicyWithResponse(ctx context.Context, params *CreatePackagePolicyParams, body CreatePackagePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePackagePolicyResponse, error)

	// DeletePackagePolicyWithResponse request
	DeletePackagePolicyWithResponse(ctx context.Context, packagePolicyId string, params *DeletePackagePolicyParams, reqEditors ...RequestEditorFn) (*DeletePackagePolicyResponse, error)

	// GetPackagePolicyWithResponse request
	GetPackagePolicyWithResponse(ctx context.Context, packagePolicyId string, params *GetPackagePolicyParams, reqEditors ...RequestEditorFn) (*GetPackagePolicyResponse, error)

	// UpdatePackagePolicyWithBodyWithResponse request with any body
	UpdatePackagePolicyWithBodyWithResponse(ctx context.Context, packagePolicyId string, params *UpdatePackagePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePackagePolicyResponse, error)

	UpdatePackagePolicyWithResponse(ctx context.Context, packagePolicyId string, params *UpdatePackagePolicyParams, body UpdatePackagePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePackagePolicyResponse, error)
}

type CreateAgentPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item *AgentPolicy `json:"item,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r CreateAgentPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAgentPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id      string `json:"id"`
		Success bool   `json:"success"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAgentPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentPolicyInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item AgentPolicy `json:"item"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r AgentPolicyInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentPolicyInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAgentPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item AgentPolicy `json:"item"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAgentPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAgentPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnrollmentApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items []EnrollmentApiKey `json:"items"`
		// Deprecated:
		List    *[]EnrollmentApiKey `json:"list,omitempty"`
		Page    float32             `json:"page"`
		PerPage float32             `json:"perPage"`
		Total   float32             `json:"total"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r GetEnrollmentApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnrollmentApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items []struct {
			Id   string          `json:"id"`
			Type PackageItemType `json:"type"`
		} `json:"items"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r DeletePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item                 *PackageInfo `json:"item,omitempty"`
		KeepPoliciesUpToDate *bool        `json:"keepPoliciesUpToDate,omitempty"`
		LatestVersion        *string      `json:"latestVersion,omitempty"`
		LicensePath          *string      `json:"licensePath,omitempty"`
		Notice               *string      `json:"notice,omitempty"`
		// Deprecated:
		SavedObject map[string]interface{} `json:"savedObject"`
		Status      PackageStatus          `json:"status"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r GetPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstallPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Meta *struct {
			InstallSource *PackageInstallSource `json:"install_source,omitempty"`
		} `json:"_meta,omitempty"`
		Items []struct {
			Id   string          `json:"id"`
			Type PackageItemType `json:"type"`
		} `json:"items"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r InstallPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items []struct {
			Id   string          `json:"id"`
			Type PackageItemType `json:"type"`
		} `json:"items"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFleetServerHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item *FleetServerHost `json:"item,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r PostFleetServerHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFleetServerHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFleetServerHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFleetServerHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFleetServerHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneFleetServerHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item FleetServerHost `json:"item"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r GetOneFleetServerHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneFleetServerHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFleetServerHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item FleetServerHost `json:"item"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateFleetServerHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFleetServerHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOutputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item *OutputCreateRequest `json:"item,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r PostOutputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOutputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOutputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOutputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOutputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item *OutputCreateRequest `json:"item,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r GetOutputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOutputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item *OutputUpdateRequest `json:"item,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateOutputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOutputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePackagePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item PackagePolicy `json:"item"`
	}
	JSON400 *Error
	JSON409 *Error
}

// Status returns HTTPResponse.Status
func (r CreatePackagePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePackagePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackagePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r DeletePackagePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackagePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item PackagePolicy `json:"item"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r GetPackagePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePackagePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Item   PackagePolicy `json:"item"`
		Sucess bool          `json:"sucess"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePackagePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePackagePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateAgentPolicyWithBodyWithResponse request with arbitrary body returning *CreateAgentPolicyResponse
func (c *ClientWithResponses) CreateAgentPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAgentPolicyResponse, error) {
	rsp, err := c.CreateAgentPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentPolicyResponse(rsp)
}

func (c *ClientWithResponses) CreateAgentPolicyWithResponse(ctx context.Context, body CreateAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAgentPolicyResponse, error) {
	rsp, err := c.CreateAgentPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentPolicyResponse(rsp)
}

// DeleteAgentPolicyWithBodyWithResponse request with arbitrary body returning *DeleteAgentPolicyResponse
func (c *ClientWithResponses) DeleteAgentPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAgentPolicyResponse, error) {
	rsp, err := c.DeleteAgentPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentPolicyResponse(rsp)
}

func (c *ClientWithResponses) DeleteAgentPolicyWithResponse(ctx context.Context, body DeleteAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAgentPolicyResponse, error) {
	rsp, err := c.DeleteAgentPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentPolicyResponse(rsp)
}

// AgentPolicyInfoWithResponse request returning *AgentPolicyInfoResponse
func (c *ClientWithResponses) AgentPolicyInfoWithResponse(ctx context.Context, agentPolicyId string, reqEditors ...RequestEditorFn) (*AgentPolicyInfoResponse, error) {
	rsp, err := c.AgentPolicyInfo(ctx, agentPolicyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentPolicyInfoResponse(rsp)
}

// UpdateAgentPolicyWithBodyWithResponse request with arbitrary body returning *UpdateAgentPolicyResponse
func (c *ClientWithResponses) UpdateAgentPolicyWithBodyWithResponse(ctx context.Context, agentPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAgentPolicyResponse, error) {
	rsp, err := c.UpdateAgentPolicyWithBody(ctx, agentPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAgentPolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdateAgentPolicyWithResponse(ctx context.Context, agentPolicyId string, body UpdateAgentPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAgentPolicyResponse, error) {
	rsp, err := c.UpdateAgentPolicy(ctx, agentPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAgentPolicyResponse(rsp)
}

// GetEnrollmentApiKeysWithResponse request returning *GetEnrollmentApiKeysResponse
func (c *ClientWithResponses) GetEnrollmentApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEnrollmentApiKeysResponse, error) {
	rsp, err := c.GetEnrollmentApiKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnrollmentApiKeysResponse(rsp)
}

// DeletePackageWithBodyWithResponse request with arbitrary body returning *DeletePackageResponse
func (c *ClientWithResponses) DeletePackageWithBodyWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *DeletePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePackageResponse, error) {
	rsp, err := c.DeletePackageWithBody(ctx, pkgName, pkgVersion, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackageResponse(rsp)
}

func (c *ClientWithResponses) DeletePackageWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *DeletePackageParams, body DeletePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePackageResponse, error) {
	rsp, err := c.DeletePackage(ctx, pkgName, pkgVersion, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackageResponse(rsp)
}

// GetPackageWithResponse request returning *GetPackageResponse
func (c *ClientWithResponses) GetPackageWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *GetPackageParams, reqEditors ...RequestEditorFn) (*GetPackageResponse, error) {
	rsp, err := c.GetPackage(ctx, pkgName, pkgVersion, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageResponse(rsp)
}

// InstallPackageWithBodyWithResponse request with arbitrary body returning *InstallPackageResponse
func (c *ClientWithResponses) InstallPackageWithBodyWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *InstallPackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallPackageResponse, error) {
	rsp, err := c.InstallPackageWithBody(ctx, pkgName, pkgVersion, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallPackageResponse(rsp)
}

func (c *ClientWithResponses) InstallPackageWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *InstallPackageParams, body InstallPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallPackageResponse, error) {
	rsp, err := c.InstallPackage(ctx, pkgName, pkgVersion, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallPackageResponse(rsp)
}

// UpdatePackageWithBodyWithResponse request with arbitrary body returning *UpdatePackageResponse
func (c *ClientWithResponses) UpdatePackageWithBodyWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *UpdatePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePackageResponse, error) {
	rsp, err := c.UpdatePackageWithBody(ctx, pkgName, pkgVersion, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePackageResponse(rsp)
}

func (c *ClientWithResponses) UpdatePackageWithResponse(ctx context.Context, pkgName string, pkgVersion string, params *UpdatePackageParams, body UpdatePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePackageResponse, error) {
	rsp, err := c.UpdatePackage(ctx, pkgName, pkgVersion, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePackageResponse(rsp)
}

// PostFleetServerHostsWithBodyWithResponse request with arbitrary body returning *PostFleetServerHostsResponse
func (c *ClientWithResponses) PostFleetServerHostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFleetServerHostsResponse, error) {
	rsp, err := c.PostFleetServerHostsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFleetServerHostsResponse(rsp)
}

func (c *ClientWithResponses) PostFleetServerHostsWithResponse(ctx context.Context, body PostFleetServerHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFleetServerHostsResponse, error) {
	rsp, err := c.PostFleetServerHosts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFleetServerHostsResponse(rsp)
}

// DeleteFleetServerHostsWithResponse request returning *DeleteFleetServerHostsResponse
func (c *ClientWithResponses) DeleteFleetServerHostsWithResponse(ctx context.Context, itemId string, reqEditors ...RequestEditorFn) (*DeleteFleetServerHostsResponse, error) {
	rsp, err := c.DeleteFleetServerHosts(ctx, itemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFleetServerHostsResponse(rsp)
}

// GetOneFleetServerHostsWithResponse request returning *GetOneFleetServerHostsResponse
func (c *ClientWithResponses) GetOneFleetServerHostsWithResponse(ctx context.Context, itemId string, reqEditors ...RequestEditorFn) (*GetOneFleetServerHostsResponse, error) {
	rsp, err := c.GetOneFleetServerHosts(ctx, itemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneFleetServerHostsResponse(rsp)
}

// UpdateFleetServerHostsWithBodyWithResponse request with arbitrary body returning *UpdateFleetServerHostsResponse
func (c *ClientWithResponses) UpdateFleetServerHostsWithBodyWithResponse(ctx context.Context, itemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFleetServerHostsResponse, error) {
	rsp, err := c.UpdateFleetServerHostsWithBody(ctx, itemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFleetServerHostsResponse(rsp)
}

func (c *ClientWithResponses) UpdateFleetServerHostsWithResponse(ctx context.Context, itemId string, body UpdateFleetServerHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFleetServerHostsResponse, error) {
	rsp, err := c.UpdateFleetServerHosts(ctx, itemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFleetServerHostsResponse(rsp)
}

// PostOutputsWithBodyWithResponse request with arbitrary body returning *PostOutputsResponse
func (c *ClientWithResponses) PostOutputsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOutputsResponse, error) {
	rsp, err := c.PostOutputsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOutputsResponse(rsp)
}

func (c *ClientWithResponses) PostOutputsWithResponse(ctx context.Context, body PostOutputsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOutputsResponse, error) {
	rsp, err := c.PostOutputs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOutputsResponse(rsp)
}

// DeleteOutputWithResponse request returning *DeleteOutputResponse
func (c *ClientWithResponses) DeleteOutputWithResponse(ctx context.Context, outputId string, reqEditors ...RequestEditorFn) (*DeleteOutputResponse, error) {
	rsp, err := c.DeleteOutput(ctx, outputId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOutputResponse(rsp)
}

// GetOutputWithResponse request returning *GetOutputResponse
func (c *ClientWithResponses) GetOutputWithResponse(ctx context.Context, outputId string, reqEditors ...RequestEditorFn) (*GetOutputResponse, error) {
	rsp, err := c.GetOutput(ctx, outputId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutputResponse(rsp)
}

// UpdateOutputWithBodyWithResponse request with arbitrary body returning *UpdateOutputResponse
func (c *ClientWithResponses) UpdateOutputWithBodyWithResponse(ctx context.Context, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOutputResponse, error) {
	rsp, err := c.UpdateOutputWithBody(ctx, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOutputResponse(rsp)
}

func (c *ClientWithResponses) UpdateOutputWithResponse(ctx context.Context, outputId string, body UpdateOutputJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOutputResponse, error) {
	rsp, err := c.UpdateOutput(ctx, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOutputResponse(rsp)
}

// CreatePackagePolicyWithBodyWithResponse request with arbitrary body returning *CreatePackagePolicyResponse
func (c *ClientWithResponses) CreatePackagePolicyWithBodyWithResponse(ctx context.Context, params *CreatePackagePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePackagePolicyResponse, error) {
	rsp, err := c.CreatePackagePolicyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePackagePolicyResponse(rsp)
}

func (c *ClientWithResponses) CreatePackagePolicyWithResponse(ctx context.Context, params *CreatePackagePolicyParams, body CreatePackagePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePackagePolicyResponse, error) {
	rsp, err := c.CreatePackagePolicy(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePackagePolicyResponse(rsp)
}

// DeletePackagePolicyWithResponse request returning *DeletePackagePolicyResponse
func (c *ClientWithResponses) DeletePackagePolicyWithResponse(ctx context.Context, packagePolicyId string, params *DeletePackagePolicyParams, reqEditors ...RequestEditorFn) (*DeletePackagePolicyResponse, error) {
	rsp, err := c.DeletePackagePolicy(ctx, packagePolicyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackagePolicyResponse(rsp)
}

// GetPackagePolicyWithResponse request returning *GetPackagePolicyResponse
func (c *ClientWithResponses) GetPackagePolicyWithResponse(ctx context.Context, packagePolicyId string, params *GetPackagePolicyParams, reqEditors ...RequestEditorFn) (*GetPackagePolicyResponse, error) {
	rsp, err := c.GetPackagePolicy(ctx, packagePolicyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePolicyResponse(rsp)
}

// UpdatePackagePolicyWithBodyWithResponse request with arbitrary body returning *UpdatePackagePolicyResponse
func (c *ClientWithResponses) UpdatePackagePolicyWithBodyWithResponse(ctx context.Context, packagePolicyId string, params *UpdatePackagePolicyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePackagePolicyResponse, error) {
	rsp, err := c.UpdatePackagePolicyWithBody(ctx, packagePolicyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePackagePolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdatePackagePolicyWithResponse(ctx context.Context, packagePolicyId string, params *UpdatePackagePolicyParams, body UpdatePackagePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePackagePolicyResponse, error) {
	rsp, err := c.UpdatePackagePolicy(ctx, packagePolicyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePackagePolicyResponse(rsp)
}

// ParseCreateAgentPolicyResponse parses an HTTP response from a CreateAgentPolicyWithResponse call
func ParseCreateAgentPolicyResponse(rsp *http.Response) (*CreateAgentPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAgentPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item *AgentPolicy `json:"item,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteAgentPolicyResponse parses an HTTP response from a DeleteAgentPolicyWithResponse call
func ParseDeleteAgentPolicyResponse(rsp *http.Response) (*DeleteAgentPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id      string `json:"id"`
			Success bool   `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAgentPolicyInfoResponse parses an HTTP response from a AgentPolicyInfoWithResponse call
func ParseAgentPolicyInfoResponse(rsp *http.Response) (*AgentPolicyInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentPolicyInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item AgentPolicy `json:"item"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateAgentPolicyResponse parses an HTTP response from a UpdateAgentPolicyWithResponse call
func ParseUpdateAgentPolicyResponse(rsp *http.Response) (*UpdateAgentPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAgentPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item AgentPolicy `json:"item"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetEnrollmentApiKeysResponse parses an HTTP response from a GetEnrollmentApiKeysWithResponse call
func ParseGetEnrollmentApiKeysResponse(rsp *http.Response) (*GetEnrollmentApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnrollmentApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items []EnrollmentApiKey `json:"items"`
			// Deprecated:
			List    *[]EnrollmentApiKey `json:"list,omitempty"`
			Page    float32             `json:"page"`
			PerPage float32             `json:"perPage"`
			Total   float32             `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeletePackageResponse parses an HTTP response from a DeletePackageWithResponse call
func ParseDeletePackageResponse(rsp *http.Response) (*DeletePackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items []struct {
				Id   string          `json:"id"`
				Type PackageItemType `json:"type"`
			} `json:"items"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPackageResponse parses an HTTP response from a GetPackageWithResponse call
func ParseGetPackageResponse(rsp *http.Response) (*GetPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item                 *PackageInfo `json:"item,omitempty"`
			KeepPoliciesUpToDate *bool        `json:"keepPoliciesUpToDate,omitempty"`
			LatestVersion        *string      `json:"latestVersion,omitempty"`
			LicensePath          *string      `json:"licensePath,omitempty"`
			Notice               *string      `json:"notice,omitempty"`
			// Deprecated:
			SavedObject map[string]interface{} `json:"savedObject"`
			Status      PackageStatus          `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseInstallPackageResponse parses an HTTP response from a InstallPackageWithResponse call
func ParseInstallPackageResponse(rsp *http.Response) (*InstallPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstallPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Meta *struct {
				InstallSource *PackageInstallSource `json:"install_source,omitempty"`
			} `json:"_meta,omitempty"`
			Items []struct {
				Id   string          `json:"id"`
				Type PackageItemType `json:"type"`
			} `json:"items"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdatePackageResponse parses an HTTP response from a UpdatePackageWithResponse call
func ParseUpdatePackageResponse(rsp *http.Response) (*UpdatePackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items []struct {
				Id   string          `json:"id"`
				Type PackageItemType `json:"type"`
			} `json:"items"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostFleetServerHostsResponse parses an HTTP response from a PostFleetServerHostsWithResponse call
func ParsePostFleetServerHostsResponse(rsp *http.Response) (*PostFleetServerHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFleetServerHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item *FleetServerHost `json:"item,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteFleetServerHostsResponse parses an HTTP response from a DeleteFleetServerHostsWithResponse call
func ParseDeleteFleetServerHostsResponse(rsp *http.Response) (*DeleteFleetServerHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFleetServerHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOneFleetServerHostsResponse parses an HTTP response from a GetOneFleetServerHostsWithResponse call
func ParseGetOneFleetServerHostsResponse(rsp *http.Response) (*GetOneFleetServerHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneFleetServerHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item FleetServerHost `json:"item"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateFleetServerHostsResponse parses an HTTP response from a UpdateFleetServerHostsWithResponse call
func ParseUpdateFleetServerHostsResponse(rsp *http.Response) (*UpdateFleetServerHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFleetServerHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item FleetServerHost `json:"item"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOutputsResponse parses an HTTP response from a PostOutputsWithResponse call
func ParsePostOutputsResponse(rsp *http.Response) (*PostOutputsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOutputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item *OutputCreateRequest `json:"item,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteOutputResponse parses an HTTP response from a DeleteOutputWithResponse call
func ParseDeleteOutputResponse(rsp *http.Response) (*DeleteOutputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOutputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOutputResponse parses an HTTP response from a GetOutputWithResponse call
func ParseGetOutputResponse(rsp *http.Response) (*GetOutputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item *OutputCreateRequest `json:"item,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateOutputResponse parses an HTTP response from a UpdateOutputWithResponse call
func ParseUpdateOutputResponse(rsp *http.Response) (*UpdateOutputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOutputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item *OutputUpdateRequest `json:"item,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreatePackagePolicyResponse parses an HTTP response from a CreatePackagePolicyWithResponse call
func ParseCreatePackagePolicyResponse(rsp *http.Response) (*CreatePackagePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePackagePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item PackagePolicy `json:"item"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePackagePolicyResponse parses an HTTP response from a DeletePackagePolicyWithResponse call
func ParseDeletePackagePolicyResponse(rsp *http.Response) (*DeletePackagePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackagePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPackagePolicyResponse parses an HTTP response from a GetPackagePolicyWithResponse call
func ParseGetPackagePolicyResponse(rsp *http.Response) (*GetPackagePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item PackagePolicy `json:"item"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdatePackagePolicyResponse parses an HTTP response from a UpdatePackagePolicyWithResponse call
func ParseUpdatePackagePolicyResponse(rsp *http.Response) (*UpdatePackagePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePackagePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Item   PackagePolicy `json:"item"`
			Sucess bool          `json:"sucess"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
